; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %.mask = and i32 %3, 8388607, !dbg !10
  %5 = icmp eq i32 %.mask, 0, !dbg !10
  br i1 %5, label %common.ret, label %6, !dbg !10

common.ret:                                       ; preds = %4, %629
  ret void, !dbg !11

6:                                                ; preds = %4
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %8 = add i32 %3, 31, !dbg !13
  %9 = sdiv i32 %8, 32, !dbg !14
  %.frozen = freeze i32 %7
  %10 = sdiv i32 %.frozen, 128, !dbg !15
  %11 = shl nsw i32 %10, 3, !dbg !16
  %12 = sub nsw i32 %9, %11, !dbg !17
  %13 = tail call i32 @llvm.smin.i32(i32 %12, i32 8), !dbg !18
  %14 = srem i32 %7, %13, !dbg !19
  %15 = add nsw i32 %11, %14, !dbg !20
  %16 = mul i32 %10, 128
  %.decomposed = sub i32 %.frozen, %16
  %17 = sdiv i32 %.decomposed, %13, !dbg !21
  %18 = shl i32 %15, 5, !dbg !22
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !23
  %20 = lshr i32 %19, 2, !dbg !23
  %21 = and i32 %20, 15, !dbg !23
  %22 = or disjoint i32 %21, 16, !dbg !23
  %23 = lshr i32 %19, 3, !dbg !23
  %24 = and i32 %23, 7, !dbg !23
  %25 = shl i32 %19, 2, !dbg !23
  %26 = and i32 %25, 12, !dbg !23
  %27 = or disjoint i32 %18, %21, !dbg !24
  %28 = or disjoint i32 %18, %22, !dbg !24
  %29 = or disjoint i32 %18, %24, !dbg !23
  %30 = shl nsw i32 %17, 5, !dbg !25
  %31 = or disjoint i32 %30, %21, !dbg !26
  %32 = or disjoint i32 %30, %22, !dbg !26
  %33 = srem i32 %27, %3, !dbg !27
  %34 = srem i32 %28, %3, !dbg !27
  %35 = srem i32 %31, 512, !dbg !28
  %36 = srem i32 %32, 512, !dbg !28
  %37 = mul i32 %33, 1872, !dbg !29
  %38 = mul i32 %34, 1872, !dbg !29
  %39 = or disjoint i32 %37, %26, !dbg !30
  %40 = or disjoint i32 %38, %26, !dbg !30
  %41 = sext i32 %39 to i64, !dbg !31
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !31
  %43 = sext i32 %40 to i64, !dbg !31
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !31
  %45 = mul nsw i32 %35, 1872, !dbg !32
  %46 = mul nsw i32 %36, 1872, !dbg !32
  %47 = or disjoint i32 %45, %26, !dbg !33
  %48 = or disjoint i32 %46, %26, !dbg !33
  %49 = sext i32 %47 to i64, !dbg !34
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !34
  %51 = sext i32 %48 to i64, !dbg !34
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !34
  %53 = shl nuw nsw i32 %21, 4
  %54 = or disjoint i32 %53, %26
  %55 = zext nneg i32 %54 to i64
  %56 = getelementptr float, ptr addrspace(3) @global_smem, i64 %55
  %57 = shl nuw nsw i32 %22, 4
  %58 = or disjoint i32 %57, %26
  %59 = zext nneg i32 %58 to i64
  %60 = getelementptr float, ptr addrspace(3) @global_smem, i64 %59
  %61 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %55
  %62 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %59
  %63 = shl i32 %19, 3
  %64 = and i32 %63, 1984
  %65 = zext nneg i32 %64 to i64
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i64 %65
  %67 = getelementptr i8, ptr addrspace(3) %66, i64 64
  %68 = getelementptr i8, ptr addrspace(3) %66, i64 128
  %69 = getelementptr i8, ptr addrspace(3) %66, i64 192
  %70 = getelementptr i8, ptr addrspace(3) %66, i64 4
  %71 = getelementptr i8, ptr addrspace(3) %66, i64 68
  %72 = getelementptr i8, ptr addrspace(3) %66, i64 132
  %73 = getelementptr i8, ptr addrspace(3) %66, i64 196
  %74 = getelementptr i8, ptr addrspace(3) %66, i64 8
  %75 = getelementptr i8, ptr addrspace(3) %66, i64 72
  %76 = getelementptr i8, ptr addrspace(3) %66, i64 136
  %77 = getelementptr i8, ptr addrspace(3) %66, i64 200
  %78 = getelementptr i8, ptr addrspace(3) %66, i64 12
  %79 = getelementptr i8, ptr addrspace(3) %66, i64 76
  %80 = getelementptr i8, ptr addrspace(3) %66, i64 140
  %81 = getelementptr i8, ptr addrspace(3) %66, i64 204
  %82 = getelementptr i8, ptr addrspace(3) %66, i64 16
  %83 = getelementptr i8, ptr addrspace(3) %66, i64 80
  %84 = getelementptr i8, ptr addrspace(3) %66, i64 144
  %85 = getelementptr i8, ptr addrspace(3) %66, i64 208
  %86 = getelementptr i8, ptr addrspace(3) %66, i64 20
  %87 = getelementptr i8, ptr addrspace(3) %66, i64 84
  %88 = getelementptr i8, ptr addrspace(3) %66, i64 148
  %89 = getelementptr i8, ptr addrspace(3) %66, i64 212
  %90 = getelementptr i8, ptr addrspace(3) %66, i64 24
  %91 = getelementptr i8, ptr addrspace(3) %66, i64 88
  %92 = getelementptr i8, ptr addrspace(3) %66, i64 152
  %93 = getelementptr i8, ptr addrspace(3) %66, i64 216
  %94 = getelementptr i8, ptr addrspace(3) %66, i64 28
  %95 = getelementptr i8, ptr addrspace(3) %66, i64 92
  %96 = getelementptr i8, ptr addrspace(3) %66, i64 156
  %97 = getelementptr i8, ptr addrspace(3) %66, i64 220
  %98 = getelementptr i8, ptr addrspace(3) %66, i64 32
  %99 = getelementptr i8, ptr addrspace(3) %66, i64 96
  %100 = getelementptr i8, ptr addrspace(3) %66, i64 160
  %101 = getelementptr i8, ptr addrspace(3) %66, i64 224
  %102 = getelementptr i8, ptr addrspace(3) %66, i64 36
  %103 = getelementptr i8, ptr addrspace(3) %66, i64 100
  %104 = getelementptr i8, ptr addrspace(3) %66, i64 164
  %105 = getelementptr i8, ptr addrspace(3) %66, i64 228
  %106 = getelementptr i8, ptr addrspace(3) %66, i64 40
  %107 = getelementptr i8, ptr addrspace(3) %66, i64 104
  %108 = getelementptr i8, ptr addrspace(3) %66, i64 168
  %109 = getelementptr i8, ptr addrspace(3) %66, i64 232
  %110 = getelementptr i8, ptr addrspace(3) %66, i64 44
  %111 = getelementptr i8, ptr addrspace(3) %66, i64 108
  %112 = getelementptr i8, ptr addrspace(3) %66, i64 172
  %113 = getelementptr i8, ptr addrspace(3) %66, i64 236
  %114 = getelementptr i8, ptr addrspace(3) %66, i64 48
  %115 = getelementptr i8, ptr addrspace(3) %66, i64 112
  %116 = getelementptr i8, ptr addrspace(3) %66, i64 176
  %117 = getelementptr i8, ptr addrspace(3) %66, i64 240
  %118 = getelementptr i8, ptr addrspace(3) %66, i64 52
  %119 = getelementptr i8, ptr addrspace(3) %66, i64 116
  %120 = getelementptr i8, ptr addrspace(3) %66, i64 180
  %121 = getelementptr i8, ptr addrspace(3) %66, i64 244
  %122 = getelementptr i8, ptr addrspace(3) %66, i64 56
  %123 = getelementptr i8, ptr addrspace(3) %66, i64 120
  %124 = getelementptr i8, ptr addrspace(3) %66, i64 184
  %125 = getelementptr i8, ptr addrspace(3) %66, i64 248
  %126 = getelementptr i8, ptr addrspace(3) %66, i64 60
  %127 = getelementptr i8, ptr addrspace(3) %66, i64 124
  %128 = getelementptr i8, ptr addrspace(3) %66, i64 188
  %129 = getelementptr i8, ptr addrspace(3) %66, i64 252
  %130 = shl i32 %19, 6
  %131 = and i32 %130, 448
  %132 = zext nneg i32 %131 to i64
  %133 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %132
  %134 = getelementptr i8, ptr addrspace(3) %133, i64 64
  %135 = getelementptr i8, ptr addrspace(3) %133, i64 128
  %136 = getelementptr i8, ptr addrspace(3) %133, i64 192
  %137 = getelementptr i8, ptr addrspace(3) %133, i64 4
  %138 = getelementptr i8, ptr addrspace(3) %133, i64 68
  %139 = getelementptr i8, ptr addrspace(3) %133, i64 132
  %140 = getelementptr i8, ptr addrspace(3) %133, i64 196
  %141 = getelementptr i8, ptr addrspace(3) %133, i64 8
  %142 = getelementptr i8, ptr addrspace(3) %133, i64 72
  %143 = getelementptr i8, ptr addrspace(3) %133, i64 136
  %144 = getelementptr i8, ptr addrspace(3) %133, i64 200
  %145 = getelementptr i8, ptr addrspace(3) %133, i64 12
  %146 = getelementptr i8, ptr addrspace(3) %133, i64 76
  %147 = getelementptr i8, ptr addrspace(3) %133, i64 140
  %148 = getelementptr i8, ptr addrspace(3) %133, i64 204
  %149 = getelementptr i8, ptr addrspace(3) %133, i64 16
  %150 = getelementptr i8, ptr addrspace(3) %133, i64 80
  %151 = getelementptr i8, ptr addrspace(3) %133, i64 144
  %152 = getelementptr i8, ptr addrspace(3) %133, i64 208
  %153 = getelementptr i8, ptr addrspace(3) %133, i64 20
  %154 = getelementptr i8, ptr addrspace(3) %133, i64 84
  %155 = getelementptr i8, ptr addrspace(3) %133, i64 148
  %156 = getelementptr i8, ptr addrspace(3) %133, i64 212
  %157 = getelementptr i8, ptr addrspace(3) %133, i64 24
  %158 = getelementptr i8, ptr addrspace(3) %133, i64 88
  %159 = getelementptr i8, ptr addrspace(3) %133, i64 152
  %160 = getelementptr i8, ptr addrspace(3) %133, i64 216
  %161 = getelementptr i8, ptr addrspace(3) %133, i64 28
  %162 = getelementptr i8, ptr addrspace(3) %133, i64 92
  %163 = getelementptr i8, ptr addrspace(3) %133, i64 156
  %164 = getelementptr i8, ptr addrspace(3) %133, i64 220
  %165 = getelementptr i8, ptr addrspace(3) %133, i64 32
  %166 = getelementptr i8, ptr addrspace(3) %133, i64 96
  %167 = getelementptr i8, ptr addrspace(3) %133, i64 160
  %168 = getelementptr i8, ptr addrspace(3) %133, i64 224
  %169 = getelementptr i8, ptr addrspace(3) %133, i64 36
  %170 = getelementptr i8, ptr addrspace(3) %133, i64 100
  %171 = getelementptr i8, ptr addrspace(3) %133, i64 164
  %172 = getelementptr i8, ptr addrspace(3) %133, i64 228
  %173 = getelementptr i8, ptr addrspace(3) %133, i64 40
  %174 = getelementptr i8, ptr addrspace(3) %133, i64 104
  %175 = getelementptr i8, ptr addrspace(3) %133, i64 168
  %176 = getelementptr i8, ptr addrspace(3) %133, i64 232
  %177 = getelementptr i8, ptr addrspace(3) %133, i64 44
  %178 = getelementptr i8, ptr addrspace(3) %133, i64 108
  %179 = getelementptr i8, ptr addrspace(3) %133, i64 172
  %180 = getelementptr i8, ptr addrspace(3) %133, i64 236
  %181 = getelementptr i8, ptr addrspace(3) %133, i64 48
  %182 = getelementptr i8, ptr addrspace(3) %133, i64 112
  %183 = getelementptr i8, ptr addrspace(3) %133, i64 176
  %184 = getelementptr i8, ptr addrspace(3) %133, i64 240
  %185 = getelementptr i8, ptr addrspace(3) %133, i64 52
  %186 = getelementptr i8, ptr addrspace(3) %133, i64 116
  %187 = getelementptr i8, ptr addrspace(3) %133, i64 180
  %188 = getelementptr i8, ptr addrspace(3) %133, i64 244
  %189 = getelementptr i8, ptr addrspace(3) %133, i64 56
  %190 = getelementptr i8, ptr addrspace(3) %133, i64 120
  %191 = getelementptr i8, ptr addrspace(3) %133, i64 184
  %192 = getelementptr i8, ptr addrspace(3) %133, i64 248
  %193 = getelementptr i8, ptr addrspace(3) %133, i64 60
  %194 = getelementptr i8, ptr addrspace(3) %133, i64 124
  %195 = getelementptr i8, ptr addrspace(3) %133, i64 188
  %196 = getelementptr i8, ptr addrspace(3) %133, i64 252
  br label %197, !dbg !35

197:                                              ; preds = %6, %197
  %.pn2467 = phi ptr addrspace(1) [ %52, %6 ], [ %626, %197 ]
  %.pn3266 = phi ptr addrspace(1) [ %50, %6 ], [ %625, %197 ]
  %.pn865 = phi ptr addrspace(1) [ %44, %6 ], [ %624, %197 ]
  %.pn1664 = phi ptr addrspace(1) [ %42, %6 ], [ %623, %197 ]
  %198 = phi i32 [ 0, %6 ], [ %627, %197 ]
  %199 = phi <4 x float> [ zeroinitializer, %6 ], [ %622, %197 ]
  %200 = phi <4 x float> [ zeroinitializer, %6 ], [ %619, %197 ]
  %201 = phi <4 x float> [ zeroinitializer, %6 ], [ %616, %197 ]
  %202 = phi <4 x float> [ zeroinitializer, %6 ], [ %613, %197 ]
  %203 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %.pn1664, i1 true) #3, !dbg !36
  %204 = extractvalue { i32, i32, i32, i32 } %203, 0, !dbg !36
  %205 = extractvalue { i32, i32, i32, i32 } %203, 1, !dbg !36
  %206 = extractvalue { i32, i32, i32, i32 } %203, 2, !dbg !36
  %207 = extractvalue { i32, i32, i32, i32 } %203, 3, !dbg !36
  %208 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %.pn865, i1 true) #3, !dbg !36
  %209 = extractvalue { i32, i32, i32, i32 } %208, 0, !dbg !36
  %210 = extractvalue { i32, i32, i32, i32 } %208, 1, !dbg !36
  %211 = extractvalue { i32, i32, i32, i32 } %208, 2, !dbg !36
  %212 = extractvalue { i32, i32, i32, i32 } %208, 3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %213 = insertelement <4 x i32> poison, i32 %204, i64 0, !dbg !36
  %214 = insertelement <4 x i32> %213, i32 %205, i64 1, !dbg !36
  %215 = insertelement <4 x i32> %214, i32 %206, i64 2, !dbg !36
  %216 = insertelement <4 x i32> %215, i32 %207, i64 3, !dbg !36
  store <4 x i32> %216, ptr addrspace(3) %56, align 16, !dbg !36
  %217 = insertelement <4 x i32> poison, i32 %209, i64 0, !dbg !36
  %218 = insertelement <4 x i32> %217, i32 %210, i64 1, !dbg !36
  %219 = insertelement <4 x i32> %218, i32 %211, i64 2, !dbg !36
  %220 = insertelement <4 x i32> %219, i32 %212, i64 3, !dbg !36
  store <4 x i32> %220, ptr addrspace(3) %60, align 16, !dbg !36
  %221 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %.pn3266, i1 true) #3, !dbg !37
  %222 = extractvalue { i32, i32, i32, i32 } %221, 0, !dbg !37
  %223 = extractvalue { i32, i32, i32, i32 } %221, 1, !dbg !37
  %224 = extractvalue { i32, i32, i32, i32 } %221, 2, !dbg !37
  %225 = extractvalue { i32, i32, i32, i32 } %221, 3, !dbg !37
  %226 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %.pn2467, i1 true) #3, !dbg !37
  %227 = extractvalue { i32, i32, i32, i32 } %226, 0, !dbg !37
  %228 = extractvalue { i32, i32, i32, i32 } %226, 1, !dbg !37
  %229 = extractvalue { i32, i32, i32, i32 } %226, 2, !dbg !37
  %230 = extractvalue { i32, i32, i32, i32 } %226, 3, !dbg !37
  %231 = insertelement <4 x i32> poison, i32 %222, i64 0, !dbg !37
  %232 = insertelement <4 x i32> %231, i32 %223, i64 1, !dbg !37
  %233 = insertelement <4 x i32> %232, i32 %224, i64 2, !dbg !37
  %234 = insertelement <4 x i32> %233, i32 %225, i64 3, !dbg !37
  store <4 x i32> %234, ptr addrspace(3) %61, align 16, !dbg !37
  %235 = insertelement <4 x i32> poison, i32 %227, i64 0, !dbg !37
  %236 = insertelement <4 x i32> %235, i32 %228, i64 1, !dbg !37
  %237 = insertelement <4 x i32> %236, i32 %229, i64 2, !dbg !37
  %238 = insertelement <4 x i32> %237, i32 %230, i64 3, !dbg !37
  store <4 x i32> %238, ptr addrspace(3) %62, align 16, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %239 = load float, ptr addrspace(3) %66, align 16, !dbg !36
  %240 = load float, ptr addrspace(3) %67, align 16, !dbg !36
  %241 = load float, ptr addrspace(3) %68, align 16, !dbg !36
  %242 = load float, ptr addrspace(3) %69, align 16, !dbg !36
  %243 = load float, ptr addrspace(3) %70, align 4, !dbg !36
  %244 = load float, ptr addrspace(3) %71, align 4, !dbg !36
  %245 = load float, ptr addrspace(3) %72, align 4, !dbg !36
  %246 = load float, ptr addrspace(3) %73, align 4, !dbg !36
  %247 = load float, ptr addrspace(3) %74, align 8, !dbg !36
  %248 = load float, ptr addrspace(3) %75, align 8, !dbg !36
  %249 = load float, ptr addrspace(3) %76, align 8, !dbg !36
  %250 = load float, ptr addrspace(3) %77, align 8, !dbg !36
  %251 = load float, ptr addrspace(3) %78, align 4, !dbg !36
  %252 = load float, ptr addrspace(3) %79, align 4, !dbg !36
  %253 = load float, ptr addrspace(3) %80, align 4, !dbg !36
  %254 = load float, ptr addrspace(3) %81, align 4, !dbg !36
  %255 = load float, ptr addrspace(3) %82, align 16, !dbg !36
  %256 = load float, ptr addrspace(3) %83, align 16, !dbg !36
  %257 = load float, ptr addrspace(3) %84, align 16, !dbg !36
  %258 = load float, ptr addrspace(3) %85, align 16, !dbg !36
  %259 = load float, ptr addrspace(3) %86, align 4, !dbg !36
  %260 = load float, ptr addrspace(3) %87, align 4, !dbg !36
  %261 = load float, ptr addrspace(3) %88, align 4, !dbg !36
  %262 = load float, ptr addrspace(3) %89, align 4, !dbg !36
  %263 = load float, ptr addrspace(3) %90, align 8, !dbg !36
  %264 = load float, ptr addrspace(3) %91, align 8, !dbg !36
  %265 = load float, ptr addrspace(3) %92, align 8, !dbg !36
  %266 = load float, ptr addrspace(3) %93, align 8, !dbg !36
  %267 = load float, ptr addrspace(3) %94, align 4, !dbg !36
  %268 = load float, ptr addrspace(3) %95, align 4, !dbg !36
  %269 = load float, ptr addrspace(3) %96, align 4, !dbg !36
  %270 = load float, ptr addrspace(3) %97, align 4, !dbg !36
  %271 = load float, ptr addrspace(3) %98, align 16, !dbg !36
  %272 = load float, ptr addrspace(3) %99, align 16, !dbg !36
  %273 = load float, ptr addrspace(3) %100, align 16, !dbg !36
  %274 = load float, ptr addrspace(3) %101, align 16, !dbg !36
  %275 = load float, ptr addrspace(3) %102, align 4, !dbg !36
  %276 = load float, ptr addrspace(3) %103, align 4, !dbg !36
  %277 = load float, ptr addrspace(3) %104, align 4, !dbg !36
  %278 = load float, ptr addrspace(3) %105, align 4, !dbg !36
  %279 = load float, ptr addrspace(3) %106, align 8, !dbg !36
  %280 = load float, ptr addrspace(3) %107, align 8, !dbg !36
  %281 = load float, ptr addrspace(3) %108, align 8, !dbg !36
  %282 = load float, ptr addrspace(3) %109, align 8, !dbg !36
  %283 = load float, ptr addrspace(3) %110, align 4, !dbg !36
  %284 = load float, ptr addrspace(3) %111, align 4, !dbg !36
  %285 = load float, ptr addrspace(3) %112, align 4, !dbg !36
  %286 = load float, ptr addrspace(3) %113, align 4, !dbg !36
  %287 = load float, ptr addrspace(3) %114, align 16, !dbg !36
  %288 = load float, ptr addrspace(3) %115, align 16, !dbg !36
  %289 = load float, ptr addrspace(3) %116, align 16, !dbg !36
  %290 = load float, ptr addrspace(3) %117, align 16, !dbg !36
  %291 = load float, ptr addrspace(3) %118, align 4, !dbg !36
  %292 = load float, ptr addrspace(3) %119, align 4, !dbg !36
  %293 = load float, ptr addrspace(3) %120, align 4, !dbg !36
  %294 = load float, ptr addrspace(3) %121, align 4, !dbg !36
  %295 = load float, ptr addrspace(3) %122, align 8, !dbg !36
  %296 = load float, ptr addrspace(3) %123, align 8, !dbg !36
  %297 = load float, ptr addrspace(3) %124, align 8, !dbg !36
  %298 = load float, ptr addrspace(3) %125, align 8, !dbg !36
  %299 = load float, ptr addrspace(3) %126, align 4, !dbg !36
  %300 = load float, ptr addrspace(3) %127, align 4, !dbg !36
  %301 = load float, ptr addrspace(3) %128, align 4, !dbg !36
  %302 = load float, ptr addrspace(3) %129, align 4, !dbg !36
  %303 = load float, ptr addrspace(3) %133, align 16, !dbg !37
  %304 = load float, ptr addrspace(3) %134, align 16, !dbg !37
  %305 = load float, ptr addrspace(3) %135, align 16, !dbg !37
  %306 = load float, ptr addrspace(3) %136, align 16, !dbg !37
  %307 = load float, ptr addrspace(3) %137, align 4, !dbg !37
  %308 = load float, ptr addrspace(3) %138, align 4, !dbg !37
  %309 = load float, ptr addrspace(3) %139, align 4, !dbg !37
  %310 = load float, ptr addrspace(3) %140, align 4, !dbg !37
  %311 = load float, ptr addrspace(3) %141, align 8, !dbg !37
  %312 = load float, ptr addrspace(3) %142, align 8, !dbg !37
  %313 = load float, ptr addrspace(3) %143, align 8, !dbg !37
  %314 = load float, ptr addrspace(3) %144, align 8, !dbg !37
  %315 = load float, ptr addrspace(3) %145, align 4, !dbg !37
  %316 = load float, ptr addrspace(3) %146, align 4, !dbg !37
  %317 = load float, ptr addrspace(3) %147, align 4, !dbg !37
  %318 = load float, ptr addrspace(3) %148, align 4, !dbg !37
  %319 = load float, ptr addrspace(3) %149, align 16, !dbg !37
  %320 = load float, ptr addrspace(3) %150, align 16, !dbg !37
  %321 = load float, ptr addrspace(3) %151, align 16, !dbg !37
  %322 = load float, ptr addrspace(3) %152, align 16, !dbg !37
  %323 = load float, ptr addrspace(3) %153, align 4, !dbg !37
  %324 = load float, ptr addrspace(3) %154, align 4, !dbg !37
  %325 = load float, ptr addrspace(3) %155, align 4, !dbg !37
  %326 = load float, ptr addrspace(3) %156, align 4, !dbg !37
  %327 = load float, ptr addrspace(3) %157, align 8, !dbg !37
  %328 = load float, ptr addrspace(3) %158, align 8, !dbg !37
  %329 = load float, ptr addrspace(3) %159, align 8, !dbg !37
  %330 = load float, ptr addrspace(3) %160, align 8, !dbg !37
  %331 = load float, ptr addrspace(3) %161, align 4, !dbg !37
  %332 = load float, ptr addrspace(3) %162, align 4, !dbg !37
  %333 = load float, ptr addrspace(3) %163, align 4, !dbg !37
  %334 = load float, ptr addrspace(3) %164, align 4, !dbg !37
  %335 = load float, ptr addrspace(3) %165, align 16, !dbg !37
  %336 = load float, ptr addrspace(3) %166, align 16, !dbg !37
  %337 = load float, ptr addrspace(3) %167, align 16, !dbg !37
  %338 = load float, ptr addrspace(3) %168, align 16, !dbg !37
  %339 = load float, ptr addrspace(3) %169, align 4, !dbg !37
  %340 = load float, ptr addrspace(3) %170, align 4, !dbg !37
  %341 = load float, ptr addrspace(3) %171, align 4, !dbg !37
  %342 = load float, ptr addrspace(3) %172, align 4, !dbg !37
  %343 = load float, ptr addrspace(3) %173, align 8, !dbg !37
  %344 = load float, ptr addrspace(3) %174, align 8, !dbg !37
  %345 = load float, ptr addrspace(3) %175, align 8, !dbg !37
  %346 = load float, ptr addrspace(3) %176, align 8, !dbg !37
  %347 = load float, ptr addrspace(3) %177, align 4, !dbg !37
  %348 = load float, ptr addrspace(3) %178, align 4, !dbg !37
  %349 = load float, ptr addrspace(3) %179, align 4, !dbg !37
  %350 = load float, ptr addrspace(3) %180, align 4, !dbg !37
  %351 = load float, ptr addrspace(3) %181, align 16, !dbg !37
  %352 = load float, ptr addrspace(3) %182, align 16, !dbg !37
  %353 = load float, ptr addrspace(3) %183, align 16, !dbg !37
  %354 = load float, ptr addrspace(3) %184, align 16, !dbg !37
  %355 = load float, ptr addrspace(3) %185, align 4, !dbg !37
  %356 = load float, ptr addrspace(3) %186, align 4, !dbg !37
  %357 = load float, ptr addrspace(3) %187, align 4, !dbg !37
  %358 = load float, ptr addrspace(3) %188, align 4, !dbg !37
  %359 = load float, ptr addrspace(3) %189, align 8, !dbg !37
  %360 = load float, ptr addrspace(3) %190, align 8, !dbg !37
  %361 = load float, ptr addrspace(3) %191, align 8, !dbg !37
  %362 = load float, ptr addrspace(3) %192, align 8, !dbg !37
  %363 = load float, ptr addrspace(3) %193, align 4, !dbg !37
  %364 = load float, ptr addrspace(3) %194, align 4, !dbg !37
  %365 = load float, ptr addrspace(3) %195, align 4, !dbg !37
  %366 = load float, ptr addrspace(3) %196, align 4, !dbg !37
  %367 = insertelement <4 x float> poison, float %239, i64 0, !dbg !38
  %368 = shufflevector <4 x float> %367, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %369 = insertelement <4 x float> poison, float %303, i64 0, !dbg !38
  %370 = insertelement <4 x float> %369, float %304, i64 1, !dbg !38
  %371 = insertelement <4 x float> %370, float %305, i64 2, !dbg !38
  %372 = insertelement <4 x float> %371, float %306, i64 3, !dbg !38
  %373 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %368, <4 x float> %372, <4 x float> %202), !dbg !38
  %374 = insertelement <4 x float> poison, float %243, i64 0, !dbg !38
  %375 = shufflevector <4 x float> %374, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %376 = insertelement <4 x float> poison, float %307, i64 0, !dbg !38
  %377 = insertelement <4 x float> %376, float %308, i64 1, !dbg !38
  %378 = insertelement <4 x float> %377, float %309, i64 2, !dbg !38
  %379 = insertelement <4 x float> %378, float %310, i64 3, !dbg !38
  %380 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %375, <4 x float> %379, <4 x float> %373), !dbg !38
  %381 = insertelement <4 x float> poison, float %247, i64 0, !dbg !38
  %382 = shufflevector <4 x float> %381, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %383 = insertelement <4 x float> poison, float %311, i64 0, !dbg !38
  %384 = insertelement <4 x float> %383, float %312, i64 1, !dbg !38
  %385 = insertelement <4 x float> %384, float %313, i64 2, !dbg !38
  %386 = insertelement <4 x float> %385, float %314, i64 3, !dbg !38
  %387 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %382, <4 x float> %386, <4 x float> %380), !dbg !38
  %388 = insertelement <4 x float> poison, float %251, i64 0, !dbg !38
  %389 = shufflevector <4 x float> %388, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %390 = insertelement <4 x float> poison, float %315, i64 0, !dbg !38
  %391 = insertelement <4 x float> %390, float %316, i64 1, !dbg !38
  %392 = insertelement <4 x float> %391, float %317, i64 2, !dbg !38
  %393 = insertelement <4 x float> %392, float %318, i64 3, !dbg !38
  %394 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %389, <4 x float> %393, <4 x float> %387), !dbg !38
  %395 = insertelement <4 x float> poison, float %255, i64 0, !dbg !38
  %396 = shufflevector <4 x float> %395, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %397 = insertelement <4 x float> poison, float %319, i64 0, !dbg !38
  %398 = insertelement <4 x float> %397, float %320, i64 1, !dbg !38
  %399 = insertelement <4 x float> %398, float %321, i64 2, !dbg !38
  %400 = insertelement <4 x float> %399, float %322, i64 3, !dbg !38
  %401 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %396, <4 x float> %400, <4 x float> %394), !dbg !38
  %402 = insertelement <4 x float> poison, float %240, i64 0, !dbg !38
  %403 = shufflevector <4 x float> %402, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %404 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %403, <4 x float> %372, <4 x float> %201), !dbg !38
  %405 = insertelement <4 x float> poison, float %244, i64 0, !dbg !38
  %406 = shufflevector <4 x float> %405, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %407 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %406, <4 x float> %379, <4 x float> %404), !dbg !38
  %408 = insertelement <4 x float> poison, float %248, i64 0, !dbg !38
  %409 = shufflevector <4 x float> %408, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %410 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %409, <4 x float> %386, <4 x float> %407), !dbg !38
  %411 = insertelement <4 x float> poison, float %252, i64 0, !dbg !38
  %412 = shufflevector <4 x float> %411, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %413 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %412, <4 x float> %393, <4 x float> %410), !dbg !38
  %414 = insertelement <4 x float> poison, float %256, i64 0, !dbg !38
  %415 = shufflevector <4 x float> %414, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %416 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %415, <4 x float> %400, <4 x float> %413), !dbg !38
  %417 = insertelement <4 x float> poison, float %241, i64 0, !dbg !38
  %418 = shufflevector <4 x float> %417, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %419 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %418, <4 x float> %372, <4 x float> %200), !dbg !38
  %420 = insertelement <4 x float> poison, float %245, i64 0, !dbg !38
  %421 = shufflevector <4 x float> %420, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %422 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %421, <4 x float> %379, <4 x float> %419), !dbg !38
  %423 = insertelement <4 x float> poison, float %249, i64 0, !dbg !38
  %424 = shufflevector <4 x float> %423, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %425 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %424, <4 x float> %386, <4 x float> %422), !dbg !38
  %426 = insertelement <4 x float> poison, float %253, i64 0, !dbg !38
  %427 = shufflevector <4 x float> %426, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %428 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %427, <4 x float> %393, <4 x float> %425), !dbg !38
  %429 = insertelement <4 x float> poison, float %257, i64 0, !dbg !38
  %430 = shufflevector <4 x float> %429, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %431 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %430, <4 x float> %400, <4 x float> %428), !dbg !38
  %432 = insertelement <4 x float> poison, float %242, i64 0, !dbg !38
  %433 = shufflevector <4 x float> %432, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %434 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %433, <4 x float> %372, <4 x float> %199), !dbg !38
  %435 = insertelement <4 x float> poison, float %246, i64 0, !dbg !38
  %436 = shufflevector <4 x float> %435, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %437 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %436, <4 x float> %379, <4 x float> %434), !dbg !38
  %438 = insertelement <4 x float> poison, float %250, i64 0, !dbg !38
  %439 = shufflevector <4 x float> %438, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %440 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %439, <4 x float> %386, <4 x float> %437), !dbg !38
  %441 = insertelement <4 x float> poison, float %254, i64 0, !dbg !38
  %442 = shufflevector <4 x float> %441, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %443 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %442, <4 x float> %393, <4 x float> %440), !dbg !38
  %444 = insertelement <4 x float> poison, float %258, i64 0, !dbg !38
  %445 = shufflevector <4 x float> %444, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %446 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %445, <4 x float> %400, <4 x float> %443), !dbg !38
  %447 = insertelement <4 x float> poison, float %259, i64 0, !dbg !38
  %448 = shufflevector <4 x float> %447, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %449 = insertelement <4 x float> poison, float %323, i64 0, !dbg !38
  %450 = insertelement <4 x float> %449, float %324, i64 1, !dbg !38
  %451 = insertelement <4 x float> %450, float %325, i64 2, !dbg !38
  %452 = insertelement <4 x float> %451, float %326, i64 3, !dbg !38
  %453 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %448, <4 x float> %452, <4 x float> %401), !dbg !38
  %454 = insertelement <4 x float> poison, float %263, i64 0, !dbg !38
  %455 = shufflevector <4 x float> %454, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %456 = insertelement <4 x float> poison, float %327, i64 0, !dbg !38
  %457 = insertelement <4 x float> %456, float %328, i64 1, !dbg !38
  %458 = insertelement <4 x float> %457, float %329, i64 2, !dbg !38
  %459 = insertelement <4 x float> %458, float %330, i64 3, !dbg !38
  %460 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %455, <4 x float> %459, <4 x float> %453), !dbg !38
  %461 = insertelement <4 x float> poison, float %267, i64 0, !dbg !38
  %462 = shufflevector <4 x float> %461, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %463 = insertelement <4 x float> poison, float %331, i64 0, !dbg !38
  %464 = insertelement <4 x float> %463, float %332, i64 1, !dbg !38
  %465 = insertelement <4 x float> %464, float %333, i64 2, !dbg !38
  %466 = insertelement <4 x float> %465, float %334, i64 3, !dbg !38
  %467 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %462, <4 x float> %466, <4 x float> %460), !dbg !38
  %468 = insertelement <4 x float> poison, float %271, i64 0, !dbg !38
  %469 = shufflevector <4 x float> %468, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %470 = insertelement <4 x float> poison, float %335, i64 0, !dbg !38
  %471 = insertelement <4 x float> %470, float %336, i64 1, !dbg !38
  %472 = insertelement <4 x float> %471, float %337, i64 2, !dbg !38
  %473 = insertelement <4 x float> %472, float %338, i64 3, !dbg !38
  %474 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %469, <4 x float> %473, <4 x float> %467), !dbg !38
  %475 = insertelement <4 x float> poison, float %275, i64 0, !dbg !38
  %476 = shufflevector <4 x float> %475, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %477 = insertelement <4 x float> poison, float %339, i64 0, !dbg !38
  %478 = insertelement <4 x float> %477, float %340, i64 1, !dbg !38
  %479 = insertelement <4 x float> %478, float %341, i64 2, !dbg !38
  %480 = insertelement <4 x float> %479, float %342, i64 3, !dbg !38
  %481 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %476, <4 x float> %480, <4 x float> %474), !dbg !38
  %482 = insertelement <4 x float> poison, float %279, i64 0, !dbg !38
  %483 = shufflevector <4 x float> %482, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %484 = insertelement <4 x float> poison, float %343, i64 0, !dbg !38
  %485 = insertelement <4 x float> %484, float %344, i64 1, !dbg !38
  %486 = insertelement <4 x float> %485, float %345, i64 2, !dbg !38
  %487 = insertelement <4 x float> %486, float %346, i64 3, !dbg !38
  %488 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %483, <4 x float> %487, <4 x float> %481), !dbg !38
  %489 = insertelement <4 x float> poison, float %283, i64 0, !dbg !38
  %490 = shufflevector <4 x float> %489, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %491 = insertelement <4 x float> poison, float %347, i64 0, !dbg !38
  %492 = insertelement <4 x float> %491, float %348, i64 1, !dbg !38
  %493 = insertelement <4 x float> %492, float %349, i64 2, !dbg !38
  %494 = insertelement <4 x float> %493, float %350, i64 3, !dbg !38
  %495 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %490, <4 x float> %494, <4 x float> %488), !dbg !38
  %496 = insertelement <4 x float> poison, float %287, i64 0, !dbg !38
  %497 = shufflevector <4 x float> %496, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %498 = insertelement <4 x float> poison, float %351, i64 0, !dbg !38
  %499 = insertelement <4 x float> %498, float %352, i64 1, !dbg !38
  %500 = insertelement <4 x float> %499, float %353, i64 2, !dbg !38
  %501 = insertelement <4 x float> %500, float %354, i64 3, !dbg !38
  %502 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %497, <4 x float> %501, <4 x float> %495), !dbg !38
  %503 = insertelement <4 x float> poison, float %291, i64 0, !dbg !38
  %504 = shufflevector <4 x float> %503, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %505 = insertelement <4 x float> poison, float %355, i64 0, !dbg !38
  %506 = insertelement <4 x float> %505, float %356, i64 1, !dbg !38
  %507 = insertelement <4 x float> %506, float %357, i64 2, !dbg !38
  %508 = insertelement <4 x float> %507, float %358, i64 3, !dbg !38
  %509 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %504, <4 x float> %508, <4 x float> %502), !dbg !38
  %510 = insertelement <4 x float> poison, float %295, i64 0, !dbg !38
  %511 = shufflevector <4 x float> %510, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %512 = insertelement <4 x float> poison, float %359, i64 0, !dbg !38
  %513 = insertelement <4 x float> %512, float %360, i64 1, !dbg !38
  %514 = insertelement <4 x float> %513, float %361, i64 2, !dbg !38
  %515 = insertelement <4 x float> %514, float %362, i64 3, !dbg !38
  %516 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %511, <4 x float> %515, <4 x float> %509), !dbg !38
  %517 = insertelement <4 x float> poison, float %260, i64 0, !dbg !38
  %518 = shufflevector <4 x float> %517, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %519 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %518, <4 x float> %452, <4 x float> %416), !dbg !38
  %520 = insertelement <4 x float> poison, float %264, i64 0, !dbg !38
  %521 = shufflevector <4 x float> %520, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %522 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %521, <4 x float> %459, <4 x float> %519), !dbg !38
  %523 = insertelement <4 x float> poison, float %268, i64 0, !dbg !38
  %524 = shufflevector <4 x float> %523, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %525 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %524, <4 x float> %466, <4 x float> %522), !dbg !38
  %526 = insertelement <4 x float> poison, float %272, i64 0, !dbg !38
  %527 = shufflevector <4 x float> %526, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %528 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %527, <4 x float> %473, <4 x float> %525), !dbg !38
  %529 = insertelement <4 x float> poison, float %276, i64 0, !dbg !38
  %530 = shufflevector <4 x float> %529, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %531 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %530, <4 x float> %480, <4 x float> %528), !dbg !38
  %532 = insertelement <4 x float> poison, float %280, i64 0, !dbg !38
  %533 = shufflevector <4 x float> %532, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %534 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %533, <4 x float> %487, <4 x float> %531), !dbg !38
  %535 = insertelement <4 x float> poison, float %284, i64 0, !dbg !38
  %536 = shufflevector <4 x float> %535, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %537 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %536, <4 x float> %494, <4 x float> %534), !dbg !38
  %538 = insertelement <4 x float> poison, float %288, i64 0, !dbg !38
  %539 = shufflevector <4 x float> %538, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %540 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %539, <4 x float> %501, <4 x float> %537), !dbg !38
  %541 = insertelement <4 x float> poison, float %292, i64 0, !dbg !38
  %542 = shufflevector <4 x float> %541, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %543 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %542, <4 x float> %508, <4 x float> %540), !dbg !38
  %544 = insertelement <4 x float> poison, float %296, i64 0, !dbg !38
  %545 = shufflevector <4 x float> %544, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %546 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %545, <4 x float> %515, <4 x float> %543), !dbg !38
  %547 = insertelement <4 x float> poison, float %261, i64 0, !dbg !38
  %548 = shufflevector <4 x float> %547, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %549 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %548, <4 x float> %452, <4 x float> %431), !dbg !38
  %550 = insertelement <4 x float> poison, float %265, i64 0, !dbg !38
  %551 = shufflevector <4 x float> %550, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %552 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %551, <4 x float> %459, <4 x float> %549), !dbg !38
  %553 = insertelement <4 x float> poison, float %269, i64 0, !dbg !38
  %554 = shufflevector <4 x float> %553, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %555 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %554, <4 x float> %466, <4 x float> %552), !dbg !38
  %556 = insertelement <4 x float> poison, float %273, i64 0, !dbg !38
  %557 = shufflevector <4 x float> %556, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %558 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %557, <4 x float> %473, <4 x float> %555), !dbg !38
  %559 = insertelement <4 x float> poison, float %277, i64 0, !dbg !38
  %560 = shufflevector <4 x float> %559, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %561 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %560, <4 x float> %480, <4 x float> %558), !dbg !38
  %562 = insertelement <4 x float> poison, float %281, i64 0, !dbg !38
  %563 = shufflevector <4 x float> %562, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %564 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %563, <4 x float> %487, <4 x float> %561), !dbg !38
  %565 = insertelement <4 x float> poison, float %285, i64 0, !dbg !38
  %566 = shufflevector <4 x float> %565, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %567 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %566, <4 x float> %494, <4 x float> %564), !dbg !38
  %568 = insertelement <4 x float> poison, float %289, i64 0, !dbg !38
  %569 = shufflevector <4 x float> %568, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %570 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %569, <4 x float> %501, <4 x float> %567), !dbg !38
  %571 = insertelement <4 x float> poison, float %293, i64 0, !dbg !38
  %572 = shufflevector <4 x float> %571, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %573 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %572, <4 x float> %508, <4 x float> %570), !dbg !38
  %574 = insertelement <4 x float> poison, float %297, i64 0, !dbg !38
  %575 = shufflevector <4 x float> %574, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %576 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %575, <4 x float> %515, <4 x float> %573), !dbg !38
  %577 = insertelement <4 x float> poison, float %262, i64 0, !dbg !38
  %578 = shufflevector <4 x float> %577, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %579 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %578, <4 x float> %452, <4 x float> %446), !dbg !38
  %580 = insertelement <4 x float> poison, float %266, i64 0, !dbg !38
  %581 = shufflevector <4 x float> %580, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %582 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %581, <4 x float> %459, <4 x float> %579), !dbg !38
  %583 = insertelement <4 x float> poison, float %270, i64 0, !dbg !38
  %584 = shufflevector <4 x float> %583, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %585 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %584, <4 x float> %466, <4 x float> %582), !dbg !38
  %586 = insertelement <4 x float> poison, float %274, i64 0, !dbg !38
  %587 = shufflevector <4 x float> %586, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %588 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %587, <4 x float> %473, <4 x float> %585), !dbg !38
  %589 = insertelement <4 x float> poison, float %278, i64 0, !dbg !38
  %590 = shufflevector <4 x float> %589, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %591 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %590, <4 x float> %480, <4 x float> %588), !dbg !38
  %592 = insertelement <4 x float> poison, float %282, i64 0, !dbg !38
  %593 = shufflevector <4 x float> %592, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %594 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %593, <4 x float> %487, <4 x float> %591), !dbg !38
  %595 = insertelement <4 x float> poison, float %286, i64 0, !dbg !38
  %596 = shufflevector <4 x float> %595, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %597 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %596, <4 x float> %494, <4 x float> %594), !dbg !38
  %598 = insertelement <4 x float> poison, float %290, i64 0, !dbg !38
  %599 = shufflevector <4 x float> %598, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %600 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %599, <4 x float> %501, <4 x float> %597), !dbg !38
  %601 = insertelement <4 x float> poison, float %294, i64 0, !dbg !38
  %602 = shufflevector <4 x float> %601, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %603 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %602, <4 x float> %508, <4 x float> %600), !dbg !38
  %604 = insertelement <4 x float> poison, float %298, i64 0, !dbg !38
  %605 = shufflevector <4 x float> %604, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %606 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %605, <4 x float> %515, <4 x float> %603), !dbg !38
  %607 = insertelement <4 x float> poison, float %299, i64 0, !dbg !38
  %608 = shufflevector <4 x float> %607, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %609 = insertelement <4 x float> poison, float %363, i64 0, !dbg !38
  %610 = insertelement <4 x float> %609, float %364, i64 1, !dbg !38
  %611 = insertelement <4 x float> %610, float %365, i64 2, !dbg !38
  %612 = insertelement <4 x float> %611, float %366, i64 3, !dbg !38
  %613 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %608, <4 x float> %612, <4 x float> %516), !dbg !38
  %614 = insertelement <4 x float> poison, float %300, i64 0, !dbg !38
  %615 = shufflevector <4 x float> %614, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %616 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %615, <4 x float> %612, <4 x float> %546), !dbg !38
  %617 = insertelement <4 x float> poison, float %301, i64 0, !dbg !38
  %618 = shufflevector <4 x float> %617, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %619 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %618, <4 x float> %612, <4 x float> %576), !dbg !38
  %620 = insertelement <4 x float> poison, float %302, i64 0, !dbg !38
  %621 = shufflevector <4 x float> %620, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %622 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %621, <4 x float> %612, <4 x float> %606), !dbg !38
  %623 = getelementptr i8, ptr addrspace(1) %.pn1664, i64 64, !dbg !39
  %624 = getelementptr i8, ptr addrspace(1) %.pn865, i64 64, !dbg !39
  %625 = getelementptr i8, ptr addrspace(1) %.pn3266, i64 64, !dbg !40
  %626 = getelementptr i8, ptr addrspace(1) %.pn2467, i64 64, !dbg !40
  %627 = add nuw nsw i32 %198, 16, !dbg !35
  %628 = icmp ult i32 %198, 1856, !dbg !35
  br i1 %628, label %197, label %629, !dbg !35

629:                                              ; preds = %197
  %630 = and i32 %25, 28, !dbg !23
  %631 = or disjoint i32 %29, 8, !dbg !24
  %632 = or disjoint i32 %29, 16, !dbg !24
  %633 = or disjoint i32 %29, 24, !dbg !24
  %634 = or disjoint i32 %630, %30, !dbg !26
  %635 = icmp slt i32 %29, %3, !dbg !41
  %636 = icmp slt i32 %631, %3, !dbg !41
  %637 = icmp slt i32 %632, %3, !dbg !41
  %638 = icmp slt i32 %633, %3, !dbg !41
  %639 = icmp slt i32 %634, 512, !dbg !42
  %640 = and i1 %639, %635, !dbg !43
  %641 = and i1 %636, %639, !dbg !43
  %642 = and i1 %637, %639, !dbg !43
  %643 = and i1 %638, %639, !dbg !43
  %644 = shl i32 %29, 9, !dbg !44
  %645 = shl i32 %631, 9, !dbg !44
  %646 = shl i32 %632, 9, !dbg !44
  %647 = shl i32 %633, 9, !dbg !44
  %648 = add i32 %644, %634, !dbg !45
  %649 = add i32 %634, %645, !dbg !45
  %650 = add i32 %634, %646, !dbg !45
  %651 = add i32 %634, %647, !dbg !45
  %652 = sext i32 %648 to i64, !dbg !46
  %653 = getelementptr float, ptr addrspace(1) %2, i64 %652, !dbg !46
  %654 = sext i32 %649 to i64, !dbg !46
  %655 = getelementptr float, ptr addrspace(1) %2, i64 %654, !dbg !46
  %656 = sext i32 %650 to i64, !dbg !46
  %657 = getelementptr float, ptr addrspace(1) %2, i64 %656, !dbg !46
  %658 = sext i32 %651 to i64, !dbg !46
  %659 = getelementptr float, ptr addrspace(1) %2, i64 %658, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %660 = and i32 %23, 7, !dbg !47
  %661 = and i32 %25, 28, !dbg !47
  %662 = mul nuw nsw i32 %660, 144, !dbg !47
  %663 = add nuw nsw i32 %662, %661, !dbg !47
  %664 = zext nneg i32 %663 to i64, !dbg !47
  %665 = getelementptr float, ptr addrspace(3) @global_smem, i64 %664, !dbg !47
  store <4 x float> %613, ptr addrspace(3) %665, align 16, !dbg !47
  %666 = getelementptr i8, ptr addrspace(3) %665, i64 144, !dbg !47
  store <4 x float> %616, ptr addrspace(3) %666, align 16, !dbg !47
  %667 = getelementptr i8, ptr addrspace(3) %665, i64 288, !dbg !47
  store <4 x float> %619, ptr addrspace(3) %667, align 16, !dbg !47
  %668 = getelementptr i8, ptr addrspace(3) %665, i64 432, !dbg !47
  store <4 x float> %622, ptr addrspace(3) %668, align 16, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %669 = mul nuw nsw i32 %660, 36, !dbg !47
  %670 = add nuw nsw i32 %669, %661, !dbg !47
  %671 = zext nneg i32 %670 to i64, !dbg !47
  %672 = getelementptr float, ptr addrspace(3) @global_smem, i64 %671, !dbg !47
  %673 = getelementptr i8, ptr addrspace(3) %672, i64 1152, !dbg !47
  %674 = load <4 x i32>, ptr addrspace(3) %673, align 16, !dbg !47
  %675 = getelementptr i8, ptr addrspace(3) %672, i64 2304, !dbg !47
  %676 = load <4 x i32>, ptr addrspace(3) %675, align 16, !dbg !47
  %677 = getelementptr i8, ptr addrspace(3) %672, i64 3456, !dbg !47
  %678 = load <4 x i32>, ptr addrspace(3) %677, align 16, !dbg !47
  %.extract = load i32, ptr addrspace(3) %672, align 16, !dbg !47
  %679 = getelementptr inbounds i8, ptr addrspace(3) %672, i64 4, !dbg !47
  %.extract34 = load i32, ptr addrspace(3) %679, align 4, !dbg !47
  %680 = getelementptr inbounds i8, ptr addrspace(3) %672, i64 8, !dbg !47
  %.extract36 = load i32, ptr addrspace(3) %680, align 8, !dbg !47
  %681 = getelementptr inbounds i8, ptr addrspace(3) %672, i64 12, !dbg !47
  %.extract38 = load i32, ptr addrspace(3) %681, align 4, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract34, i32 %.extract36, i32 %.extract38, ptr addrspace(1) %653, i1 %640) #3, !dbg !47
  %.extract40 = extractelement <4 x i32> %674, i64 0, !dbg !47
  %.extract42 = extractelement <4 x i32> %674, i64 1, !dbg !47
  %.extract44 = extractelement <4 x i32> %674, i64 2, !dbg !47
  %.extract46 = extractelement <4 x i32> %674, i64 3, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract40, i32 %.extract42, i32 %.extract44, i32 %.extract46, ptr addrspace(1) %655, i1 %641) #3, !dbg !47
  %.extract48 = extractelement <4 x i32> %676, i64 0, !dbg !47
  %.extract50 = extractelement <4 x i32> %676, i64 1, !dbg !47
  %.extract52 = extractelement <4 x i32> %676, i64 2, !dbg !47
  %.extract54 = extractelement <4 x i32> %676, i64 3, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract48, i32 %.extract50, i32 %.extract52, i32 %.extract54, ptr addrspace(1) %657, i1 %642) #3, !dbg !47
  %.extract56 = extractelement <4 x i32> %678, i64 0, !dbg !47
  %.extract58 = extractelement <4 x i32> %678, i64 1, !dbg !47
  %.extract60 = extractelement <4 x i32> %678, i64 2, !dbg !47
  %.extract62 = extractelement <4 x i32> %678, i64 3, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract56, i32 %.extract58, i32 %.extract60, i32 %.extract62, ptr addrspace(1) %659, i1 %643) #3, !dbg !47
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x float> @llvm.fmuladd.v4f32(<4 x float>, <4 x float>, <4 x float>) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccftfqirv2f6oitlke3ehd3oxzpwqewy3qbsvkjf32olm4ipllbv.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu_torch260/cf")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 33, column: 16, scope: !7)
!11 = !DILocation(line: 0, scope: !7)
!12 = !DILocation(line: 42, column: 24, scope: !7)
!13 = !DILocation(line: 43, column: 28, scope: !7)
!14 = !DILocation(line: 43, column: 34, scope: !7)
!15 = !DILocation(line: 48, column: 22, scope: !7)
!16 = !DILocation(line: 49, column: 41, scope: !7)
!17 = !DILocation(line: 49, column: 30, scope: !7)
!18 = !DILocation(line: 49, column: 50, scope: !7)
!19 = !DILocation(line: 50, column: 40, scope: !7)
!20 = !DILocation(line: 50, column: 34, scope: !7)
!21 = !DILocation(line: 51, column: 30, scope: !7)
!22 = !DILocation(line: 53, column: 17, scope: !7)
!23 = !DILocation(line: 53, column: 40, scope: !7)
!24 = !DILocation(line: 53, column: 27, scope: !7)
!25 = !DILocation(line: 54, column: 17, scope: !7)
!26 = !DILocation(line: 54, column: 27, scope: !7)
!27 = !DILocation(line: 56, column: 52, scope: !7)
!28 = !DILocation(line: 60, column: 52, scope: !7)
!29 = !DILocation(line: 64, column: 28, scope: !7)
!30 = !DILocation(line: 64, column: 40, scope: !7)
!31 = !DILocation(line: 64, column: 13, scope: !7)
!32 = !DILocation(line: 65, column: 54, scope: !7)
!33 = !DILocation(line: 65, column: 39, scope: !7)
!34 = !DILocation(line: 65, column: 13, scope: !7)
!35 = !DILocation(line: 68, column: 25, scope: !7)
!36 = !DILocation(line: 70, column: 24, scope: !7)
!37 = !DILocation(line: 71, column: 24, scope: !7)
!38 = !DILocation(line: 77, column: 25, scope: !7)
!39 = !DILocation(line: 78, column: 13, scope: !7)
!40 = !DILocation(line: 79, column: 13, scope: !7)
!41 = !DILocation(line: 86, column: 20, scope: !7)
!42 = !DILocation(line: 86, column: 34, scope: !7)
!43 = !DILocation(line: 86, column: 26, scope: !7)
!44 = !DILocation(line: 89, column: 26, scope: !7)
!45 = !DILocation(line: 89, column: 22, scope: !7)
!46 = !DILocation(line: 90, column: 25, scope: !7)
!47 = !DILocation(line: 90, column: 67, scope: !7)

; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = icmp slt i32 %5, %2, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 31, !dbg !12
  %9 = lshr i32 %7, 5, !dbg !12
  %10 = and i32 %7, 63, !dbg !12
  %11 = icmp ult i32 %10, 50, !dbg !13
  %12 = mul i32 %5, 50, !dbg !14
  %13 = add i32 %12, %10, !dbg !15
  %14 = sext i32 %13 to i64, !dbg !16
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !16
  %16 = and i1 %11, %6, !dbg !17
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %15, i1 %16, i32 0, i1 %16) #3, !dbg !18
  %18 = bitcast i32 %17 to float, !dbg !18
  %19 = select i1 %16, float %18, float 0xFFF0000000000000, !dbg !19
  %20 = bitcast float %19 to i32, !dbg !20
  %21 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %20, i32 16, i32 31), !dbg !20
  %22 = bitcast i32 %21 to float, !dbg !20
  %23 = fcmp ogt float %19, %22, !dbg !24
  %24 = fcmp uno float %19, 0.000000e+00, !dbg !26
  %25 = or i1 %23, %24, !dbg !27
  %26 = select i1 %25, float %19, float %22, !dbg !28
  %27 = bitcast float %26 to i32, !dbg !20
  %28 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %27, i32 8, i32 31), !dbg !20
  %29 = bitcast i32 %28 to float, !dbg !20
  %30 = fcmp ogt float %26, %29, !dbg !24
  %31 = fcmp uno float %26, 0.000000e+00, !dbg !26
  %32 = or i1 %30, %31, !dbg !27
  %33 = select i1 %32, float %26, float %29, !dbg !28
  %34 = bitcast float %33 to i32, !dbg !20
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 4, i32 31), !dbg !20
  %36 = bitcast i32 %35 to float, !dbg !20
  %37 = fcmp ogt float %33, %36, !dbg !24
  %38 = fcmp uno float %33, 0.000000e+00, !dbg !26
  %39 = or i1 %37, %38, !dbg !27
  %40 = select i1 %39, float %33, float %36, !dbg !28
  %41 = bitcast float %40 to i32, !dbg !20
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 2, i32 31), !dbg !20
  %43 = bitcast i32 %42 to float, !dbg !20
  %44 = fcmp ogt float %40, %43, !dbg !24
  %45 = fcmp uno float %40, 0.000000e+00, !dbg !26
  %46 = or i1 %44, %45, !dbg !27
  %47 = select i1 %46, float %40, float %43, !dbg !28
  %48 = bitcast float %47 to i32, !dbg !20
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 1, i32 31), !dbg !20
  %50 = bitcast i32 %49 to float, !dbg !20
  %51 = fcmp ogt float %47, %50, !dbg !24
  %52 = fcmp uno float %47, 0.000000e+00, !dbg !26
  %53 = or i1 %51, %52, !dbg !27
  %54 = select i1 %53, float %47, float %50, !dbg !28
  %55 = icmp eq i32 %8, 0, !dbg !20
  %56 = and i32 %9, 1, !dbg !20
  %57 = zext nneg i32 %56 to i64, !dbg !20
  %58 = getelementptr float, ptr addrspace(3) @global_smem, i64 %57, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, float %54, i1 %55) #3, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %59 = icmp slt i32 %7, 2, !dbg !20
  %60 = sext i32 %7 to i64, !dbg !20
  %61 = getelementptr float, ptr addrspace(3) @global_smem, i64 %60, !dbg !20
  %62 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %61, i1 %59) #3, !dbg !20
  %63 = bitcast float %62 to i32, !dbg !20
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 1, i32 31), !dbg !20
  %65 = bitcast i32 %64 to float, !dbg !20
  %66 = fcmp ogt float %62, %65, !dbg !24
  %67 = fcmp uno float %62, 0.000000e+00, !dbg !26
  %68 = or i1 %67, %66, !dbg !27
  %69 = select i1 %68, float %62, float %65, !dbg !28
  %70 = and i32 %7, 1, !dbg !20
  %71 = icmp eq i32 %70, 0, !dbg !20
  %72 = and i1 %59, %71, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, float %69, i1 %72) #3, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %73 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !20
  %74 = fsub float %18, %73, !dbg !29
  %75 = fmul float %74, 2.500000e-01, !dbg !30
  %76 = fmul float %75, 0x3FF7154760000000, !dbg !31
  %77 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %76) #3, !dbg !31
  %78 = select i1 %16, float %77, float 0.000000e+00, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %79 = bitcast float %78 to i32, !dbg !33
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 16, i32 31), !dbg !33
  %81 = bitcast i32 %80 to float, !dbg !33
  %82 = fadd float %78, %81, !dbg !37
  %83 = bitcast float %82 to i32, !dbg !33
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 8, i32 31), !dbg !33
  %85 = bitcast i32 %84 to float, !dbg !33
  %86 = fadd float %82, %85, !dbg !37
  %87 = bitcast float %86 to i32, !dbg !33
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 4, i32 31), !dbg !33
  %89 = bitcast i32 %88 to float, !dbg !33
  %90 = fadd float %86, %89, !dbg !37
  %91 = bitcast float %90 to i32, !dbg !33
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 2, i32 31), !dbg !33
  %93 = bitcast i32 %92 to float, !dbg !33
  %94 = fadd float %90, %93, !dbg !37
  %95 = bitcast float %94 to i32, !dbg !33
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 1, i32 31), !dbg !33
  %97 = bitcast i32 %96 to float, !dbg !33
  %98 = fadd float %94, %97, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, float %98, i1 %55) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %99 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %61, i1 %59) #3, !dbg !33
  %100 = bitcast float %99 to i32, !dbg !33
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 1, i32 31), !dbg !33
  %102 = bitcast i32 %101 to float, !dbg !33
  %103 = fadd float %99, %102, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, float %103, i1 %72) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %104 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !33
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %77, float %104) #3, !dbg !39
  %106 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !40
  %107 = bitcast float %105 to i32, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %106, i1 %16) #3, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cji6genlqlzfsvy7mazgz5dxtagx7gskl2ny2a5wxmn3a4b7nbin.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu_torch260/ji")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 21, scope: !7)
!12 = !DILocation(line: 24, column: 34, scope: !7)
!13 = !DILocation(line: 26, column: 21, scope: !7)
!14 = !DILocation(line: 29, column: 39, scope: !7)
!15 = !DILocation(line: 29, column: 36, scope: !7)
!16 = !DILocation(line: 29, column: 30, scope: !7)
!17 = !DILocation(line: 29, column: 53, scope: !7)
!18 = !DILocation(line: 29, column: 45, scope: !7)
!19 = !DILocation(line: 33, column: 41, scope: !7)
!20 = !DILocation(line: 95, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/home/admin/zy429782/miniforge3/envs/torch_preview_0924/lib/python3.10/site-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 34, column: 37, scope: !7)
!24 = !DILocation(line: 82, column: 15, scope: !25, inlinedAt: !23)
!25 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!26 = !DILocation(line: 84, column: 21, scope: !25, inlinedAt: !23)
!27 = !DILocation(line: 84, column: 16, scope: !25, inlinedAt: !23)
!28 = !DILocation(line: 85, column: 29, scope: !25, inlinedAt: !23)
!29 = !DILocation(line: 35, column: 18, scope: !7)
!30 = !DILocation(line: 37, column: 18, scope: !7)
!31 = !DILocation(line: 38, column: 24, scope: !7)
!32 = !DILocation(line: 40, column: 43, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "standard.py", directory: "/home/admin/zy429782/miniforge3/envs/torch_preview_0924/lib/python3.10/site-packages/triton/language")
!36 = !DILocation(line: 41, column: 26, scope: !7)
!37 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !36)
!38 = distinct !DILexicalBlockFile(scope: !34, file: !35, discriminator: 0)
!39 = !DILocation(line: 42, column: 20, scope: !7)
!40 = !DILocation(line: 43, column: 25, scope: !7)
!41 = !DILocation(line: 43, column: 47, scope: !7)
!42 = !DILocation(line: 43, column: 4, scope: !7)

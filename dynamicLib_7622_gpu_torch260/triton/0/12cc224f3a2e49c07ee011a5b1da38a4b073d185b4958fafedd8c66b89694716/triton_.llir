; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = or disjoint i32 %7, %9, !dbg !13
  %11 = icmp slt i32 %10, %3, !dbg !14
  %12 = lshr i32 %8, 5, !dbg !15
  %13 = and i32 %12, 7, !dbg !15
  %14 = or disjoint i32 %13, 8, !dbg !15
  %15 = or disjoint i32 %13, 48, !dbg !15
  %16 = icmp ult i32 %15, 50, !dbg !16
  %17 = sext i32 %10 to i64, !dbg !17
  %18 = getelementptr double, ptr addrspace(1) %0, i64 %17, !dbg !17
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %11) #3, !dbg !18
  %20 = bitcast i64 %19 to double, !dbg !18
  %21 = fcmp olt double %20, 5.000000e+01, !dbg !19
  %22 = fcmp uno double %20, 0.000000e+00, !dbg !23
  %23 = or i1 %21, %22, !dbg !24
  %24 = select i1 %23, double %20, double 5.000000e+01, !dbg !25
  %25 = uitofp nneg i32 %13 to double
  %26 = uitofp nneg i32 %14 to double
  %27 = uitofp nneg i32 %15 to double
  %28 = fcmp ogt double %24, %25, !dbg !26
  %29 = fcmp ogt double %24, %26, !dbg !26
  %30 = insertelement <4 x i32> poison, i32 %13, i64 0, !dbg !15
  %31 = shufflevector <4 x i32> %30, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !15
  %32 = or disjoint <4 x i32> %31, <i32 40, i32 32, i32 24, i32 16>, !dbg !15
  %33 = uitofp nneg <4 x i32> %32 to <4 x double>
  %34 = insertelement <4 x double> poison, double %24, i64 0, !dbg !26
  %35 = shufflevector <4 x double> %34, <4 x double> poison, <4 x i32> zeroinitializer, !dbg !26
  %36 = fcmp ogt <4 x double> %35, %33, !dbg !26
  %37 = fcmp ogt double %24, %27, !dbg !26
  %38 = uitofp i1 %28 to float, !dbg !27
  %39 = uitofp i1 %29 to float, !dbg !27
  %40 = extractelement <4 x i1> %36, i64 3, !dbg !28
  %41 = uitofp i1 %40 to float, !dbg !27
  %42 = extractelement <4 x i1> %36, i64 2, !dbg !28
  %43 = uitofp i1 %42 to float, !dbg !27
  %44 = extractelement <4 x i1> %36, i64 1, !dbg !28
  %45 = uitofp i1 %44 to float, !dbg !27
  %46 = extractelement <4 x i1> %36, i64 0, !dbg !28
  %47 = uitofp i1 %46 to float, !dbg !27
  %48 = uitofp i1 %37 to float, !dbg !27
  %49 = and i1 %16, %11, !dbg !29
  %50 = select i1 %49, float %48, float 0.000000e+00, !dbg !30
  %51 = fadd float %38, %39, !dbg !31
  %52 = fadd float %51, %41, !dbg !31
  %53 = fadd float %52, %43, !dbg !31
  %54 = fadd float %53, %45, !dbg !31
  %55 = fadd float %54, %47, !dbg !31
  %56 = select i1 %11, float %55, float 0.000000e+00, !dbg !31
  %57 = fadd float %50, %56, !dbg !31
  %58 = shl nuw nsw i32 %9, 3, !dbg !36
  %59 = or disjoint i32 %58, %13, !dbg !36
  %60 = zext nneg i32 %59 to i64, !dbg !36
  %61 = getelementptr float, ptr addrspace(3) @global_smem, i64 %60, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, float %57, i1 true) #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %62 = icmp slt i32 %8, 256, !dbg !36
  %63 = sext i32 %8 to i64, !dbg !36
  %64 = getelementptr float, ptr addrspace(3) @global_smem, i64 %63, !dbg !36
  %65 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %64, i1 %62) #3, !dbg !36
  %66 = bitcast float %65 to i32, !dbg !36
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 4, i32 31), !dbg !36
  %68 = bitcast i32 %67 to float, !dbg !36
  %69 = fadd float %65, %68, !dbg !31
  %70 = bitcast float %69 to i32, !dbg !36
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 2, i32 31), !dbg !36
  %72 = bitcast i32 %71 to float, !dbg !36
  %73 = fadd float %69, %72, !dbg !31
  %74 = bitcast float %73 to i32, !dbg !36
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 1, i32 31), !dbg !36
  %76 = bitcast i32 %75 to float, !dbg !36
  %77 = fadd float %73, %76, !dbg !31
  %78 = and i32 %8, 7, !dbg !36
  %79 = icmp eq i32 %78, 0, !dbg !36
  %80 = and i1 %62, %79, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, float %77, i1 %80) #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %81 = zext nneg i32 %58 to i64, !dbg !36
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i64 %81, !dbg !36
  %83 = load float, ptr addrspace(3) %82, align 16, !dbg !36
  %84 = fcmp oeq float %83, 0.000000e+00, !dbg !37
  %85 = or i1 %28, %84, !dbg !28
  %86 = or i1 %29, %84, !dbg !28
  %87 = or i1 %40, %84, !dbg !28
  %88 = or i1 %42, %84, !dbg !28
  %89 = or i1 %44, %84, !dbg !28
  %90 = or i1 %46, %84, !dbg !28
  %91 = or i1 %37, %84, !dbg !28
  %92 = uitofp i1 %85 to float, !dbg !38
  %93 = uitofp i1 %86 to float, !dbg !38
  %94 = uitofp i1 %87 to float, !dbg !38
  %95 = uitofp i1 %88 to float, !dbg !38
  %96 = uitofp i1 %89 to float, !dbg !38
  %97 = uitofp i1 %90 to float, !dbg !38
  %98 = uitofp i1 %91 to float, !dbg !38
  %99 = select i1 %49, float %98, float 0.000000e+00, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %100 = fadd float %92, %93, !dbg !42
  %101 = fadd float %100, %94, !dbg !42
  %102 = fadd float %101, %95, !dbg !42
  %103 = fadd float %102, %96, !dbg !42
  %104 = fadd float %103, %97, !dbg !42
  %105 = select i1 %11, float %104, float 0.000000e+00, !dbg !42
  %106 = fadd float %99, %105, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, float %106, i1 true) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %107 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %64, i1 %62) #3, !dbg !40
  %108 = bitcast float %107 to i32, !dbg !40
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 4, i32 31), !dbg !40
  %110 = bitcast i32 %109 to float, !dbg !40
  %111 = fadd float %107, %110, !dbg !42
  %112 = bitcast float %111 to i32, !dbg !40
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 2, i32 31), !dbg !40
  %114 = bitcast i32 %113 to float, !dbg !40
  %115 = fadd float %111, %114, !dbg !42
  %116 = bitcast float %115 to i32, !dbg !40
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 1, i32 31), !dbg !40
  %118 = bitcast i32 %117 to float, !dbg !40
  %119 = fadd float %115, %118, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, float %119, i1 %80) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %120 = load i32, ptr addrspace(3) %82, align 16, !dbg !40
  %121 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !43
  %122 = icmp eq i32 %13, 0, !dbg !44
  %123 = bitcast float %83 to i32, !dbg !44
  %124 = and i1 %122, %11, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %123, ptr addrspace(1) %121, i1 %124) #3, !dbg !44
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %120, ptr addrspace(1) %125, i1 %124) #3, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coyjxip4s6xvtcg2t65ph3jndq756xmifu6l3oxu7y5qyksgxmln.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu_torch260/oy")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 44, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 29, column: 30, scope: !7)
!18 = !DILocation(line: 29, column: 35, scope: !7)
!19 = !DILocation(line: 74, column: 15, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!21 = !DIFile(filename: "triton_helpers.py", directory: "/home/admin/zy429782/miniforge3/envs/torch_preview_0924/lib/python3.10/site-packages/torch/_inductor/runtime")
!22 = !DILocation(line: 31, column: 40, scope: !7)
!23 = !DILocation(line: 76, column: 21, scope: !20, inlinedAt: !22)
!24 = !DILocation(line: 76, column: 16, scope: !20, inlinedAt: !22)
!25 = !DILocation(line: 77, column: 29, scope: !20, inlinedAt: !22)
!26 = !DILocation(line: 34, column: 18, scope: !7)
!27 = !DILocation(line: 35, column: 19, scope: !7)
!28 = !DILocation(line: 41, column: 19, scope: !7)
!29 = !DILocation(line: 37, column: 28, scope: !7)
!30 = !DILocation(line: 37, column: 41, scope: !7)
!31 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !35)
!32 = distinct !DILexicalBlockFile(scope: !34, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/admin/zy429782/miniforge3/envs/torch_preview_0924/lib/python3.10/site-packages/triton/language")
!34 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!35 = !DILocation(line: 38, column: 25, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !34, inlinedAt: !35)
!37 = !DILocation(line: 40, column: 21, scope: !7)
!38 = !DILocation(line: 42, column: 21, scope: !7)
!39 = !DILocation(line: 44, column: 43, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !34, inlinedAt: !41)
!41 = !DILocation(line: 45, column: 26, scope: !7)
!42 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !41)
!43 = !DILocation(line: 46, column: 25, scope: !7)
!44 = !DILocation(line: 46, column: 37, scope: !7)
!45 = !DILocation(line: 47, column: 25, scope: !7)
!46 = !DILocation(line: 47, column: 37, scope: !7)
!47 = !DILocation(line: 47, column: 4, scope: !7)

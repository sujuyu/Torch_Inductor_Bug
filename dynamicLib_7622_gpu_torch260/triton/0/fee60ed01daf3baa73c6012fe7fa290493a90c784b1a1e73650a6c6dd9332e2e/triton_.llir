; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 512, !dbg !13
  %14 = icmp slt i32 %12, %5, !dbg !14
  %15 = icmp slt i32 %13, %5, !dbg !14
  %16 = srem i32 %12, 512, !dbg !15
  %17 = sext i32 %12 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = sext i32 %13 to i64, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !16
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 %14) #3, !dbg !17
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 %15) #3, !dbg !17
  %23 = sext i32 %16 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !18
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 %14) #3, !dbg !19
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 %15) #3, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !20
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 %14) #3, !dbg !21
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !21
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !21
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !21
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !21
  %33 = bitcast i32 %29 to float, !dbg !21
  %34 = bitcast i32 %30 to float, !dbg !21
  %35 = bitcast i32 %31 to float, !dbg !21
  %36 = bitcast i32 %32 to float, !dbg !21
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 %15) #3, !dbg !21
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !21
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !21
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !21
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !21
  %42 = bitcast i32 %38 to float, !dbg !21
  %43 = bitcast i32 %39 to float, !dbg !21
  %44 = bitcast i32 %40 to float, !dbg !21
  %45 = bitcast i32 %41 to float, !dbg !21
  %46 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !22
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %14) #3, !dbg !23
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %15) #3, !dbg !23
  %49 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !24
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %14) #3, !dbg !25
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %15) #3, !dbg !25
  %52 = fadd float %33, 0x3F50624DE0000000, !dbg !26
  %53 = fadd float %34, 0x3F50624DE0000000, !dbg !26
  %54 = fadd float %35, 0x3F50624DE0000000, !dbg !26
  %55 = fadd float %36, 0x3F50624DE0000000, !dbg !26
  %56 = fadd float %42, 0x3F50624DE0000000, !dbg !26
  %57 = fadd float %43, 0x3F50624DE0000000, !dbg !26
  %58 = fadd float %44, 0x3F50624DE0000000, !dbg !26
  %59 = fadd float %45, 0x3F50624DE0000000, !dbg !26
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i = icmp eq i32 %60, 0, !dbg !27
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i = icmp eq i32 %61, 0, !dbg !27
  br i1 %.not.i, label %67, label %62, !dbg !27

62:                                               ; preds = %6
  br i1 %.not1.i, label %65, label %63, !dbg !27

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

67:                                               ; preds = %6
  br i1 %.not1.i, label %70, label %68, !dbg !27

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

__nv_sqrtf.exit:                                  ; preds = %63, %65, %68, %70
  %.0.i = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !27
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i1 = icmp eq i32 %72, 0, !dbg !27
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i4 = icmp eq i32 %73, 0, !dbg !27
  br i1 %.not.i1, label %79, label %74, !dbg !27

74:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %77, label %75, !dbg !27

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

79:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %82, label %80, !dbg !27

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

__nv_sqrtf.exit5:                                 ; preds = %75, %77, %80, %82
  %.0.i3 = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !27
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i6 = icmp eq i32 %84, 0, !dbg !27
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i9 = icmp eq i32 %85, 0, !dbg !27
  br i1 %.not.i6, label %91, label %86, !dbg !27

86:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %89, label %87, !dbg !27

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

91:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %94, label %92, !dbg !27

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

__nv_sqrtf.exit10:                                ; preds = %87, %89, %92, %94
  %.0.i8 = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !27
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i11 = icmp eq i32 %96, 0, !dbg !27
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i14 = icmp eq i32 %97, 0, !dbg !27
  br i1 %.not.i11, label %103, label %98, !dbg !27

98:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %101, label %99, !dbg !27

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

103:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %106, label %104, !dbg !27

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

__nv_sqrtf.exit15:                                ; preds = %99, %101, %104, %106
  %.0.i13 = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !27
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i16 = icmp eq i32 %108, 0, !dbg !27
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i19 = icmp eq i32 %109, 0, !dbg !27
  br i1 %.not.i16, label %115, label %110, !dbg !27

110:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %113, label %111, !dbg !27

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #3, !dbg !27
  br label %__nv_sqrtf.exit20, !dbg !27

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #3, !dbg !27
  br label %__nv_sqrtf.exit20, !dbg !27

115:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %118, label %116, !dbg !27

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #3, !dbg !27
  br label %__nv_sqrtf.exit20, !dbg !27

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #3, !dbg !27
  br label %__nv_sqrtf.exit20, !dbg !27

__nv_sqrtf.exit20:                                ; preds = %111, %113, %116, %118
  %.0.i18 = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !27
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i21 = icmp eq i32 %120, 0, !dbg !27
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i24 = icmp eq i32 %121, 0, !dbg !27
  br i1 %.not.i21, label %127, label %122, !dbg !27

122:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %125, label %123, !dbg !27

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #3, !dbg !27
  br label %__nv_sqrtf.exit25, !dbg !27

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #3, !dbg !27
  br label %__nv_sqrtf.exit25, !dbg !27

127:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %130, label %128, !dbg !27

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #3, !dbg !27
  br label %__nv_sqrtf.exit25, !dbg !27

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #3, !dbg !27
  br label %__nv_sqrtf.exit25, !dbg !27

__nv_sqrtf.exit25:                                ; preds = %123, %125, %128, %130
  %.0.i23 = phi float [ %124, %123 ], [ %126, %125 ], [ %129, %128 ], [ %131, %130 ], !dbg !27
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i26 = icmp eq i32 %132, 0, !dbg !27
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i29 = icmp eq i32 %133, 0, !dbg !27
  br i1 %.not.i26, label %139, label %134, !dbg !27

134:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %137, label %135, !dbg !27

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #3, !dbg !27
  br label %__nv_sqrtf.exit30, !dbg !27

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #3, !dbg !27
  br label %__nv_sqrtf.exit30, !dbg !27

139:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %142, label %140, !dbg !27

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #3, !dbg !27
  br label %__nv_sqrtf.exit30, !dbg !27

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #3, !dbg !27
  br label %__nv_sqrtf.exit30, !dbg !27

__nv_sqrtf.exit30:                                ; preds = %135, %137, %140, %142
  %.0.i28 = phi float [ %136, %135 ], [ %138, %137 ], [ %141, %140 ], [ %143, %142 ], !dbg !27
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i31 = icmp eq i32 %144, 0, !dbg !27
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i34 = icmp eq i32 %145, 0, !dbg !27
  br i1 %.not.i31, label %151, label %146, !dbg !27

146:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %149, label %147, !dbg !27

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #3, !dbg !27
  br label %__nv_sqrtf.exit35, !dbg !27

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #3, !dbg !27
  br label %__nv_sqrtf.exit35, !dbg !27

151:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %154, label %152, !dbg !27

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #3, !dbg !27
  br label %__nv_sqrtf.exit35, !dbg !27

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #3, !dbg !27
  br label %__nv_sqrtf.exit35, !dbg !27

__nv_sqrtf.exit35:                                ; preds = %147, %149, %152, %154
  %.0.i33 = phi float [ %148, %147 ], [ %150, %149 ], [ %153, %152 ], [ %155, %154 ], !dbg !27
  %156 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !17
  %157 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !19
  %158 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !17
  %159 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !19
  %160 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !17
  %161 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !19
  %162 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !17
  %163 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !19
  %164 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !17
  %165 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !19
  %166 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !17
  %167 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !19
  %168 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !17
  %169 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !19
  %170 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !17
  %171 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !19
  %172 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !25
  %173 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !25
  %174 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !25
  %175 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !25
  %176 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !25
  %177 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !25
  %178 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !25
  %179 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !25
  %180 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !23
  %181 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !23
  %182 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !23
  %183 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !23
  %184 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !23
  %185 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !23
  %186 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !23
  %187 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !23
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !28
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !28
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !28
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !28
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !28
  %193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !28
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !28
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !28
  %196 = insertelement <8 x i32> poison, i32 %156, i64 0, !dbg !17
  %197 = insertelement <8 x i32> %196, i32 %158, i64 1, !dbg !17
  %198 = insertelement <8 x i32> %197, i32 %160, i64 2, !dbg !17
  %199 = insertelement <8 x i32> %198, i32 %162, i64 3, !dbg !17
  %200 = insertelement <8 x i32> %199, i32 %164, i64 4, !dbg !17
  %201 = insertelement <8 x i32> %200, i32 %166, i64 5, !dbg !17
  %202 = insertelement <8 x i32> %201, i32 %168, i64 6, !dbg !17
  %203 = insertelement <8 x i32> %202, i32 %170, i64 7, !dbg !17
  %204 = bitcast <8 x i32> %203 to <8 x float>, !dbg !17
  %205 = insertelement <8 x i32> poison, i32 %157, i64 0, !dbg !19
  %206 = insertelement <8 x i32> %205, i32 %159, i64 1, !dbg !19
  %207 = insertelement <8 x i32> %206, i32 %161, i64 2, !dbg !19
  %208 = insertelement <8 x i32> %207, i32 %163, i64 3, !dbg !19
  %209 = insertelement <8 x i32> %208, i32 %165, i64 4, !dbg !19
  %210 = insertelement <8 x i32> %209, i32 %167, i64 5, !dbg !19
  %211 = insertelement <8 x i32> %210, i32 %169, i64 6, !dbg !19
  %212 = insertelement <8 x i32> %211, i32 %171, i64 7, !dbg !19
  %213 = bitcast <8 x i32> %212 to <8 x float>, !dbg !19
  %214 = fsub <8 x float> %204, %213, !dbg !29
  %215 = insertelement <8 x i32> poison, i32 %172, i64 0, !dbg !25
  %216 = insertelement <8 x i32> %215, i32 %173, i64 1, !dbg !25
  %217 = insertelement <8 x i32> %216, i32 %174, i64 2, !dbg !25
  %218 = insertelement <8 x i32> %217, i32 %175, i64 3, !dbg !25
  %219 = insertelement <8 x i32> %218, i32 %176, i64 4, !dbg !25
  %220 = insertelement <8 x i32> %219, i32 %177, i64 5, !dbg !25
  %221 = insertelement <8 x i32> %220, i32 %178, i64 6, !dbg !25
  %222 = insertelement <8 x i32> %221, i32 %179, i64 7, !dbg !25
  %223 = bitcast <8 x i32> %222 to <8 x float>, !dbg !25
  %224 = insertelement <8 x i32> poison, i32 %180, i64 0, !dbg !23
  %225 = insertelement <8 x i32> %224, i32 %181, i64 1, !dbg !23
  %226 = insertelement <8 x i32> %225, i32 %182, i64 2, !dbg !23
  %227 = insertelement <8 x i32> %226, i32 %183, i64 3, !dbg !23
  %228 = insertelement <8 x i32> %227, i32 %184, i64 4, !dbg !23
  %229 = insertelement <8 x i32> %228, i32 %185, i64 5, !dbg !23
  %230 = insertelement <8 x i32> %229, i32 %186, i64 6, !dbg !23
  %231 = insertelement <8 x i32> %230, i32 %187, i64 7, !dbg !23
  %232 = bitcast <8 x i32> %231 to <8 x float>, !dbg !23
  %233 = insertelement <8 x float> poison, float %195, i64 0, !dbg !30
  %234 = insertelement <8 x float> %233, float %194, i64 1, !dbg !30
  %235 = insertelement <8 x float> %234, float %193, i64 2, !dbg !30
  %236 = insertelement <8 x float> %235, float %192, i64 3, !dbg !30
  %237 = insertelement <8 x float> %236, float %191, i64 4, !dbg !30
  %238 = insertelement <8 x float> %237, float %190, i64 5, !dbg !30
  %239 = insertelement <8 x float> %238, float %189, i64 6, !dbg !30
  %240 = insertelement <8 x float> %239, float %188, i64 7, !dbg !30
  %241 = fmul <8 x float> %214, %240, !dbg !30
  %242 = fmul <8 x float> %241, %232, !dbg !31
  %243 = fadd <8 x float> %242, %223, !dbg !32
  %244 = fcmp ogt <8 x float> %243, zeroinitializer, !dbg !33
  %245 = extractelement <8 x float> %243, i64 7, !dbg !34
  %246 = fmul float %245, 0x3F847AE140000000, !dbg !35
  %247 = extractelement <8 x float> %243, i64 6, !dbg !34
  %248 = fmul float %247, 0x3F847AE140000000, !dbg !35
  %249 = extractelement <8 x float> %243, i64 5, !dbg !34
  %250 = fmul float %249, 0x3F847AE140000000, !dbg !35
  %251 = extractelement <8 x float> %243, i64 4, !dbg !34
  %252 = fmul float %251, 0x3F847AE140000000, !dbg !35
  %253 = extractelement <8 x float> %243, i64 3, !dbg !34
  %254 = fmul float %253, 0x3F847AE140000000, !dbg !35
  %255 = extractelement <8 x float> %243, i64 2, !dbg !34
  %256 = fmul float %255, 0x3F847AE140000000, !dbg !35
  %257 = extractelement <8 x float> %243, i64 1, !dbg !34
  %258 = fmul float %257, 0x3F847AE140000000, !dbg !35
  %259 = extractelement <8 x float> %243, i64 0, !dbg !34
  %260 = fmul float %259, 0x3F847AE140000000, !dbg !35
  %261 = extractelement <8 x i1> %244, i64 7, !dbg !34
  %262 = select i1 %261, float %245, float %246, !dbg !34
  %263 = extractelement <8 x i1> %244, i64 6, !dbg !34
  %264 = select i1 %263, float %247, float %248, !dbg !34
  %265 = extractelement <8 x i1> %244, i64 5, !dbg !34
  %266 = select i1 %265, float %249, float %250, !dbg !34
  %267 = extractelement <8 x i1> %244, i64 4, !dbg !34
  %268 = select i1 %267, float %251, float %252, !dbg !34
  %269 = extractelement <8 x i1> %244, i64 3, !dbg !34
  %270 = select i1 %269, float %253, float %254, !dbg !34
  %271 = extractelement <8 x i1> %244, i64 2, !dbg !34
  %272 = select i1 %271, float %255, float %256, !dbg !34
  %273 = extractelement <8 x i1> %244, i64 1, !dbg !34
  %274 = select i1 %273, float %257, float %258, !dbg !34
  %275 = extractelement <8 x i1> %244, i64 0, !dbg !34
  %276 = select i1 %275, float %259, float %260, !dbg !34
  %277 = bitcast float %262 to i32, !dbg !36
  %278 = bitcast float %264 to i32, !dbg !36
  %279 = bitcast float %266 to i32, !dbg !36
  %280 = bitcast float %268 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %277, i32 %278, i32 %279, i32 %280, ptr addrspace(1) %18, i1 %14) #3, !dbg !36
  %281 = bitcast float %270 to i32, !dbg !36
  %282 = bitcast float %272 to i32, !dbg !36
  %283 = bitcast float %274 to i32, !dbg !36
  %284 = bitcast float %276 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %281, i32 %282, i32 %283, i32 %284, ptr addrspace(1) %20, i1 %15) #3, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7bpqehsga6xvg2pcslli4z6siemsg7idp33i3s3xqxmqs4jnpl6.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu_torch260/7b")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 19, column: 28, scope: !7)
!11 = !DILocation(line: 19, column: 33, scope: !7)
!12 = !DILocation(line: 20, column: 36, scope: !7)
!13 = !DILocation(line: 20, column: 23, scope: !7)
!14 = !DILocation(line: 21, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 18, scope: !7)
!16 = !DILocation(line: 24, column: 34, scope: !7)
!17 = !DILocation(line: 24, column: 39, scope: !7)
!18 = !DILocation(line: 25, column: 30, scope: !7)
!19 = !DILocation(line: 25, column: 35, scope: !7)
!20 = !DILocation(line: 26, column: 30, scope: !7)
!21 = !DILocation(line: 26, column: 35, scope: !7)
!22 = !DILocation(line: 27, column: 31, scope: !7)
!23 = !DILocation(line: 27, column: 36, scope: !7)
!24 = !DILocation(line: 28, column: 31, scope: !7)
!25 = !DILocation(line: 28, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 18, scope: !7)
!27 = !DILocation(line: 32, column: 26, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 29, column: 18, scope: !7)
!30 = !DILocation(line: 37, column: 19, scope: !7)
!31 = !DILocation(line: 38, column: 20, scope: !7)
!32 = !DILocation(line: 39, column: 20, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 44, column: 35, scope: !7)
!35 = !DILocation(line: 43, column: 20, scope: !7)
!36 = !DILocation(line: 45, column: 40, scope: !7)
!37 = !DILocation(line: 45, column: 4, scope: !7)

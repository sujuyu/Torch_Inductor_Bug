; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 1, !dbg !13
  %14 = or disjoint i32 %12, 2, !dbg !13
  %15 = or disjoint i32 %12, 3, !dbg !13
  %16 = or disjoint i32 %12, 512, !dbg !13
  %17 = or disjoint i32 %12, 513, !dbg !13
  %18 = or disjoint i32 %12, 514, !dbg !13
  %19 = or disjoint i32 %12, 515, !dbg !13
  %20 = icmp slt i32 %12, %5, !dbg !14
  %21 = icmp slt i32 %13, %5, !dbg !14
  %22 = icmp slt i32 %14, %5, !dbg !14
  %23 = icmp slt i32 %15, %5, !dbg !14
  %24 = icmp slt i32 %16, %5, !dbg !14
  %25 = icmp slt i32 %17, %5, !dbg !14
  %26 = icmp slt i32 %18, %5, !dbg !14
  %27 = icmp slt i32 %19, %5, !dbg !14
  %.frozen = freeze i32 %12
  %28 = sdiv i32 %.frozen, 568, !dbg !15
  %29 = mul i32 %28, 568
  %.decomposed = sub i32 %.frozen, %29
  %30 = srem i32 %13, 568, !dbg !16
  %31 = srem i32 %14, 568, !dbg !16
  %32 = srem i32 %15, 568, !dbg !16
  %.frozen24 = freeze i32 %16
  %33 = sdiv i32 %.frozen24, 568, !dbg !15
  %34 = mul i32 %33, 568
  %.decomposed25 = sub i32 %.frozen24, %34
  %35 = srem i32 %17, 568, !dbg !16
  %36 = srem i32 %18, 568, !dbg !16
  %37 = srem i32 %19, 568, !dbg !16
  %38 = icmp slt i32 %.decomposed, 204, !dbg !17
  %39 = icmp slt i32 %.decomposed25, 204, !dbg !17
  %40 = mul nsw i32 %28, 204, !dbg !18
  %41 = mul nsw i32 %33, 204, !dbg !18
  %42 = add nsw i32 %40, %.decomposed, !dbg !19
  %43 = add nsw i32 %40, %30, !dbg !19
  %44 = add nsw i32 %40, %31, !dbg !19
  %45 = add nsw i32 %40, %32, !dbg !19
  %46 = add nsw i32 %41, %.decomposed25, !dbg !19
  %47 = add nsw i32 %41, %35, !dbg !19
  %48 = add nsw i32 %41, %36, !dbg !19
  %49 = add nsw i32 %41, %37, !dbg !19
  %50 = sext i32 %42 to i64, !dbg !20
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !20
  %52 = sext i32 %43 to i64, !dbg !20
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !20
  %54 = sext i32 %44 to i64, !dbg !20
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !20
  %56 = sext i32 %45 to i64, !dbg !20
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !20
  %58 = sext i32 %46 to i64, !dbg !20
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !20
  %60 = sext i32 %47 to i64, !dbg !20
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !20
  %62 = sext i32 %48 to i64, !dbg !20
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !20
  %64 = sext i32 %49 to i64, !dbg !20
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !20
  %66 = and i1 %20, %38, !dbg !21
  %67 = and i1 %21, %38, !dbg !21
  %68 = and i1 %22, %38, !dbg !21
  %69 = and i1 %23, %38, !dbg !21
  %70 = and i1 %24, %39, !dbg !21
  %71 = and i1 %25, %39, !dbg !21
  %72 = and i1 %26, %39, !dbg !21
  %73 = and i1 %27, %39, !dbg !21
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %66, i32 0, i1 %66) #1, !dbg !22
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %67, i32 0, i1 %67) #1, !dbg !22
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %68, i32 0, i1 %68) #1, !dbg !22
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %69, i32 0, i1 %69) #1, !dbg !22
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %70, i32 0, i1 %70) #1, !dbg !22
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %71, i32 0, i1 %71) #1, !dbg !22
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %72, i32 0, i1 %72) #1, !dbg !22
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %73, i32 0, i1 %73) #1, !dbg !22
  %82 = add nsw i32 %.decomposed, -204, !dbg !23
  %83 = icmp ult i32 %82, 16, !dbg !23
  %84 = add nsw i32 %.decomposed25, -204, !dbg !23
  %85 = icmp ult i32 %84, 16, !dbg !23
  %86 = shl nsw i32 %28, 4, !dbg !24
  %87 = shl nsw i32 %33, 4, !dbg !24
  %88 = add nsw i32 %86, %82, !dbg !25
  %89 = add nsw i32 %86, -204, !dbg !26
  %90 = add nsw i32 %89, %30, !dbg !25
  %91 = add nsw i32 %89, %31, !dbg !25
  %92 = add nsw i32 %89, %32, !dbg !25
  %93 = add nsw i32 %87, %84, !dbg !25
  %94 = add nsw i32 %87, -204, !dbg !26
  %95 = add nsw i32 %94, %35, !dbg !25
  %96 = add nsw i32 %94, %36, !dbg !25
  %97 = add nsw i32 %94, %37, !dbg !25
  %98 = sext i32 %88 to i64, !dbg !27
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !27
  %100 = sext i32 %90 to i64, !dbg !27
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !27
  %102 = sext i32 %91 to i64, !dbg !27
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %102, !dbg !27
  %104 = sext i32 %92 to i64, !dbg !27
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !27
  %106 = sext i32 %93 to i64, !dbg !27
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !27
  %108 = sext i32 %95 to i64, !dbg !27
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !27
  %110 = sext i32 %96 to i64, !dbg !27
  %111 = getelementptr float, ptr addrspace(1) %1, i64 %110, !dbg !27
  %112 = sext i32 %97 to i64, !dbg !27
  %113 = getelementptr float, ptr addrspace(1) %1, i64 %112, !dbg !27
  %114 = and i1 %20, %83, !dbg !28
  %115 = and i1 %21, %83, !dbg !28
  %116 = and i1 %22, %83, !dbg !28
  %117 = and i1 %23, %83, !dbg !28
  %118 = and i1 %24, %85, !dbg !28
  %119 = and i1 %25, %85, !dbg !28
  %120 = and i1 %26, %85, !dbg !28
  %121 = and i1 %27, %85, !dbg !28
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %114, i32 0, i1 %114) #1, !dbg !29
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %115, i32 0, i1 %115) #1, !dbg !29
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %116, i32 0, i1 %116) #1, !dbg !29
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %117, i32 0, i1 %117) #1, !dbg !29
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %118, i32 0, i1 %118) #1, !dbg !29
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %119, i32 0, i1 %119) #1, !dbg !29
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %120, i32 0, i1 %120) #1, !dbg !29
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 %121, i32 0, i1 %121) #1, !dbg !29
  %130 = add nsw i32 %.decomposed, -220, !dbg !30
  %131 = icmp ult i32 %130, 176, !dbg !30
  %132 = add nsw i32 %.decomposed25, -220, !dbg !30
  %133 = icmp ult i32 %132, 176, !dbg !30
  %134 = mul i32 %28, 1872, !dbg !31
  %135 = mul i32 %33, 1872, !dbg !31
  %136 = add i32 %134, %130, !dbg !32
  %137 = add i32 %134, -220, !dbg !33
  %138 = add i32 %137, %30, !dbg !32
  %139 = add i32 %137, %31, !dbg !32
  %140 = add i32 %137, %32, !dbg !32
  %141 = add i32 %135, %132, !dbg !32
  %142 = add i32 %135, -220, !dbg !33
  %143 = add i32 %142, %35, !dbg !32
  %144 = add i32 %142, %36, !dbg !32
  %145 = add i32 %142, %37, !dbg !32
  %146 = sext i32 %136 to i64, !dbg !34
  %147 = getelementptr float, ptr addrspace(1) %2, i64 %146, !dbg !34
  %148 = sext i32 %138 to i64, !dbg !34
  %149 = getelementptr float, ptr addrspace(1) %2, i64 %148, !dbg !34
  %150 = sext i32 %139 to i64, !dbg !34
  %151 = getelementptr float, ptr addrspace(1) %2, i64 %150, !dbg !34
  %152 = sext i32 %140 to i64, !dbg !34
  %153 = getelementptr float, ptr addrspace(1) %2, i64 %152, !dbg !34
  %154 = sext i32 %141 to i64, !dbg !34
  %155 = getelementptr float, ptr addrspace(1) %2, i64 %154, !dbg !34
  %156 = sext i32 %143 to i64, !dbg !34
  %157 = getelementptr float, ptr addrspace(1) %2, i64 %156, !dbg !34
  %158 = sext i32 %144 to i64, !dbg !34
  %159 = getelementptr float, ptr addrspace(1) %2, i64 %158, !dbg !34
  %160 = sext i32 %145 to i64, !dbg !34
  %161 = getelementptr float, ptr addrspace(1) %2, i64 %160, !dbg !34
  %162 = and i1 %20, %131, !dbg !35
  %163 = and i1 %21, %131, !dbg !35
  %164 = and i1 %22, %131, !dbg !35
  %165 = and i1 %23, %131, !dbg !35
  %166 = and i1 %24, %133, !dbg !35
  %167 = and i1 %25, %133, !dbg !35
  %168 = and i1 %26, %133, !dbg !35
  %169 = and i1 %27, %133, !dbg !35
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %147, i1 %162, i32 0, i1 %162) #1, !dbg !36
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 %163, i32 0, i1 %163) #1, !dbg !36
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %151, i1 %164, i32 0, i1 %164) #1, !dbg !36
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %165, i32 0, i1 %165) #1, !dbg !36
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %155, i1 %166, i32 0, i1 %166) #1, !dbg !36
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %157, i1 %167, i32 0, i1 %167) #1, !dbg !36
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %159, i1 %168, i32 0, i1 %168) #1, !dbg !36
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %161, i1 %169, i32 0, i1 %169) #1, !dbg !36
  %178 = icmp sgt i32 %.decomposed, 395, !dbg !37
  %179 = icmp sgt i32 %.decomposed25, 395, !dbg !37
  %180 = add i32 %134, -396, !dbg !38
  %181 = add i32 %180, %.decomposed, !dbg !39
  %182 = add i32 %180, %30, !dbg !39
  %183 = add i32 %180, %31, !dbg !39
  %184 = add i32 %180, %32, !dbg !39
  %185 = add i32 %135, -396, !dbg !38
  %186 = add i32 %185, %.decomposed25, !dbg !39
  %187 = add i32 %185, %35, !dbg !39
  %188 = add i32 %185, %36, !dbg !39
  %189 = add i32 %185, %37, !dbg !39
  %190 = sext i32 %181 to i64, !dbg !40
  %191 = getelementptr float, ptr addrspace(1) %3, i64 %190, !dbg !40
  %192 = sext i32 %182 to i64, !dbg !40
  %193 = getelementptr float, ptr addrspace(1) %3, i64 %192, !dbg !40
  %194 = sext i32 %183 to i64, !dbg !40
  %195 = getelementptr float, ptr addrspace(1) %3, i64 %194, !dbg !40
  %196 = sext i32 %184 to i64, !dbg !40
  %197 = getelementptr float, ptr addrspace(1) %3, i64 %196, !dbg !40
  %198 = sext i32 %186 to i64, !dbg !40
  %199 = getelementptr float, ptr addrspace(1) %3, i64 %198, !dbg !40
  %200 = sext i32 %187 to i64, !dbg !40
  %201 = getelementptr float, ptr addrspace(1) %3, i64 %200, !dbg !40
  %202 = sext i32 %188 to i64, !dbg !40
  %203 = getelementptr float, ptr addrspace(1) %3, i64 %202, !dbg !40
  %204 = sext i32 %189 to i64, !dbg !40
  %205 = getelementptr float, ptr addrspace(1) %3, i64 %204, !dbg !40
  %206 = and i1 %20, %178, !dbg !41
  %207 = and i1 %21, %178, !dbg !41
  %208 = and i1 %22, %178, !dbg !41
  %209 = and i1 %23, %178, !dbg !41
  %210 = and i1 %24, %179, !dbg !41
  %211 = and i1 %25, %179, !dbg !41
  %212 = and i1 %26, %179, !dbg !41
  %213 = and i1 %27, %179, !dbg !41
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %191, i1 %206, i32 0, i1 %206) #1, !dbg !42
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %193, i1 %207, i32 0, i1 %207) #1, !dbg !42
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %195, i1 %208, i32 0, i1 %208) #1, !dbg !42
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %197, i1 %209, i32 0, i1 %209) #1, !dbg !42
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %199, i1 %210, i32 0, i1 %210) #1, !dbg !42
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %201, i1 %211, i32 0, i1 %211) #1, !dbg !42
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %203, i1 %212, i32 0, i1 %212) #1, !dbg !42
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %205, i1 %213, i32 0, i1 %213) #1, !dbg !42
  %.v = select i1 %131, i32 %170, i32 %214, !dbg !43
  %.v1 = select i1 %131, i32 %171, i32 %215, !dbg !43
  %.v2 = select i1 %131, i32 %172, i32 %216, !dbg !43
  %.v3 = select i1 %131, i32 %173, i32 %217, !dbg !43
  %.v4 = select i1 %133, i32 %174, i32 %218, !dbg !43
  %.v5 = select i1 %133, i32 %175, i32 %219, !dbg !43
  %.v6 = select i1 %133, i32 %176, i32 %220, !dbg !43
  %.v7 = select i1 %133, i32 %177, i32 %221, !dbg !43
  %.v8 = select i1 %83, i32 %122, i32 %.v, !dbg !44
  %.v9 = select i1 %83, i32 %123, i32 %.v1, !dbg !44
  %.v10 = select i1 %83, i32 %124, i32 %.v2, !dbg !44
  %.v11 = select i1 %83, i32 %125, i32 %.v3, !dbg !44
  %.v12 = select i1 %85, i32 %126, i32 %.v4, !dbg !44
  %.v13 = select i1 %85, i32 %127, i32 %.v5, !dbg !44
  %.v14 = select i1 %85, i32 %128, i32 %.v6, !dbg !44
  %.v15 = select i1 %85, i32 %129, i32 %.v7, !dbg !44
  %.v16 = select i1 %38, i32 %74, i32 %.v8, !dbg !45
  %.v17 = select i1 %38, i32 %75, i32 %.v9, !dbg !45
  %.v18 = select i1 %38, i32 %76, i32 %.v10, !dbg !45
  %.v19 = select i1 %38, i32 %77, i32 %.v11, !dbg !45
  %.v20 = select i1 %39, i32 %78, i32 %.v12, !dbg !45
  %.v21 = select i1 %39, i32 %79, i32 %.v13, !dbg !45
  %.v22 = select i1 %39, i32 %80, i32 %.v14, !dbg !45
  %.v23 = select i1 %39, i32 %81, i32 %.v15, !dbg !45
  %222 = sext i32 %12 to i64, !dbg !46
  %223 = getelementptr float, ptr addrspace(1) %4, i64 %222, !dbg !46
  %224 = sext i32 %13 to i64, !dbg !46
  %225 = getelementptr float, ptr addrspace(1) %4, i64 %224, !dbg !46
  %226 = sext i32 %14 to i64, !dbg !46
  %227 = getelementptr float, ptr addrspace(1) %4, i64 %226, !dbg !46
  %228 = sext i32 %15 to i64, !dbg !46
  %229 = getelementptr float, ptr addrspace(1) %4, i64 %228, !dbg !46
  %230 = sext i32 %16 to i64, !dbg !46
  %231 = getelementptr float, ptr addrspace(1) %4, i64 %230, !dbg !46
  %232 = sext i32 %17 to i64, !dbg !46
  %233 = getelementptr float, ptr addrspace(1) %4, i64 %232, !dbg !46
  %234 = sext i32 %18 to i64, !dbg !46
  %235 = getelementptr float, ptr addrspace(1) %4, i64 %234, !dbg !46
  %236 = sext i32 %19 to i64, !dbg !46
  %237 = getelementptr float, ptr addrspace(1) %4, i64 %236, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %.v16, ptr addrspace(1) %223, i1 %20) #1, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %.v17, ptr addrspace(1) %225, i1 %21) #1, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %.v18, ptr addrspace(1) %227, i1 %22) #1, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %.v19, ptr addrspace(1) %229, i1 %23) #1, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %.v20, ptr addrspace(1) %231, i1 %24) #1, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %.v21, ptr addrspace(1) %233, i1 %25) #1, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %.v22, ptr addrspace(1) %235, i1 %26) #1, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %.v23, ptr addrspace(1) %237, i1 %27) #1, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqlgpp5cpaskarye2xch272l53vinlaolekwkjuj3okjcfyxzy6b.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu_torch260/ql")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 19, column: 28, scope: !7)
!11 = !DILocation(line: 19, column: 33, scope: !7)
!12 = !DILocation(line: 20, column: 36, scope: !7)
!13 = !DILocation(line: 20, column: 23, scope: !7)
!14 = !DILocation(line: 21, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 20, scope: !7)
!16 = !DILocation(line: 22, column: 18, scope: !7)
!17 = !DILocation(line: 29, column: 18, scope: !7)
!18 = !DILocation(line: 30, column: 35, scope: !7)
!19 = !DILocation(line: 30, column: 41, scope: !7)
!20 = !DILocation(line: 30, column: 30, scope: !7)
!21 = !DILocation(line: 30, column: 53, scope: !7)
!22 = !DILocation(line: 30, column: 46, scope: !7)
!23 = !DILocation(line: 34, column: 18, scope: !7)
!24 = !DILocation(line: 35, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 42, scope: !7)
!26 = !DILocation(line: 35, column: 51, scope: !7)
!27 = !DILocation(line: 35, column: 31, scope: !7)
!28 = !DILocation(line: 35, column: 64, scope: !7)
!29 = !DILocation(line: 35, column: 57, scope: !7)
!30 = !DILocation(line: 39, column: 20, scope: !7)
!31 = !DILocation(line: 40, column: 37, scope: !7)
!32 = !DILocation(line: 40, column: 44, scope: !7)
!33 = !DILocation(line: 40, column: 53, scope: !7)
!34 = !DILocation(line: 40, column: 31, scope: !7)
!35 = !DILocation(line: 40, column: 67, scope: !7)
!36 = !DILocation(line: 40, column: 59, scope: !7)
!37 = !DILocation(line: 41, column: 20, scope: !7)
!38 = !DILocation(line: 44, column: 53, scope: !7)
!39 = !DILocation(line: 44, column: 44, scope: !7)
!40 = !DILocation(line: 44, column: 31, scope: !7)
!41 = !DILocation(line: 44, column: 67, scope: !7)
!42 = !DILocation(line: 44, column: 59, scope: !7)
!43 = !DILocation(line: 45, column: 35, scope: !7)
!44 = !DILocation(line: 46, column: 34, scope: !7)
!45 = !DILocation(line: 47, column: 33, scope: !7)
!46 = !DILocation(line: 48, column: 25, scope: !7)
!47 = !DILocation(line: 48, column: 37, scope: !7)
!48 = !DILocation(line: 48, column: 4, scope: !7)

; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
__nv_rsqrtf.exit:
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 7, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 63, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 64, !dbg !13
  %13 = icmp slt i32 %11, %4, !dbg !14
  %14 = icmp slt i32 %12, %4, !dbg !14
  %15 = shl i32 %8, 2, !dbg !15
  %16 = and i32 %15, 12, !dbg !15
  %17 = shl i32 %11, 4, !dbg !16
  %18 = shl i32 %12, 4, !dbg !16
  %19 = or disjoint i32 %17, %16, !dbg !17
  %20 = or disjoint i32 %18, %16, !dbg !17
  %21 = sext i32 %19 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !18
  %23 = sext i32 %20 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !18
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #4, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !19
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !19
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !19
  %30 = bitcast i32 %26 to float, !dbg !19
  %31 = bitcast i32 %27 to float, !dbg !19
  %32 = bitcast i32 %28 to float, !dbg !19
  %33 = bitcast i32 %29 to float, !dbg !19
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #4, !dbg !19
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !19
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !19
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !19
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !19
  %39 = bitcast i32 %35 to float, !dbg !19
  %40 = bitcast i32 %36 to float, !dbg !19
  %41 = bitcast i32 %37 to float, !dbg !19
  %42 = bitcast i32 %38 to float, !dbg !19
  %43 = zext nneg i32 %16 to i64, !dbg !20
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !20
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #4, !dbg !21
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !22
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #4, !dbg !23
  %48 = fadd float %30, %31, !dbg !24
  %49 = fadd float %48, %32, !dbg !24
  %50 = fadd float %49, %33, !dbg !24
  %51 = select i1 %13, float %50, float 0.000000e+00, !dbg !24
  %52 = fadd float %39, %40, !dbg !24
  %53 = fadd float %52, %41, !dbg !24
  %54 = fadd float %53, %42, !dbg !24
  %55 = select i1 %14, float %54, float 0.000000e+00, !dbg !24
  %56 = bitcast float %51 to i32, !dbg !29
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 2, i32 31), !dbg !29
  %58 = bitcast i32 %57 to float, !dbg !29
  %59 = fadd float %51, %58, !dbg !24
  %60 = bitcast float %59 to i32, !dbg !29
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 1, i32 31), !dbg !29
  %62 = bitcast i32 %61 to float, !dbg !29
  %63 = fadd float %59, %62, !dbg !24
  %64 = bitcast float %55 to i32, !dbg !29
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 2, i32 31), !dbg !29
  %66 = bitcast i32 %65 to float, !dbg !29
  %67 = fadd float %55, %66, !dbg !24
  %68 = bitcast float %67 to i32, !dbg !29
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 1, i32 31), !dbg !29
  %70 = bitcast i32 %69 to float, !dbg !29
  %71 = fadd float %67, %70, !dbg !24
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %63, float 1.600000e+01) #4, !dbg !30
  %73 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float 1.600000e+01) #4, !dbg !30
  %74 = fsub float %30, %72, !dbg !31
  %75 = fsub float %31, %72, !dbg !31
  %76 = fsub float %32, %72, !dbg !31
  %77 = fsub float %33, %72, !dbg !31
  %78 = fsub float %39, %73, !dbg !31
  %79 = fsub float %40, %73, !dbg !31
  %80 = fsub float %41, %73, !dbg !31
  %81 = fsub float %42, %73, !dbg !31
  %82 = fmul float %74, %74, !dbg !32
  %83 = fmul float %75, %75, !dbg !32
  %84 = fmul float %76, %76, !dbg !32
  %85 = fmul float %77, %77, !dbg !32
  %86 = fmul float %78, %78, !dbg !32
  %87 = fmul float %79, %79, !dbg !32
  %88 = fmul float %80, %80, !dbg !32
  %89 = fmul float %81, %81, !dbg !32
  %90 = fadd float %82, %83, !dbg !33
  %91 = fadd float %84, %90, !dbg !33
  %92 = fadd float %85, %91, !dbg !33
  %93 = select i1 %13, float %92, float 0.000000e+00, !dbg !33
  %94 = fadd float %86, %87, !dbg !33
  %95 = fadd float %88, %94, !dbg !33
  %96 = fadd float %89, %95, !dbg !33
  %97 = select i1 %14, float %96, float 0.000000e+00, !dbg !33
  %98 = bitcast float %93 to i32, !dbg !35
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 2, i32 31), !dbg !35
  %100 = bitcast i32 %99 to float, !dbg !35
  %101 = fadd float %93, %100, !dbg !33
  %102 = bitcast float %101 to i32, !dbg !35
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 1, i32 31), !dbg !35
  %104 = bitcast i32 %103 to float, !dbg !35
  %105 = fadd float %101, %104, !dbg !33
  %106 = bitcast float %97 to i32, !dbg !35
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 2, i32 31), !dbg !35
  %108 = bitcast i32 %107 to float, !dbg !35
  %109 = fadd float %97, %108, !dbg !33
  %110 = bitcast float %109 to i32, !dbg !35
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 1, i32 31), !dbg !35
  %112 = bitcast i32 %111 to float, !dbg !35
  %113 = fadd float %109, %112, !dbg !33
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float 1.600000e+01) #4, !dbg !36
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float 1.600000e+01) #4, !dbg !36
  %116 = fadd float %114, 0x3EE4F8B580000000, !dbg !37
  %117 = fadd float %115, 0x3EE4F8B580000000, !dbg !37
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i7 = icmp eq i32 %121, 0, !dbg !38
  br i1 %.not.i7, label %124, label %122, !dbg !38

122:                                              ; preds = %__nv_rsqrtf.exit
  %123 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %116), !dbg !38
  br label %__nv_rsqrtf.exit9, !dbg !38

124:                                              ; preds = %__nv_rsqrtf.exit
  %125 = tail call float @llvm.nvvm.rsqrt.approx.f(float %116), !dbg !38
  br label %__nv_rsqrtf.exit9, !dbg !38

__nv_rsqrtf.exit9:                                ; preds = %122, %124
  %.0.i8 = phi float [ %123, %122 ], [ %125, %124 ], !dbg !38
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i19 = icmp eq i32 %129, 0, !dbg !38
  br i1 %.not.i19, label %132, label %130, !dbg !38

130:                                              ; preds = %__nv_rsqrtf.exit9
  %131 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %117), !dbg !38
  br label %__nv_rsqrtf.exit21, !dbg !38

132:                                              ; preds = %__nv_rsqrtf.exit9
  %133 = tail call float @llvm.nvvm.rsqrt.approx.f(float %117), !dbg !38
  br label %__nv_rsqrtf.exit21, !dbg !38

__nv_rsqrtf.exit21:                               ; preds = %130, %132
  %.0.i20 = phi float [ %131, %130 ], [ %133, %132 ], !dbg !38
  %134 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !23
  %135 = bitcast i32 %134 to float, !dbg !23
  %136 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !23
  %137 = bitcast i32 %136 to float, !dbg !23
  %138 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !23
  %139 = bitcast i32 %138 to float, !dbg !23
  %140 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !23
  %141 = bitcast i32 %140 to float, !dbg !23
  %142 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !21
  %143 = bitcast i32 %142 to float, !dbg !21
  %144 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !21
  %145 = bitcast i32 %144 to float, !dbg !21
  %146 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !21
  %147 = bitcast i32 %146 to float, !dbg !21
  %148 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !21
  %149 = bitcast i32 %148 to float, !dbg !21
  %150 = fmul float %74, %.0.i8, !dbg !39
  %151 = fmul float %75, %.0.i8, !dbg !39
  %152 = fmul float %76, %.0.i8, !dbg !39
  %153 = fmul float %77, %.0.i8, !dbg !39
  %154 = fmul float %78, %.0.i20, !dbg !39
  %155 = fmul float %79, %.0.i20, !dbg !39
  %156 = fmul float %80, %.0.i20, !dbg !39
  %157 = fmul float %81, %.0.i20, !dbg !39
  %158 = fmul float %150, %149, !dbg !40
  %159 = fmul float %151, %147, !dbg !40
  %160 = fmul float %152, %145, !dbg !40
  %161 = fmul float %153, %143, !dbg !40
  %162 = fmul float %154, %149, !dbg !40
  %163 = fmul float %155, %147, !dbg !40
  %164 = fmul float %156, %145, !dbg !40
  %165 = fmul float %157, %143, !dbg !40
  %166 = fadd float %158, %141, !dbg !41
  %167 = fadd float %159, %139, !dbg !41
  %168 = fadd float %160, %137, !dbg !41
  %169 = fadd float %161, %135, !dbg !41
  %170 = fadd float %162, %141, !dbg !41
  %171 = fadd float %163, %139, !dbg !41
  %172 = fadd float %164, %137, !dbg !41
  %173 = fadd float %165, %135, !dbg !41
  %174 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !42
  %175 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !42
  %176 = bitcast float %166 to i32, !dbg !43
  %177 = bitcast float %167 to i32, !dbg !43
  %178 = bitcast float %168 to i32, !dbg !43
  %179 = bitcast float %169 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %176, i32 %177, i32 %178, i32 %179, ptr addrspace(1) %174, i1 %13) #4, !dbg !43
  %180 = bitcast float %170 to i32, !dbg !43
  %181 = bitcast float %171 to i32, !dbg !43
  %182 = bitcast float %172 to i32, !dbg !43
  %183 = bitcast float %173 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %180, i32 %181, i32 %182, i32 %183, ptr addrspace(1) %175, i1 %14) #4, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfmj2rybzejtqyrqokrlv3v7bve5q4uqz4q3d4wvonjbrjmqswp5.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu_torch260/fm")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 44, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 34, scope: !7)
!16 = !DILocation(line: 29, column: 39, scope: !7)
!17 = !DILocation(line: 29, column: 36, scope: !7)
!18 = !DILocation(line: 29, column: 30, scope: !7)
!19 = !DILocation(line: 29, column: 45, scope: !7)
!20 = !DILocation(line: 30, column: 31, scope: !7)
!21 = !DILocation(line: 30, column: 36, scope: !7)
!22 = !DILocation(line: 31, column: 31, scope: !7)
!23 = !DILocation(line: 31, column: 36, scope: !7)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/admin/zy429782/miniforge3/envs/torch_preview_0924/lib/python3.10/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!28 = !DILocation(line: 36, column: 24, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 39, column: 19, scope: !7)
!31 = !DILocation(line: 40, column: 19, scope: !7)
!32 = !DILocation(line: 41, column: 20, scope: !7)
!33 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !34)
!34 = !DILocation(line: 44, column: 26, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !34)
!36 = !DILocation(line: 47, column: 20, scope: !7)
!37 = !DILocation(line: 49, column: 20, scope: !7)
!38 = !DILocation(line: 50, column: 28, scope: !7)
!39 = !DILocation(line: 51, column: 20, scope: !7)
!40 = !DILocation(line: 52, column: 20, scope: !7)
!41 = !DILocation(line: 53, column: 20, scope: !7)
!42 = !DILocation(line: 54, column: 25, scope: !7)
!43 = !DILocation(line: 54, column: 47, scope: !7)
!44 = !DILocation(line: 54, column: 4, scope: !7)

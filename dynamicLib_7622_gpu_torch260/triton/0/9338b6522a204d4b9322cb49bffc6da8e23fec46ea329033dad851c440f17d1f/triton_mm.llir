; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %.mask = and i32 %4, 33554431, !dbg !10
  %6 = icmp eq i32 %.mask, 0, !dbg !10
  br i1 %6, label %common.ret, label %7, !dbg !10

common.ret:                                       ; preds = %5, %632
  ret void, !dbg !11

7:                                                ; preds = %5
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %9 = add i32 %4, 31, !dbg !13
  %10 = sdiv i32 %9, 32, !dbg !14
  %.frozen = freeze i32 %8
  %11 = sdiv i32 %.frozen, 32, !dbg !15
  %12 = shl nsw i32 %11, 3, !dbg !16
  %13 = sub nsw i32 %10, %12, !dbg !17
  %14 = tail call i32 @llvm.smin.i32(i32 %13, i32 8), !dbg !18
  %15 = srem i32 %8, %14, !dbg !19
  %16 = add nsw i32 %12, %15, !dbg !20
  %17 = mul i32 %11, 32
  %.decomposed = sub i32 %.frozen, %17
  %18 = sdiv i32 %.decomposed, %14, !dbg !21
  %19 = shl i32 %16, 5, !dbg !22
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !23
  %21 = lshr i32 %20, 2, !dbg !23
  %22 = and i32 %21, 15, !dbg !23
  %23 = or disjoint i32 %22, 16, !dbg !23
  %24 = lshr i32 %20, 3, !dbg !23
  %25 = and i32 %24, 7, !dbg !23
  %26 = shl i32 %20, 2, !dbg !23
  %27 = and i32 %26, 12, !dbg !23
  %28 = or disjoint i32 %19, %22, !dbg !24
  %29 = or disjoint i32 %19, %23, !dbg !24
  %30 = or disjoint i32 %19, %25, !dbg !23
  %31 = shl nsw i32 %18, 5, !dbg !25
  %32 = or disjoint i32 %31, %22, !dbg !26
  %33 = or disjoint i32 %31, %23, !dbg !26
  %34 = srem i32 %28, %4, !dbg !27
  %35 = srem i32 %29, %4, !dbg !27
  %36 = srem i32 %32, 128, !dbg !28
  %37 = srem i32 %33, 128, !dbg !28
  %38 = mul i32 %34, 156, !dbg !29
  %39 = mul i32 %35, 156, !dbg !29
  %40 = add i32 %38, %27, !dbg !30
  %41 = add i32 %39, %27, !dbg !30
  %42 = sext i32 %40 to i64, !dbg !31
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !31
  %44 = sext i32 %41 to i64, !dbg !31
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !31
  %46 = mul nsw i32 %36, 156, !dbg !32
  %47 = mul nsw i32 %37, 156, !dbg !32
  %48 = add nsw i32 %46, %27, !dbg !33
  %49 = add nsw i32 %47, %27, !dbg !33
  %50 = sext i32 %48 to i64, !dbg !34
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !34
  %52 = sext i32 %49 to i64, !dbg !34
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !34
  %54 = shl nuw nsw i32 %22, 4
  %55 = or disjoint i32 %54, %27
  %56 = zext nneg i32 %55 to i64
  %57 = getelementptr float, ptr addrspace(3) @global_smem, i64 %56
  %58 = shl nuw nsw i32 %23, 4
  %59 = or disjoint i32 %58, %27
  %60 = zext nneg i32 %59 to i64
  %61 = getelementptr float, ptr addrspace(3) @global_smem, i64 %60
  %62 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %56
  %63 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %60
  %64 = shl i32 %20, 3
  %65 = and i32 %64, 1984
  %66 = zext nneg i32 %65 to i64
  %67 = getelementptr float, ptr addrspace(3) @global_smem, i64 %66
  %68 = getelementptr i8, ptr addrspace(3) %67, i64 64
  %69 = getelementptr i8, ptr addrspace(3) %67, i64 128
  %70 = getelementptr i8, ptr addrspace(3) %67, i64 192
  %71 = getelementptr i8, ptr addrspace(3) %67, i64 4
  %72 = getelementptr i8, ptr addrspace(3) %67, i64 68
  %73 = getelementptr i8, ptr addrspace(3) %67, i64 132
  %74 = getelementptr i8, ptr addrspace(3) %67, i64 196
  %75 = getelementptr i8, ptr addrspace(3) %67, i64 8
  %76 = getelementptr i8, ptr addrspace(3) %67, i64 72
  %77 = getelementptr i8, ptr addrspace(3) %67, i64 136
  %78 = getelementptr i8, ptr addrspace(3) %67, i64 200
  %79 = getelementptr i8, ptr addrspace(3) %67, i64 12
  %80 = getelementptr i8, ptr addrspace(3) %67, i64 76
  %81 = getelementptr i8, ptr addrspace(3) %67, i64 140
  %82 = getelementptr i8, ptr addrspace(3) %67, i64 204
  %83 = getelementptr i8, ptr addrspace(3) %67, i64 16
  %84 = getelementptr i8, ptr addrspace(3) %67, i64 80
  %85 = getelementptr i8, ptr addrspace(3) %67, i64 144
  %86 = getelementptr i8, ptr addrspace(3) %67, i64 208
  %87 = getelementptr i8, ptr addrspace(3) %67, i64 20
  %88 = getelementptr i8, ptr addrspace(3) %67, i64 84
  %89 = getelementptr i8, ptr addrspace(3) %67, i64 148
  %90 = getelementptr i8, ptr addrspace(3) %67, i64 212
  %91 = getelementptr i8, ptr addrspace(3) %67, i64 24
  %92 = getelementptr i8, ptr addrspace(3) %67, i64 88
  %93 = getelementptr i8, ptr addrspace(3) %67, i64 152
  %94 = getelementptr i8, ptr addrspace(3) %67, i64 216
  %95 = getelementptr i8, ptr addrspace(3) %67, i64 28
  %96 = getelementptr i8, ptr addrspace(3) %67, i64 92
  %97 = getelementptr i8, ptr addrspace(3) %67, i64 156
  %98 = getelementptr i8, ptr addrspace(3) %67, i64 220
  %99 = getelementptr i8, ptr addrspace(3) %67, i64 32
  %100 = getelementptr i8, ptr addrspace(3) %67, i64 96
  %101 = getelementptr i8, ptr addrspace(3) %67, i64 160
  %102 = getelementptr i8, ptr addrspace(3) %67, i64 224
  %103 = getelementptr i8, ptr addrspace(3) %67, i64 36
  %104 = getelementptr i8, ptr addrspace(3) %67, i64 100
  %105 = getelementptr i8, ptr addrspace(3) %67, i64 164
  %106 = getelementptr i8, ptr addrspace(3) %67, i64 228
  %107 = getelementptr i8, ptr addrspace(3) %67, i64 40
  %108 = getelementptr i8, ptr addrspace(3) %67, i64 104
  %109 = getelementptr i8, ptr addrspace(3) %67, i64 168
  %110 = getelementptr i8, ptr addrspace(3) %67, i64 232
  %111 = getelementptr i8, ptr addrspace(3) %67, i64 44
  %112 = getelementptr i8, ptr addrspace(3) %67, i64 108
  %113 = getelementptr i8, ptr addrspace(3) %67, i64 172
  %114 = getelementptr i8, ptr addrspace(3) %67, i64 236
  %115 = getelementptr i8, ptr addrspace(3) %67, i64 48
  %116 = getelementptr i8, ptr addrspace(3) %67, i64 112
  %117 = getelementptr i8, ptr addrspace(3) %67, i64 176
  %118 = getelementptr i8, ptr addrspace(3) %67, i64 240
  %119 = getelementptr i8, ptr addrspace(3) %67, i64 52
  %120 = getelementptr i8, ptr addrspace(3) %67, i64 116
  %121 = getelementptr i8, ptr addrspace(3) %67, i64 180
  %122 = getelementptr i8, ptr addrspace(3) %67, i64 244
  %123 = getelementptr i8, ptr addrspace(3) %67, i64 56
  %124 = getelementptr i8, ptr addrspace(3) %67, i64 120
  %125 = getelementptr i8, ptr addrspace(3) %67, i64 184
  %126 = getelementptr i8, ptr addrspace(3) %67, i64 248
  %127 = getelementptr i8, ptr addrspace(3) %67, i64 60
  %128 = getelementptr i8, ptr addrspace(3) %67, i64 124
  %129 = getelementptr i8, ptr addrspace(3) %67, i64 188
  %130 = getelementptr i8, ptr addrspace(3) %67, i64 252
  %131 = shl i32 %20, 6
  %132 = and i32 %131, 448
  %133 = zext nneg i32 %132 to i64
  %134 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %133
  %135 = getelementptr i8, ptr addrspace(3) %134, i64 64
  %136 = getelementptr i8, ptr addrspace(3) %134, i64 128
  %137 = getelementptr i8, ptr addrspace(3) %134, i64 192
  %138 = getelementptr i8, ptr addrspace(3) %134, i64 4
  %139 = getelementptr i8, ptr addrspace(3) %134, i64 68
  %140 = getelementptr i8, ptr addrspace(3) %134, i64 132
  %141 = getelementptr i8, ptr addrspace(3) %134, i64 196
  %142 = getelementptr i8, ptr addrspace(3) %134, i64 8
  %143 = getelementptr i8, ptr addrspace(3) %134, i64 72
  %144 = getelementptr i8, ptr addrspace(3) %134, i64 136
  %145 = getelementptr i8, ptr addrspace(3) %134, i64 200
  %146 = getelementptr i8, ptr addrspace(3) %134, i64 12
  %147 = getelementptr i8, ptr addrspace(3) %134, i64 76
  %148 = getelementptr i8, ptr addrspace(3) %134, i64 140
  %149 = getelementptr i8, ptr addrspace(3) %134, i64 204
  %150 = getelementptr i8, ptr addrspace(3) %134, i64 16
  %151 = getelementptr i8, ptr addrspace(3) %134, i64 80
  %152 = getelementptr i8, ptr addrspace(3) %134, i64 144
  %153 = getelementptr i8, ptr addrspace(3) %134, i64 208
  %154 = getelementptr i8, ptr addrspace(3) %134, i64 20
  %155 = getelementptr i8, ptr addrspace(3) %134, i64 84
  %156 = getelementptr i8, ptr addrspace(3) %134, i64 148
  %157 = getelementptr i8, ptr addrspace(3) %134, i64 212
  %158 = getelementptr i8, ptr addrspace(3) %134, i64 24
  %159 = getelementptr i8, ptr addrspace(3) %134, i64 88
  %160 = getelementptr i8, ptr addrspace(3) %134, i64 152
  %161 = getelementptr i8, ptr addrspace(3) %134, i64 216
  %162 = getelementptr i8, ptr addrspace(3) %134, i64 28
  %163 = getelementptr i8, ptr addrspace(3) %134, i64 92
  %164 = getelementptr i8, ptr addrspace(3) %134, i64 156
  %165 = getelementptr i8, ptr addrspace(3) %134, i64 220
  %166 = getelementptr i8, ptr addrspace(3) %134, i64 32
  %167 = getelementptr i8, ptr addrspace(3) %134, i64 96
  %168 = getelementptr i8, ptr addrspace(3) %134, i64 160
  %169 = getelementptr i8, ptr addrspace(3) %134, i64 224
  %170 = getelementptr i8, ptr addrspace(3) %134, i64 36
  %171 = getelementptr i8, ptr addrspace(3) %134, i64 100
  %172 = getelementptr i8, ptr addrspace(3) %134, i64 164
  %173 = getelementptr i8, ptr addrspace(3) %134, i64 228
  %174 = getelementptr i8, ptr addrspace(3) %134, i64 40
  %175 = getelementptr i8, ptr addrspace(3) %134, i64 104
  %176 = getelementptr i8, ptr addrspace(3) %134, i64 168
  %177 = getelementptr i8, ptr addrspace(3) %134, i64 232
  %178 = getelementptr i8, ptr addrspace(3) %134, i64 44
  %179 = getelementptr i8, ptr addrspace(3) %134, i64 108
  %180 = getelementptr i8, ptr addrspace(3) %134, i64 172
  %181 = getelementptr i8, ptr addrspace(3) %134, i64 236
  %182 = getelementptr i8, ptr addrspace(3) %134, i64 48
  %183 = getelementptr i8, ptr addrspace(3) %134, i64 112
  %184 = getelementptr i8, ptr addrspace(3) %134, i64 176
  %185 = getelementptr i8, ptr addrspace(3) %134, i64 240
  %186 = getelementptr i8, ptr addrspace(3) %134, i64 52
  %187 = getelementptr i8, ptr addrspace(3) %134, i64 116
  %188 = getelementptr i8, ptr addrspace(3) %134, i64 180
  %189 = getelementptr i8, ptr addrspace(3) %134, i64 244
  %190 = getelementptr i8, ptr addrspace(3) %134, i64 56
  %191 = getelementptr i8, ptr addrspace(3) %134, i64 120
  %192 = getelementptr i8, ptr addrspace(3) %134, i64 184
  %193 = getelementptr i8, ptr addrspace(3) %134, i64 248
  %194 = getelementptr i8, ptr addrspace(3) %134, i64 60
  %195 = getelementptr i8, ptr addrspace(3) %134, i64 124
  %196 = getelementptr i8, ptr addrspace(3) %134, i64 188
  %197 = getelementptr i8, ptr addrspace(3) %134, i64 252
  br label %198, !dbg !35

198:                                              ; preds = %7, %198
  %.pn2437 = phi ptr addrspace(1) [ %53, %7 ], [ %629, %198 ]
  %.pn3236 = phi ptr addrspace(1) [ %51, %7 ], [ %628, %198 ]
  %.pn835 = phi ptr addrspace(1) [ %45, %7 ], [ %627, %198 ]
  %.pn1634 = phi ptr addrspace(1) [ %43, %7 ], [ %626, %198 ]
  %199 = phi i32 [ 0, %7 ], [ %630, %198 ]
  %200 = phi <4 x float> [ zeroinitializer, %7 ], [ %625, %198 ]
  %201 = phi <4 x float> [ zeroinitializer, %7 ], [ %622, %198 ]
  %202 = phi <4 x float> [ zeroinitializer, %7 ], [ %619, %198 ]
  %203 = phi <4 x float> [ zeroinitializer, %7 ], [ %616, %198 ]
  %204 = sub nuw nsw i32 156, %199, !dbg !36
  %205 = icmp ne i32 %27, %204, !dbg !37
  %206 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %.pn1634, i1 %205, i32 0, i1 %205, i32 0, i1 %205, i32 0, i1 %205, i32 0, i1 %205) #3, !dbg !38
  %207 = extractvalue { i32, i32, i32, i32 } %206, 0, !dbg !38
  %208 = extractvalue { i32, i32, i32, i32 } %206, 1, !dbg !38
  %209 = extractvalue { i32, i32, i32, i32 } %206, 2, !dbg !38
  %210 = extractvalue { i32, i32, i32, i32 } %206, 3, !dbg !38
  %211 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %.pn835, i1 %205, i32 0, i1 %205, i32 0, i1 %205, i32 0, i1 %205, i32 0, i1 %205) #3, !dbg !38
  %212 = extractvalue { i32, i32, i32, i32 } %211, 0, !dbg !38
  %213 = extractvalue { i32, i32, i32, i32 } %211, 1, !dbg !38
  %214 = extractvalue { i32, i32, i32, i32 } %211, 2, !dbg !38
  %215 = extractvalue { i32, i32, i32, i32 } %211, 3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %216 = insertelement <4 x i32> poison, i32 %207, i64 0, !dbg !38
  %217 = insertelement <4 x i32> %216, i32 %208, i64 1, !dbg !38
  %218 = insertelement <4 x i32> %217, i32 %209, i64 2, !dbg !38
  %219 = insertelement <4 x i32> %218, i32 %210, i64 3, !dbg !38
  store <4 x i32> %219, ptr addrspace(3) %57, align 16, !dbg !38
  %220 = insertelement <4 x i32> poison, i32 %212, i64 0, !dbg !38
  %221 = insertelement <4 x i32> %220, i32 %213, i64 1, !dbg !38
  %222 = insertelement <4 x i32> %221, i32 %214, i64 2, !dbg !38
  %223 = insertelement <4 x i32> %222, i32 %215, i64 3, !dbg !38
  store <4 x i32> %223, ptr addrspace(3) %61, align 16, !dbg !38
  %224 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %.pn3236, i1 %205, i32 0, i1 %205, i32 0, i1 %205, i32 0, i1 %205, i32 0, i1 %205) #3, !dbg !39
  %225 = extractvalue { i32, i32, i32, i32 } %224, 0, !dbg !39
  %226 = extractvalue { i32, i32, i32, i32 } %224, 1, !dbg !39
  %227 = extractvalue { i32, i32, i32, i32 } %224, 2, !dbg !39
  %228 = extractvalue { i32, i32, i32, i32 } %224, 3, !dbg !39
  %229 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %.pn2437, i1 %205, i32 0, i1 %205, i32 0, i1 %205, i32 0, i1 %205, i32 0, i1 %205) #3, !dbg !39
  %230 = extractvalue { i32, i32, i32, i32 } %229, 0, !dbg !39
  %231 = extractvalue { i32, i32, i32, i32 } %229, 1, !dbg !39
  %232 = extractvalue { i32, i32, i32, i32 } %229, 2, !dbg !39
  %233 = extractvalue { i32, i32, i32, i32 } %229, 3, !dbg !39
  %234 = insertelement <4 x i32> poison, i32 %225, i64 0, !dbg !39
  %235 = insertelement <4 x i32> %234, i32 %226, i64 1, !dbg !39
  %236 = insertelement <4 x i32> %235, i32 %227, i64 2, !dbg !39
  %237 = insertelement <4 x i32> %236, i32 %228, i64 3, !dbg !39
  store <4 x i32> %237, ptr addrspace(3) %62, align 16, !dbg !39
  %238 = insertelement <4 x i32> poison, i32 %230, i64 0, !dbg !39
  %239 = insertelement <4 x i32> %238, i32 %231, i64 1, !dbg !39
  %240 = insertelement <4 x i32> %239, i32 %232, i64 2, !dbg !39
  %241 = insertelement <4 x i32> %240, i32 %233, i64 3, !dbg !39
  store <4 x i32> %241, ptr addrspace(3) %63, align 16, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %242 = load float, ptr addrspace(3) %67, align 16, !dbg !38
  %243 = load float, ptr addrspace(3) %68, align 16, !dbg !38
  %244 = load float, ptr addrspace(3) %69, align 16, !dbg !38
  %245 = load float, ptr addrspace(3) %70, align 16, !dbg !38
  %246 = load float, ptr addrspace(3) %71, align 4, !dbg !38
  %247 = load float, ptr addrspace(3) %72, align 4, !dbg !38
  %248 = load float, ptr addrspace(3) %73, align 4, !dbg !38
  %249 = load float, ptr addrspace(3) %74, align 4, !dbg !38
  %250 = load float, ptr addrspace(3) %75, align 8, !dbg !38
  %251 = load float, ptr addrspace(3) %76, align 8, !dbg !38
  %252 = load float, ptr addrspace(3) %77, align 8, !dbg !38
  %253 = load float, ptr addrspace(3) %78, align 8, !dbg !38
  %254 = load float, ptr addrspace(3) %79, align 4, !dbg !38
  %255 = load float, ptr addrspace(3) %80, align 4, !dbg !38
  %256 = load float, ptr addrspace(3) %81, align 4, !dbg !38
  %257 = load float, ptr addrspace(3) %82, align 4, !dbg !38
  %258 = load float, ptr addrspace(3) %83, align 16, !dbg !38
  %259 = load float, ptr addrspace(3) %84, align 16, !dbg !38
  %260 = load float, ptr addrspace(3) %85, align 16, !dbg !38
  %261 = load float, ptr addrspace(3) %86, align 16, !dbg !38
  %262 = load float, ptr addrspace(3) %87, align 4, !dbg !38
  %263 = load float, ptr addrspace(3) %88, align 4, !dbg !38
  %264 = load float, ptr addrspace(3) %89, align 4, !dbg !38
  %265 = load float, ptr addrspace(3) %90, align 4, !dbg !38
  %266 = load float, ptr addrspace(3) %91, align 8, !dbg !38
  %267 = load float, ptr addrspace(3) %92, align 8, !dbg !38
  %268 = load float, ptr addrspace(3) %93, align 8, !dbg !38
  %269 = load float, ptr addrspace(3) %94, align 8, !dbg !38
  %270 = load float, ptr addrspace(3) %95, align 4, !dbg !38
  %271 = load float, ptr addrspace(3) %96, align 4, !dbg !38
  %272 = load float, ptr addrspace(3) %97, align 4, !dbg !38
  %273 = load float, ptr addrspace(3) %98, align 4, !dbg !38
  %274 = load float, ptr addrspace(3) %99, align 16, !dbg !38
  %275 = load float, ptr addrspace(3) %100, align 16, !dbg !38
  %276 = load float, ptr addrspace(3) %101, align 16, !dbg !38
  %277 = load float, ptr addrspace(3) %102, align 16, !dbg !38
  %278 = load float, ptr addrspace(3) %103, align 4, !dbg !38
  %279 = load float, ptr addrspace(3) %104, align 4, !dbg !38
  %280 = load float, ptr addrspace(3) %105, align 4, !dbg !38
  %281 = load float, ptr addrspace(3) %106, align 4, !dbg !38
  %282 = load float, ptr addrspace(3) %107, align 8, !dbg !38
  %283 = load float, ptr addrspace(3) %108, align 8, !dbg !38
  %284 = load float, ptr addrspace(3) %109, align 8, !dbg !38
  %285 = load float, ptr addrspace(3) %110, align 8, !dbg !38
  %286 = load float, ptr addrspace(3) %111, align 4, !dbg !38
  %287 = load float, ptr addrspace(3) %112, align 4, !dbg !38
  %288 = load float, ptr addrspace(3) %113, align 4, !dbg !38
  %289 = load float, ptr addrspace(3) %114, align 4, !dbg !38
  %290 = load float, ptr addrspace(3) %115, align 16, !dbg !38
  %291 = load float, ptr addrspace(3) %116, align 16, !dbg !38
  %292 = load float, ptr addrspace(3) %117, align 16, !dbg !38
  %293 = load float, ptr addrspace(3) %118, align 16, !dbg !38
  %294 = load float, ptr addrspace(3) %119, align 4, !dbg !38
  %295 = load float, ptr addrspace(3) %120, align 4, !dbg !38
  %296 = load float, ptr addrspace(3) %121, align 4, !dbg !38
  %297 = load float, ptr addrspace(3) %122, align 4, !dbg !38
  %298 = load float, ptr addrspace(3) %123, align 8, !dbg !38
  %299 = load float, ptr addrspace(3) %124, align 8, !dbg !38
  %300 = load float, ptr addrspace(3) %125, align 8, !dbg !38
  %301 = load float, ptr addrspace(3) %126, align 8, !dbg !38
  %302 = load float, ptr addrspace(3) %127, align 4, !dbg !38
  %303 = load float, ptr addrspace(3) %128, align 4, !dbg !38
  %304 = load float, ptr addrspace(3) %129, align 4, !dbg !38
  %305 = load float, ptr addrspace(3) %130, align 4, !dbg !38
  %306 = load float, ptr addrspace(3) %134, align 16, !dbg !39
  %307 = load float, ptr addrspace(3) %135, align 16, !dbg !39
  %308 = load float, ptr addrspace(3) %136, align 16, !dbg !39
  %309 = load float, ptr addrspace(3) %137, align 16, !dbg !39
  %310 = load float, ptr addrspace(3) %138, align 4, !dbg !39
  %311 = load float, ptr addrspace(3) %139, align 4, !dbg !39
  %312 = load float, ptr addrspace(3) %140, align 4, !dbg !39
  %313 = load float, ptr addrspace(3) %141, align 4, !dbg !39
  %314 = load float, ptr addrspace(3) %142, align 8, !dbg !39
  %315 = load float, ptr addrspace(3) %143, align 8, !dbg !39
  %316 = load float, ptr addrspace(3) %144, align 8, !dbg !39
  %317 = load float, ptr addrspace(3) %145, align 8, !dbg !39
  %318 = load float, ptr addrspace(3) %146, align 4, !dbg !39
  %319 = load float, ptr addrspace(3) %147, align 4, !dbg !39
  %320 = load float, ptr addrspace(3) %148, align 4, !dbg !39
  %321 = load float, ptr addrspace(3) %149, align 4, !dbg !39
  %322 = load float, ptr addrspace(3) %150, align 16, !dbg !39
  %323 = load float, ptr addrspace(3) %151, align 16, !dbg !39
  %324 = load float, ptr addrspace(3) %152, align 16, !dbg !39
  %325 = load float, ptr addrspace(3) %153, align 16, !dbg !39
  %326 = load float, ptr addrspace(3) %154, align 4, !dbg !39
  %327 = load float, ptr addrspace(3) %155, align 4, !dbg !39
  %328 = load float, ptr addrspace(3) %156, align 4, !dbg !39
  %329 = load float, ptr addrspace(3) %157, align 4, !dbg !39
  %330 = load float, ptr addrspace(3) %158, align 8, !dbg !39
  %331 = load float, ptr addrspace(3) %159, align 8, !dbg !39
  %332 = load float, ptr addrspace(3) %160, align 8, !dbg !39
  %333 = load float, ptr addrspace(3) %161, align 8, !dbg !39
  %334 = load float, ptr addrspace(3) %162, align 4, !dbg !39
  %335 = load float, ptr addrspace(3) %163, align 4, !dbg !39
  %336 = load float, ptr addrspace(3) %164, align 4, !dbg !39
  %337 = load float, ptr addrspace(3) %165, align 4, !dbg !39
  %338 = load float, ptr addrspace(3) %166, align 16, !dbg !39
  %339 = load float, ptr addrspace(3) %167, align 16, !dbg !39
  %340 = load float, ptr addrspace(3) %168, align 16, !dbg !39
  %341 = load float, ptr addrspace(3) %169, align 16, !dbg !39
  %342 = load float, ptr addrspace(3) %170, align 4, !dbg !39
  %343 = load float, ptr addrspace(3) %171, align 4, !dbg !39
  %344 = load float, ptr addrspace(3) %172, align 4, !dbg !39
  %345 = load float, ptr addrspace(3) %173, align 4, !dbg !39
  %346 = load float, ptr addrspace(3) %174, align 8, !dbg !39
  %347 = load float, ptr addrspace(3) %175, align 8, !dbg !39
  %348 = load float, ptr addrspace(3) %176, align 8, !dbg !39
  %349 = load float, ptr addrspace(3) %177, align 8, !dbg !39
  %350 = load float, ptr addrspace(3) %178, align 4, !dbg !39
  %351 = load float, ptr addrspace(3) %179, align 4, !dbg !39
  %352 = load float, ptr addrspace(3) %180, align 4, !dbg !39
  %353 = load float, ptr addrspace(3) %181, align 4, !dbg !39
  %354 = load float, ptr addrspace(3) %182, align 16, !dbg !39
  %355 = load float, ptr addrspace(3) %183, align 16, !dbg !39
  %356 = load float, ptr addrspace(3) %184, align 16, !dbg !39
  %357 = load float, ptr addrspace(3) %185, align 16, !dbg !39
  %358 = load float, ptr addrspace(3) %186, align 4, !dbg !39
  %359 = load float, ptr addrspace(3) %187, align 4, !dbg !39
  %360 = load float, ptr addrspace(3) %188, align 4, !dbg !39
  %361 = load float, ptr addrspace(3) %189, align 4, !dbg !39
  %362 = load float, ptr addrspace(3) %190, align 8, !dbg !39
  %363 = load float, ptr addrspace(3) %191, align 8, !dbg !39
  %364 = load float, ptr addrspace(3) %192, align 8, !dbg !39
  %365 = load float, ptr addrspace(3) %193, align 8, !dbg !39
  %366 = load float, ptr addrspace(3) %194, align 4, !dbg !39
  %367 = load float, ptr addrspace(3) %195, align 4, !dbg !39
  %368 = load float, ptr addrspace(3) %196, align 4, !dbg !39
  %369 = load float, ptr addrspace(3) %197, align 4, !dbg !39
  %370 = insertelement <4 x float> poison, float %242, i64 0, !dbg !40
  %371 = shufflevector <4 x float> %370, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %372 = insertelement <4 x float> poison, float %306, i64 0, !dbg !40
  %373 = insertelement <4 x float> %372, float %307, i64 1, !dbg !40
  %374 = insertelement <4 x float> %373, float %308, i64 2, !dbg !40
  %375 = insertelement <4 x float> %374, float %309, i64 3, !dbg !40
  %376 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %371, <4 x float> %375, <4 x float> %203), !dbg !40
  %377 = insertelement <4 x float> poison, float %246, i64 0, !dbg !40
  %378 = shufflevector <4 x float> %377, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %379 = insertelement <4 x float> poison, float %310, i64 0, !dbg !40
  %380 = insertelement <4 x float> %379, float %311, i64 1, !dbg !40
  %381 = insertelement <4 x float> %380, float %312, i64 2, !dbg !40
  %382 = insertelement <4 x float> %381, float %313, i64 3, !dbg !40
  %383 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %378, <4 x float> %382, <4 x float> %376), !dbg !40
  %384 = insertelement <4 x float> poison, float %250, i64 0, !dbg !40
  %385 = shufflevector <4 x float> %384, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %386 = insertelement <4 x float> poison, float %314, i64 0, !dbg !40
  %387 = insertelement <4 x float> %386, float %315, i64 1, !dbg !40
  %388 = insertelement <4 x float> %387, float %316, i64 2, !dbg !40
  %389 = insertelement <4 x float> %388, float %317, i64 3, !dbg !40
  %390 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %385, <4 x float> %389, <4 x float> %383), !dbg !40
  %391 = insertelement <4 x float> poison, float %254, i64 0, !dbg !40
  %392 = shufflevector <4 x float> %391, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %393 = insertelement <4 x float> poison, float %318, i64 0, !dbg !40
  %394 = insertelement <4 x float> %393, float %319, i64 1, !dbg !40
  %395 = insertelement <4 x float> %394, float %320, i64 2, !dbg !40
  %396 = insertelement <4 x float> %395, float %321, i64 3, !dbg !40
  %397 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %392, <4 x float> %396, <4 x float> %390), !dbg !40
  %398 = insertelement <4 x float> poison, float %258, i64 0, !dbg !40
  %399 = shufflevector <4 x float> %398, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %400 = insertelement <4 x float> poison, float %322, i64 0, !dbg !40
  %401 = insertelement <4 x float> %400, float %323, i64 1, !dbg !40
  %402 = insertelement <4 x float> %401, float %324, i64 2, !dbg !40
  %403 = insertelement <4 x float> %402, float %325, i64 3, !dbg !40
  %404 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %399, <4 x float> %403, <4 x float> %397), !dbg !40
  %405 = insertelement <4 x float> poison, float %243, i64 0, !dbg !40
  %406 = shufflevector <4 x float> %405, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %407 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %406, <4 x float> %375, <4 x float> %202), !dbg !40
  %408 = insertelement <4 x float> poison, float %247, i64 0, !dbg !40
  %409 = shufflevector <4 x float> %408, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %410 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %409, <4 x float> %382, <4 x float> %407), !dbg !40
  %411 = insertelement <4 x float> poison, float %251, i64 0, !dbg !40
  %412 = shufflevector <4 x float> %411, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %413 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %412, <4 x float> %389, <4 x float> %410), !dbg !40
  %414 = insertelement <4 x float> poison, float %255, i64 0, !dbg !40
  %415 = shufflevector <4 x float> %414, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %416 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %415, <4 x float> %396, <4 x float> %413), !dbg !40
  %417 = insertelement <4 x float> poison, float %259, i64 0, !dbg !40
  %418 = shufflevector <4 x float> %417, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %419 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %418, <4 x float> %403, <4 x float> %416), !dbg !40
  %420 = insertelement <4 x float> poison, float %244, i64 0, !dbg !40
  %421 = shufflevector <4 x float> %420, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %422 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %421, <4 x float> %375, <4 x float> %201), !dbg !40
  %423 = insertelement <4 x float> poison, float %248, i64 0, !dbg !40
  %424 = shufflevector <4 x float> %423, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %425 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %424, <4 x float> %382, <4 x float> %422), !dbg !40
  %426 = insertelement <4 x float> poison, float %252, i64 0, !dbg !40
  %427 = shufflevector <4 x float> %426, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %428 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %427, <4 x float> %389, <4 x float> %425), !dbg !40
  %429 = insertelement <4 x float> poison, float %256, i64 0, !dbg !40
  %430 = shufflevector <4 x float> %429, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %431 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %430, <4 x float> %396, <4 x float> %428), !dbg !40
  %432 = insertelement <4 x float> poison, float %260, i64 0, !dbg !40
  %433 = shufflevector <4 x float> %432, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %434 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %433, <4 x float> %403, <4 x float> %431), !dbg !40
  %435 = insertelement <4 x float> poison, float %245, i64 0, !dbg !40
  %436 = shufflevector <4 x float> %435, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %437 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %436, <4 x float> %375, <4 x float> %200), !dbg !40
  %438 = insertelement <4 x float> poison, float %249, i64 0, !dbg !40
  %439 = shufflevector <4 x float> %438, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %440 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %439, <4 x float> %382, <4 x float> %437), !dbg !40
  %441 = insertelement <4 x float> poison, float %253, i64 0, !dbg !40
  %442 = shufflevector <4 x float> %441, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %443 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %442, <4 x float> %389, <4 x float> %440), !dbg !40
  %444 = insertelement <4 x float> poison, float %257, i64 0, !dbg !40
  %445 = shufflevector <4 x float> %444, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %446 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %445, <4 x float> %396, <4 x float> %443), !dbg !40
  %447 = insertelement <4 x float> poison, float %261, i64 0, !dbg !40
  %448 = shufflevector <4 x float> %447, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %449 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %448, <4 x float> %403, <4 x float> %446), !dbg !40
  %450 = insertelement <4 x float> poison, float %262, i64 0, !dbg !40
  %451 = shufflevector <4 x float> %450, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %452 = insertelement <4 x float> poison, float %326, i64 0, !dbg !40
  %453 = insertelement <4 x float> %452, float %327, i64 1, !dbg !40
  %454 = insertelement <4 x float> %453, float %328, i64 2, !dbg !40
  %455 = insertelement <4 x float> %454, float %329, i64 3, !dbg !40
  %456 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %451, <4 x float> %455, <4 x float> %404), !dbg !40
  %457 = insertelement <4 x float> poison, float %266, i64 0, !dbg !40
  %458 = shufflevector <4 x float> %457, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %459 = insertelement <4 x float> poison, float %330, i64 0, !dbg !40
  %460 = insertelement <4 x float> %459, float %331, i64 1, !dbg !40
  %461 = insertelement <4 x float> %460, float %332, i64 2, !dbg !40
  %462 = insertelement <4 x float> %461, float %333, i64 3, !dbg !40
  %463 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %458, <4 x float> %462, <4 x float> %456), !dbg !40
  %464 = insertelement <4 x float> poison, float %270, i64 0, !dbg !40
  %465 = shufflevector <4 x float> %464, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %466 = insertelement <4 x float> poison, float %334, i64 0, !dbg !40
  %467 = insertelement <4 x float> %466, float %335, i64 1, !dbg !40
  %468 = insertelement <4 x float> %467, float %336, i64 2, !dbg !40
  %469 = insertelement <4 x float> %468, float %337, i64 3, !dbg !40
  %470 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %465, <4 x float> %469, <4 x float> %463), !dbg !40
  %471 = insertelement <4 x float> poison, float %274, i64 0, !dbg !40
  %472 = shufflevector <4 x float> %471, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %473 = insertelement <4 x float> poison, float %338, i64 0, !dbg !40
  %474 = insertelement <4 x float> %473, float %339, i64 1, !dbg !40
  %475 = insertelement <4 x float> %474, float %340, i64 2, !dbg !40
  %476 = insertelement <4 x float> %475, float %341, i64 3, !dbg !40
  %477 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %472, <4 x float> %476, <4 x float> %470), !dbg !40
  %478 = insertelement <4 x float> poison, float %278, i64 0, !dbg !40
  %479 = shufflevector <4 x float> %478, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %480 = insertelement <4 x float> poison, float %342, i64 0, !dbg !40
  %481 = insertelement <4 x float> %480, float %343, i64 1, !dbg !40
  %482 = insertelement <4 x float> %481, float %344, i64 2, !dbg !40
  %483 = insertelement <4 x float> %482, float %345, i64 3, !dbg !40
  %484 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %479, <4 x float> %483, <4 x float> %477), !dbg !40
  %485 = insertelement <4 x float> poison, float %282, i64 0, !dbg !40
  %486 = shufflevector <4 x float> %485, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %487 = insertelement <4 x float> poison, float %346, i64 0, !dbg !40
  %488 = insertelement <4 x float> %487, float %347, i64 1, !dbg !40
  %489 = insertelement <4 x float> %488, float %348, i64 2, !dbg !40
  %490 = insertelement <4 x float> %489, float %349, i64 3, !dbg !40
  %491 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %486, <4 x float> %490, <4 x float> %484), !dbg !40
  %492 = insertelement <4 x float> poison, float %286, i64 0, !dbg !40
  %493 = shufflevector <4 x float> %492, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %494 = insertelement <4 x float> poison, float %350, i64 0, !dbg !40
  %495 = insertelement <4 x float> %494, float %351, i64 1, !dbg !40
  %496 = insertelement <4 x float> %495, float %352, i64 2, !dbg !40
  %497 = insertelement <4 x float> %496, float %353, i64 3, !dbg !40
  %498 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %493, <4 x float> %497, <4 x float> %491), !dbg !40
  %499 = insertelement <4 x float> poison, float %290, i64 0, !dbg !40
  %500 = shufflevector <4 x float> %499, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %501 = insertelement <4 x float> poison, float %354, i64 0, !dbg !40
  %502 = insertelement <4 x float> %501, float %355, i64 1, !dbg !40
  %503 = insertelement <4 x float> %502, float %356, i64 2, !dbg !40
  %504 = insertelement <4 x float> %503, float %357, i64 3, !dbg !40
  %505 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %500, <4 x float> %504, <4 x float> %498), !dbg !40
  %506 = insertelement <4 x float> poison, float %294, i64 0, !dbg !40
  %507 = shufflevector <4 x float> %506, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %508 = insertelement <4 x float> poison, float %358, i64 0, !dbg !40
  %509 = insertelement <4 x float> %508, float %359, i64 1, !dbg !40
  %510 = insertelement <4 x float> %509, float %360, i64 2, !dbg !40
  %511 = insertelement <4 x float> %510, float %361, i64 3, !dbg !40
  %512 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %507, <4 x float> %511, <4 x float> %505), !dbg !40
  %513 = insertelement <4 x float> poison, float %298, i64 0, !dbg !40
  %514 = shufflevector <4 x float> %513, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %515 = insertelement <4 x float> poison, float %362, i64 0, !dbg !40
  %516 = insertelement <4 x float> %515, float %363, i64 1, !dbg !40
  %517 = insertelement <4 x float> %516, float %364, i64 2, !dbg !40
  %518 = insertelement <4 x float> %517, float %365, i64 3, !dbg !40
  %519 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %514, <4 x float> %518, <4 x float> %512), !dbg !40
  %520 = insertelement <4 x float> poison, float %263, i64 0, !dbg !40
  %521 = shufflevector <4 x float> %520, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %522 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %521, <4 x float> %455, <4 x float> %419), !dbg !40
  %523 = insertelement <4 x float> poison, float %267, i64 0, !dbg !40
  %524 = shufflevector <4 x float> %523, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %525 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %524, <4 x float> %462, <4 x float> %522), !dbg !40
  %526 = insertelement <4 x float> poison, float %271, i64 0, !dbg !40
  %527 = shufflevector <4 x float> %526, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %528 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %527, <4 x float> %469, <4 x float> %525), !dbg !40
  %529 = insertelement <4 x float> poison, float %275, i64 0, !dbg !40
  %530 = shufflevector <4 x float> %529, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %531 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %530, <4 x float> %476, <4 x float> %528), !dbg !40
  %532 = insertelement <4 x float> poison, float %279, i64 0, !dbg !40
  %533 = shufflevector <4 x float> %532, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %534 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %533, <4 x float> %483, <4 x float> %531), !dbg !40
  %535 = insertelement <4 x float> poison, float %283, i64 0, !dbg !40
  %536 = shufflevector <4 x float> %535, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %537 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %536, <4 x float> %490, <4 x float> %534), !dbg !40
  %538 = insertelement <4 x float> poison, float %287, i64 0, !dbg !40
  %539 = shufflevector <4 x float> %538, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %540 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %539, <4 x float> %497, <4 x float> %537), !dbg !40
  %541 = insertelement <4 x float> poison, float %291, i64 0, !dbg !40
  %542 = shufflevector <4 x float> %541, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %543 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %542, <4 x float> %504, <4 x float> %540), !dbg !40
  %544 = insertelement <4 x float> poison, float %295, i64 0, !dbg !40
  %545 = shufflevector <4 x float> %544, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %546 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %545, <4 x float> %511, <4 x float> %543), !dbg !40
  %547 = insertelement <4 x float> poison, float %299, i64 0, !dbg !40
  %548 = shufflevector <4 x float> %547, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %549 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %548, <4 x float> %518, <4 x float> %546), !dbg !40
  %550 = insertelement <4 x float> poison, float %264, i64 0, !dbg !40
  %551 = shufflevector <4 x float> %550, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %552 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %551, <4 x float> %455, <4 x float> %434), !dbg !40
  %553 = insertelement <4 x float> poison, float %268, i64 0, !dbg !40
  %554 = shufflevector <4 x float> %553, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %555 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %554, <4 x float> %462, <4 x float> %552), !dbg !40
  %556 = insertelement <4 x float> poison, float %272, i64 0, !dbg !40
  %557 = shufflevector <4 x float> %556, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %558 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %557, <4 x float> %469, <4 x float> %555), !dbg !40
  %559 = insertelement <4 x float> poison, float %276, i64 0, !dbg !40
  %560 = shufflevector <4 x float> %559, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %561 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %560, <4 x float> %476, <4 x float> %558), !dbg !40
  %562 = insertelement <4 x float> poison, float %280, i64 0, !dbg !40
  %563 = shufflevector <4 x float> %562, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %564 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %563, <4 x float> %483, <4 x float> %561), !dbg !40
  %565 = insertelement <4 x float> poison, float %284, i64 0, !dbg !40
  %566 = shufflevector <4 x float> %565, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %567 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %566, <4 x float> %490, <4 x float> %564), !dbg !40
  %568 = insertelement <4 x float> poison, float %288, i64 0, !dbg !40
  %569 = shufflevector <4 x float> %568, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %570 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %569, <4 x float> %497, <4 x float> %567), !dbg !40
  %571 = insertelement <4 x float> poison, float %292, i64 0, !dbg !40
  %572 = shufflevector <4 x float> %571, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %573 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %572, <4 x float> %504, <4 x float> %570), !dbg !40
  %574 = insertelement <4 x float> poison, float %296, i64 0, !dbg !40
  %575 = shufflevector <4 x float> %574, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %576 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %575, <4 x float> %511, <4 x float> %573), !dbg !40
  %577 = insertelement <4 x float> poison, float %300, i64 0, !dbg !40
  %578 = shufflevector <4 x float> %577, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %579 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %578, <4 x float> %518, <4 x float> %576), !dbg !40
  %580 = insertelement <4 x float> poison, float %265, i64 0, !dbg !40
  %581 = shufflevector <4 x float> %580, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %582 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %581, <4 x float> %455, <4 x float> %449), !dbg !40
  %583 = insertelement <4 x float> poison, float %269, i64 0, !dbg !40
  %584 = shufflevector <4 x float> %583, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %585 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %584, <4 x float> %462, <4 x float> %582), !dbg !40
  %586 = insertelement <4 x float> poison, float %273, i64 0, !dbg !40
  %587 = shufflevector <4 x float> %586, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %588 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %587, <4 x float> %469, <4 x float> %585), !dbg !40
  %589 = insertelement <4 x float> poison, float %277, i64 0, !dbg !40
  %590 = shufflevector <4 x float> %589, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %591 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %590, <4 x float> %476, <4 x float> %588), !dbg !40
  %592 = insertelement <4 x float> poison, float %281, i64 0, !dbg !40
  %593 = shufflevector <4 x float> %592, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %594 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %593, <4 x float> %483, <4 x float> %591), !dbg !40
  %595 = insertelement <4 x float> poison, float %285, i64 0, !dbg !40
  %596 = shufflevector <4 x float> %595, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %597 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %596, <4 x float> %490, <4 x float> %594), !dbg !40
  %598 = insertelement <4 x float> poison, float %289, i64 0, !dbg !40
  %599 = shufflevector <4 x float> %598, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %600 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %599, <4 x float> %497, <4 x float> %597), !dbg !40
  %601 = insertelement <4 x float> poison, float %293, i64 0, !dbg !40
  %602 = shufflevector <4 x float> %601, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %603 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %602, <4 x float> %504, <4 x float> %600), !dbg !40
  %604 = insertelement <4 x float> poison, float %297, i64 0, !dbg !40
  %605 = shufflevector <4 x float> %604, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %606 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %605, <4 x float> %511, <4 x float> %603), !dbg !40
  %607 = insertelement <4 x float> poison, float %301, i64 0, !dbg !40
  %608 = shufflevector <4 x float> %607, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %609 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %608, <4 x float> %518, <4 x float> %606), !dbg !40
  %610 = insertelement <4 x float> poison, float %302, i64 0, !dbg !40
  %611 = shufflevector <4 x float> %610, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %612 = insertelement <4 x float> poison, float %366, i64 0, !dbg !40
  %613 = insertelement <4 x float> %612, float %367, i64 1, !dbg !40
  %614 = insertelement <4 x float> %613, float %368, i64 2, !dbg !40
  %615 = insertelement <4 x float> %614, float %369, i64 3, !dbg !40
  %616 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %611, <4 x float> %615, <4 x float> %519), !dbg !40
  %617 = insertelement <4 x float> poison, float %303, i64 0, !dbg !40
  %618 = shufflevector <4 x float> %617, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %619 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %618, <4 x float> %615, <4 x float> %549), !dbg !40
  %620 = insertelement <4 x float> poison, float %304, i64 0, !dbg !40
  %621 = shufflevector <4 x float> %620, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %622 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %621, <4 x float> %615, <4 x float> %579), !dbg !40
  %623 = insertelement <4 x float> poison, float %305, i64 0, !dbg !40
  %624 = shufflevector <4 x float> %623, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %625 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %624, <4 x float> %615, <4 x float> %609), !dbg !40
  %626 = getelementptr i8, ptr addrspace(1) %.pn1634, i64 64, !dbg !41
  %627 = getelementptr i8, ptr addrspace(1) %.pn835, i64 64, !dbg !41
  %628 = getelementptr i8, ptr addrspace(1) %.pn3236, i64 64, !dbg !42
  %629 = getelementptr i8, ptr addrspace(1) %.pn2437, i64 64, !dbg !42
  %630 = add nuw nsw i32 %199, 16, !dbg !35
  %631 = icmp ult i32 %199, 140, !dbg !35
  br i1 %631, label %198, label %632, !dbg !35

632:                                              ; preds = %198
  %633 = and i32 %26, 28, !dbg !23
  %634 = or disjoint i32 %30, 8, !dbg !24
  %635 = or disjoint i32 %30, 16, !dbg !24
  %636 = or disjoint i32 %30, 24, !dbg !24
  %637 = or disjoint i32 %633, %31, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %638 = and i32 %24, 7, !dbg !35
  %639 = and i32 %26, 28, !dbg !35
  %640 = mul nuw nsw i32 %638, 144, !dbg !35
  %641 = add nuw nsw i32 %640, %639, !dbg !35
  %642 = zext nneg i32 %641 to i64, !dbg !35
  %643 = getelementptr float, ptr addrspace(3) @global_smem, i64 %642, !dbg !35
  store <4 x float> %616, ptr addrspace(3) %643, align 16, !dbg !35
  %644 = getelementptr i8, ptr addrspace(3) %643, i64 144, !dbg !35
  store <4 x float> %619, ptr addrspace(3) %644, align 16, !dbg !35
  %645 = getelementptr i8, ptr addrspace(3) %643, i64 288, !dbg !35
  store <4 x float> %622, ptr addrspace(3) %645, align 16, !dbg !35
  %646 = getelementptr i8, ptr addrspace(3) %643, i64 432, !dbg !35
  store <4 x float> %625, ptr addrspace(3) %646, align 16, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %647 = mul nuw nsw i32 %638, 36, !dbg !35
  %648 = add nuw nsw i32 %647, %639, !dbg !35
  %649 = zext nneg i32 %648 to i64, !dbg !35
  %650 = getelementptr float, ptr addrspace(3) @global_smem, i64 %649, !dbg !35
  %651 = load float, ptr addrspace(3) %650, align 16, !dbg !35
  %652 = getelementptr inbounds i8, ptr addrspace(3) %650, i64 4, !dbg !35
  %653 = load float, ptr addrspace(3) %652, align 4, !dbg !35
  %654 = getelementptr inbounds i8, ptr addrspace(3) %650, i64 8, !dbg !35
  %655 = load float, ptr addrspace(3) %654, align 8, !dbg !35
  %656 = getelementptr inbounds i8, ptr addrspace(3) %650, i64 12, !dbg !35
  %657 = load float, ptr addrspace(3) %656, align 4, !dbg !35
  %658 = getelementptr i8, ptr addrspace(3) %650, i64 1152, !dbg !35
  %659 = load float, ptr addrspace(3) %658, align 16, !dbg !35
  %660 = getelementptr i8, ptr addrspace(3) %650, i64 1156, !dbg !35
  %661 = load float, ptr addrspace(3) %660, align 4, !dbg !35
  %662 = getelementptr i8, ptr addrspace(3) %650, i64 1160, !dbg !35
  %663 = load float, ptr addrspace(3) %662, align 8, !dbg !35
  %664 = getelementptr i8, ptr addrspace(3) %650, i64 1164, !dbg !35
  %665 = load float, ptr addrspace(3) %664, align 4, !dbg !35
  %666 = getelementptr i8, ptr addrspace(3) %650, i64 2304, !dbg !35
  %667 = load float, ptr addrspace(3) %666, align 16, !dbg !35
  %668 = getelementptr i8, ptr addrspace(3) %650, i64 2308, !dbg !35
  %669 = load float, ptr addrspace(3) %668, align 4, !dbg !35
  %670 = getelementptr i8, ptr addrspace(3) %650, i64 2312, !dbg !35
  %671 = load float, ptr addrspace(3) %670, align 8, !dbg !35
  %672 = getelementptr i8, ptr addrspace(3) %650, i64 2316, !dbg !35
  %673 = load float, ptr addrspace(3) %672, align 4, !dbg !35
  %674 = getelementptr i8, ptr addrspace(3) %650, i64 3456, !dbg !35
  %675 = load float, ptr addrspace(3) %674, align 16, !dbg !35
  %676 = getelementptr i8, ptr addrspace(3) %650, i64 3460, !dbg !35
  %677 = load float, ptr addrspace(3) %676, align 4, !dbg !35
  %678 = getelementptr i8, ptr addrspace(3) %650, i64 3464, !dbg !35
  %679 = load float, ptr addrspace(3) %678, align 8, !dbg !35
  %680 = getelementptr i8, ptr addrspace(3) %650, i64 3468, !dbg !35
  %681 = load float, ptr addrspace(3) %680, align 4, !dbg !35
  %682 = icmp slt i32 %30, %4, !dbg !43
  %683 = icmp slt i32 %634, %4, !dbg !43
  %684 = icmp slt i32 %635, %4, !dbg !43
  %685 = icmp slt i32 %636, %4, !dbg !43
  %686 = icmp slt i32 %637, 128, !dbg !44
  %687 = and i1 %686, %682, !dbg !45
  %688 = and i1 %683, %686, !dbg !45
  %689 = and i1 %684, %686, !dbg !45
  %690 = and i1 %685, %686, !dbg !45
  %691 = shl i32 %30, 7, !dbg !46
  %692 = shl i32 %634, 7, !dbg !46
  %693 = shl i32 %635, 7, !dbg !46
  %694 = shl i32 %636, 7, !dbg !46
  %695 = add i32 %691, %637, !dbg !47
  %696 = add i32 %637, %692, !dbg !47
  %697 = add i32 %637, %693, !dbg !47
  %698 = add i32 %637, %694, !dbg !47
  %699 = sext i32 %637 to i64, !dbg !48
  %700 = getelementptr float, ptr addrspace(1) %0, i64 %699, !dbg !48
  %701 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %700, i1 %687) #3, !dbg !49
  %702 = extractvalue { i32, i32, i32, i32 } %701, 0, !dbg !49
  %703 = extractvalue { i32, i32, i32, i32 } %701, 1, !dbg !49
  %704 = extractvalue { i32, i32, i32, i32 } %701, 2, !dbg !49
  %705 = extractvalue { i32, i32, i32, i32 } %701, 3, !dbg !49
  %706 = bitcast i32 %702 to float, !dbg !49
  %707 = bitcast i32 %703 to float, !dbg !49
  %708 = bitcast i32 %704 to float, !dbg !49
  %709 = bitcast i32 %705 to float, !dbg !49
  %710 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %700, i1 %688) #3, !dbg !49
  %711 = extractvalue { i32, i32, i32, i32 } %710, 0, !dbg !49
  %712 = extractvalue { i32, i32, i32, i32 } %710, 1, !dbg !49
  %713 = extractvalue { i32, i32, i32, i32 } %710, 2, !dbg !49
  %714 = extractvalue { i32, i32, i32, i32 } %710, 3, !dbg !49
  %715 = bitcast i32 %711 to float, !dbg !49
  %716 = bitcast i32 %712 to float, !dbg !49
  %717 = bitcast i32 %713 to float, !dbg !49
  %718 = bitcast i32 %714 to float, !dbg !49
  %719 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %700, i1 %689) #3, !dbg !49
  %720 = extractvalue { i32, i32, i32, i32 } %719, 0, !dbg !49
  %721 = extractvalue { i32, i32, i32, i32 } %719, 1, !dbg !49
  %722 = extractvalue { i32, i32, i32, i32 } %719, 2, !dbg !49
  %723 = extractvalue { i32, i32, i32, i32 } %719, 3, !dbg !49
  %724 = bitcast i32 %720 to float, !dbg !49
  %725 = bitcast i32 %721 to float, !dbg !49
  %726 = bitcast i32 %722 to float, !dbg !49
  %727 = bitcast i32 %723 to float, !dbg !49
  %728 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %700, i1 %690) #3, !dbg !49
  %729 = extractvalue { i32, i32, i32, i32 } %728, 0, !dbg !49
  %730 = extractvalue { i32, i32, i32, i32 } %728, 1, !dbg !49
  %731 = extractvalue { i32, i32, i32, i32 } %728, 2, !dbg !49
  %732 = extractvalue { i32, i32, i32, i32 } %728, 3, !dbg !49
  %733 = bitcast i32 %729 to float, !dbg !49
  %734 = bitcast i32 %730 to float, !dbg !49
  %735 = bitcast i32 %731 to float, !dbg !49
  %736 = bitcast i32 %732 to float, !dbg !49
  %737 = fadd float %651, %706, !dbg !50
  %738 = fadd float %653, %707, !dbg !50
  %739 = fadd float %655, %708, !dbg !50
  %740 = fadd float %657, %709, !dbg !50
  %741 = fadd float %659, %715, !dbg !50
  %742 = fadd float %661, %716, !dbg !50
  %743 = fadd float %663, %717, !dbg !50
  %744 = fadd float %665, %718, !dbg !50
  %745 = fadd float %667, %724, !dbg !50
  %746 = fadd float %669, %725, !dbg !50
  %747 = fadd float %671, %726, !dbg !50
  %748 = fadd float %673, %727, !dbg !50
  %749 = fadd float %675, %733, !dbg !50
  %750 = fadd float %677, %734, !dbg !50
  %751 = fadd float %679, %735, !dbg !50
  %752 = fadd float %681, %736, !dbg !50
  %753 = sext i32 %695 to i64, !dbg !51
  %754 = getelementptr float, ptr addrspace(1) %3, i64 %753, !dbg !51
  %755 = sext i32 %696 to i64, !dbg !51
  %756 = getelementptr float, ptr addrspace(1) %3, i64 %755, !dbg !51
  %757 = sext i32 %697 to i64, !dbg !51
  %758 = getelementptr float, ptr addrspace(1) %3, i64 %757, !dbg !51
  %759 = sext i32 %698 to i64, !dbg !51
  %760 = getelementptr float, ptr addrspace(1) %3, i64 %759, !dbg !51
  %761 = bitcast float %737 to i32, !dbg !52
  %762 = bitcast float %738 to i32, !dbg !52
  %763 = bitcast float %739 to i32, !dbg !52
  %764 = bitcast float %740 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %761, i32 %762, i32 %763, i32 %764, ptr addrspace(1) %754, i1 %687) #3, !dbg !52
  %765 = bitcast float %741 to i32, !dbg !52
  %766 = bitcast float %742 to i32, !dbg !52
  %767 = bitcast float %743 to i32, !dbg !52
  %768 = bitcast float %744 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %765, i32 %766, i32 %767, i32 %768, ptr addrspace(1) %756, i1 %688) #3, !dbg !52
  %769 = bitcast float %745 to i32, !dbg !52
  %770 = bitcast float %746 to i32, !dbg !52
  %771 = bitcast float %747 to i32, !dbg !52
  %772 = bitcast float %748 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %769, i32 %770, i32 %771, i32 %772, ptr addrspace(1) %758, i1 %689) #3, !dbg !52
  %773 = bitcast float %749 to i32, !dbg !52
  %774 = bitcast float %750 to i32, !dbg !52
  %775 = bitcast float %751 to i32, !dbg !52
  %776 = bitcast float %752 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %773, i32 %774, i32 %775, i32 %776, ptr addrspace(1) %760, i1 %690) #3, !dbg !52
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x float> @llvm.fmuladd.v4f32(<4 x float>, <4 x float>, <4 x float>) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ca2iyxbprzhjzrfcblo2uj2uuxaojlvmgrp5ik4quapx3qeiu3zf.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu_torch260/a2")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 33, column: 16, scope: !7)
!11 = !DILocation(line: 0, scope: !7)
!12 = !DILocation(line: 42, column: 24, scope: !7)
!13 = !DILocation(line: 43, column: 28, scope: !7)
!14 = !DILocation(line: 43, column: 34, scope: !7)
!15 = !DILocation(line: 48, column: 22, scope: !7)
!16 = !DILocation(line: 49, column: 41, scope: !7)
!17 = !DILocation(line: 49, column: 30, scope: !7)
!18 = !DILocation(line: 49, column: 50, scope: !7)
!19 = !DILocation(line: 50, column: 40, scope: !7)
!20 = !DILocation(line: 50, column: 34, scope: !7)
!21 = !DILocation(line: 51, column: 30, scope: !7)
!22 = !DILocation(line: 53, column: 17, scope: !7)
!23 = !DILocation(line: 53, column: 40, scope: !7)
!24 = !DILocation(line: 53, column: 27, scope: !7)
!25 = !DILocation(line: 54, column: 17, scope: !7)
!26 = !DILocation(line: 54, column: 27, scope: !7)
!27 = !DILocation(line: 56, column: 52, scope: !7)
!28 = !DILocation(line: 60, column: 52, scope: !7)
!29 = !DILocation(line: 64, column: 28, scope: !7)
!30 = !DILocation(line: 64, column: 40, scope: !7)
!31 = !DILocation(line: 64, column: 13, scope: !7)
!32 = !DILocation(line: 65, column: 54, scope: !7)
!33 = !DILocation(line: 65, column: 39, scope: !7)
!34 = !DILocation(line: 65, column: 13, scope: !7)
!35 = !DILocation(line: 68, column: 25, scope: !7)
!36 = !DILocation(line: 73, column: 35, scope: !7)
!37 = !DILocation(line: 73, column: 46, scope: !7)
!38 = !DILocation(line: 73, column: 24, scope: !7)
!39 = !DILocation(line: 74, column: 24, scope: !7)
!40 = !DILocation(line: 77, column: 25, scope: !7)
!41 = !DILocation(line: 78, column: 13, scope: !7)
!42 = !DILocation(line: 79, column: 13, scope: !7)
!43 = !DILocation(line: 86, column: 20, scope: !7)
!44 = !DILocation(line: 86, column: 34, scope: !7)
!45 = !DILocation(line: 86, column: 26, scope: !7)
!46 = !DILocation(line: 89, column: 26, scope: !7)
!47 = !DILocation(line: 89, column: 22, scope: !7)
!48 = !DILocation(line: 90, column: 30, scope: !7)
!49 = !DILocation(line: 90, column: 66, scope: !7)
!50 = !DILocation(line: 91, column: 17, scope: !7)
!51 = !DILocation(line: 92, column: 25, scope: !7)
!52 = !DILocation(line: 92, column: 68, scope: !7)

; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 3, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 31, !dbg !12
  %14 = shl i32 %12, 2, !dbg !12
  %15 = and i32 %14, 4, !dbg !12
  %16 = and i32 %12, 7, !dbg !12
  %17 = or disjoint i32 %11, %15, !dbg !13
  %18 = or disjoint i32 %11, %16, !dbg !13
  %19 = icmp slt i32 %17, %7, !dbg !14
  %20 = icmp slt i32 %18, %7, !dbg !14
  %21 = lshr i32 %12, 5, !dbg !15
  %22 = lshr i32 %12, 1, !dbg !15
  %23 = and i32 %22, 63, !dbg !15
  %24 = icmp ult i32 %23, 50, !dbg !16
  %.frozen = freeze i32 %17
  %25 = sdiv i32 %.frozen, 176, !dbg !17
  %.frozen3 = freeze i32 %18
  %26 = sdiv i32 %.frozen3, 176, !dbg !17
  %27 = mul i32 %25, 176
  %.decomposed = sub i32 %.frozen, %27
  %28 = mul i32 %26, 176
  %.decomposed4 = sub i32 %.frozen3, %28
  %29 = sext i32 %25 to i64, !dbg !18
  %30 = getelementptr double, ptr addrspace(1) %0, i64 %29, !dbg !18
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 %19) #3, !dbg !19
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 %19) #3, !dbg !19
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 %19) #3, !dbg !19
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 %19) #3, !dbg !19
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !20
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %19) #3, !dbg !21
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %19) #3, !dbg !21
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %19) #3, !dbg !21
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %19) #3, !dbg !21
  %40 = mul nuw nsw i32 %23, 176, !dbg !22
  %41 = add nsw i32 %.decomposed, %40, !dbg !23
  %42 = mul i32 %25, 8800, !dbg !24
  %43 = add i32 %41, %42, !dbg !25
  %44 = sext i32 %43 to i64, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !26
  %46 = and i1 %24, %19, !dbg !27
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %45, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #3, !dbg !28
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !28
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !28
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !28
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !28
  %52 = bitcast i32 %48 to float, !dbg !28
  %53 = bitcast i32 %49 to float, !dbg !28
  %54 = bitcast i32 %50 to float, !dbg !28
  %55 = bitcast i32 %51 to float, !dbg !28
  %56 = sext i32 %.decomposed to i64, !dbg !29
  %57 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !29
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %19) #3, !dbg !30
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !30
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !30
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !30
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !30
  %63 = bitcast i32 %59 to float, !dbg !30
  %64 = bitcast i32 %60 to float, !dbg !30
  %65 = bitcast i32 %61 to float, !dbg !30
  %66 = bitcast i32 %62 to float, !dbg !30
  %67 = getelementptr float, ptr addrspace(1) %4, i64 %44, !dbg !31
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %67, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #3, !dbg !32
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !32
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !32
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !32
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !32
  %73 = bitcast i32 %69 to float, !dbg !32
  %74 = bitcast i32 %70 to float, !dbg !32
  %75 = bitcast i32 %71 to float, !dbg !32
  %76 = bitcast i32 %72 to float, !dbg !32
  %77 = sext i32 %26 to i64, !dbg !33
  %78 = getelementptr float, ptr addrspace(1) %5, i64 %77, !dbg !33
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %20) #3, !dbg !34
  %80 = bitcast i32 %79 to float, !dbg !34
  %81 = uitofp nneg i32 %23 to double
  %82 = insertelement <4 x i64> poison, i64 %34, i64 0, !dbg !19
  %83 = insertelement <4 x i64> %82, i64 %33, i64 1, !dbg !19
  %84 = insertelement <4 x i64> %83, i64 %32, i64 2, !dbg !19
  %85 = insertelement <4 x i64> %84, i64 %31, i64 3, !dbg !19
  %86 = bitcast <4 x i64> %85 to <4 x double>, !dbg !19
  %87 = fcmp olt <4 x double> %86, <double 5.000000e+01, double 5.000000e+01, double 5.000000e+01, double 5.000000e+01>, !dbg !35
  %88 = fcmp uno <4 x double> %86, zeroinitializer, !dbg !39
  %89 = or <4 x i1> %87, %88, !dbg !40
  %90 = select <4 x i1> %89, <4 x double> %86, <4 x double> <double 5.000000e+01, double 5.000000e+01, double 5.000000e+01, double 5.000000e+01>, !dbg !41
  %91 = insertelement <4 x double> poison, double %81, i64 0, !dbg !42
  %92 = shufflevector <4 x double> %91, <4 x double> poison, <4 x i32> zeroinitializer, !dbg !42
  %93 = fcmp ogt <4 x double> %90, %92, !dbg !42
  %94 = and i32 %36, 2147483647, !dbg !43
  %95 = icmp eq i32 %94, 0, !dbg !43
  %96 = extractelement <4 x i1> %93, i64 3, !dbg !44
  %97 = or i1 %96, %95, !dbg !44
  %98 = fadd float %52, %63, !dbg !45
  %99 = fadd float %53, %64, !dbg !45
  %100 = fadd float %54, %65, !dbg !45
  %101 = fadd float %55, %66, !dbg !45
  %102 = fadd float %98, %73, !dbg !46
  %103 = fadd float %99, %74, !dbg !46
  %104 = fadd float %100, %75, !dbg !46
  %105 = fadd float %101, %76, !dbg !46
  %106 = select i1 %46, i1 %97, i1 false, !dbg !47
  %107 = select i1 %106, float %102, float 0.000000e+00, !dbg !47
  %108 = bitcast float %107 to i32, !dbg !48
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 16, i32 31), !dbg !48
  %110 = bitcast i32 %109 to float, !dbg !48
  %111 = fadd float %107, %110, !dbg !52
  %112 = bitcast float %111 to i32, !dbg !48
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 8, i32 31), !dbg !48
  %114 = bitcast i32 %113 to float, !dbg !48
  %115 = fadd float %111, %114, !dbg !52
  %116 = bitcast float %115 to i32, !dbg !48
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 4, i32 31), !dbg !48
  %118 = bitcast i32 %117 to float, !dbg !48
  %119 = fadd float %115, %118, !dbg !52
  %120 = bitcast float %119 to i32, !dbg !48
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 2, i32 31), !dbg !48
  %122 = bitcast i32 %121 to float, !dbg !48
  %123 = fadd float %119, %122, !dbg !52
  %124 = icmp ult i32 %13, 2, !dbg !48
  %125 = and i32 %21, 3, !dbg !48
  %126 = shl nuw nsw i32 %15, 2, !dbg !48
  %127 = or disjoint i32 %126, %125, !dbg !48
  %128 = zext nneg i32 %127 to i64, !dbg !48
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i64 %128, !dbg !48
  %130 = or disjoint i32 %126, 4, !dbg !48
  %131 = or disjoint i32 %130, %125, !dbg !48
  %132 = zext nneg i32 %131 to i64, !dbg !48
  %133 = getelementptr float, ptr addrspace(3) @global_smem, i64 %132, !dbg !48
  %134 = or disjoint i32 %126, 8, !dbg !48
  %135 = or disjoint i32 %134, %125, !dbg !48
  %136 = zext nneg i32 %135 to i64, !dbg !48
  %137 = getelementptr float, ptr addrspace(3) @global_smem, i64 %136, !dbg !48
  %138 = or disjoint i32 %126, 12, !dbg !48
  %139 = or disjoint i32 %138, %125, !dbg !48
  %140 = zext nneg i32 %139 to i64, !dbg !48
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i64 %140, !dbg !48
  %142 = icmp slt i32 %12, 32, !dbg !48
  %143 = sext i32 %12 to i64, !dbg !48
  %144 = getelementptr float, ptr addrspace(3) @global_smem, i64 %143, !dbg !48
  %145 = insertelement <4 x i32> poison, i32 %12, i64 0, !dbg !48
  %146 = insertelement <4 x i32> %145, i32 %39, i64 1, !dbg !48
  %147 = insertelement <4 x i32> %146, i32 %38, i64 2, !dbg !48
  %148 = insertelement <4 x i32> %147, i32 %37, i64 3, !dbg !48
  %149 = and <4 x i32> %148, <i32 3, i32 2147483647, i32 2147483647, i32 2147483647>, !dbg !48
  %150 = icmp eq <4 x i32> %149, zeroinitializer, !dbg !48
  %shift = shufflevector <4 x i1> %150, <4 x i1> poison, <4 x i32> <i32 poison, i32 poison, i32 3, i32 poison>, !dbg !44
  %151 = or <4 x i1> %93, %shift, !dbg !44
  %152 = extractelement <4 x i1> %151, i64 2, !dbg !44
  %shift1 = shufflevector <4 x i1> %150, <4 x i1> poison, <4 x i32> <i32 poison, i32 2, i32 poison, i32 poison>, !dbg !44
  %153 = or <4 x i1> %93, %shift1, !dbg !44
  %154 = extractelement <4 x i1> %153, i64 1, !dbg !44
  %shift2 = shufflevector <4 x i1> %150, <4 x i1> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !44
  %155 = or <4 x i1> %93, %shift2, !dbg !44
  %156 = extractelement <4 x i1> %155, i64 0, !dbg !44
  %157 = select i1 %46, i1 %152, i1 false, !dbg !47
  %158 = select i1 %157, float %103, float 0.000000e+00, !dbg !47
  %159 = select i1 %46, i1 %154, i1 false, !dbg !47
  %160 = select i1 %159, float %104, float 0.000000e+00, !dbg !47
  %161 = select i1 %46, i1 %156, i1 false, !dbg !47
  %162 = select i1 %161, float %105, float 0.000000e+00, !dbg !47
  %163 = bitcast float %158 to i32, !dbg !48
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 16, i32 31), !dbg !48
  %165 = bitcast i32 %164 to float, !dbg !48
  %166 = fadd float %158, %165, !dbg !52
  %167 = bitcast float %166 to i32, !dbg !48
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 8, i32 31), !dbg !48
  %169 = bitcast i32 %168 to float, !dbg !48
  %170 = fadd float %166, %169, !dbg !52
  %171 = bitcast float %170 to i32, !dbg !48
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 4, i32 31), !dbg !48
  %173 = bitcast i32 %172 to float, !dbg !48
  %174 = fadd float %170, %173, !dbg !52
  %175 = bitcast float %174 to i32, !dbg !48
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 2, i32 31), !dbg !48
  %177 = bitcast i32 %176 to float, !dbg !48
  %178 = fadd float %174, %177, !dbg !52
  %179 = bitcast float %160 to i32, !dbg !48
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 16, i32 31), !dbg !48
  %181 = bitcast i32 %180 to float, !dbg !48
  %182 = fadd float %160, %181, !dbg !52
  %183 = bitcast float %182 to i32, !dbg !48
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 8, i32 31), !dbg !48
  %185 = bitcast i32 %184 to float, !dbg !48
  %186 = fadd float %182, %185, !dbg !52
  %187 = bitcast float %186 to i32, !dbg !48
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 4, i32 31), !dbg !48
  %189 = bitcast i32 %188 to float, !dbg !48
  %190 = fadd float %186, %189, !dbg !52
  %191 = bitcast float %190 to i32, !dbg !48
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 2, i32 31), !dbg !48
  %193 = bitcast i32 %192 to float, !dbg !48
  %194 = fadd float %190, %193, !dbg !52
  %195 = bitcast float %162 to i32, !dbg !48
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 16, i32 31), !dbg !48
  %197 = bitcast i32 %196 to float, !dbg !48
  %198 = fadd float %162, %197, !dbg !52
  %199 = bitcast float %198 to i32, !dbg !48
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 8, i32 31), !dbg !48
  %201 = bitcast i32 %200 to float, !dbg !48
  %202 = fadd float %198, %201, !dbg !52
  %203 = bitcast float %202 to i32, !dbg !48
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 4, i32 31), !dbg !48
  %205 = bitcast i32 %204 to float, !dbg !48
  %206 = fadd float %202, %205, !dbg !52
  %207 = bitcast float %206 to i32, !dbg !48
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 2, i32 31), !dbg !48
  %209 = bitcast i32 %208 to float, !dbg !48
  %210 = fadd float %206, %209, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, float %123, i1 %124) #3, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, float %178, i1 %124) #3, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, float %194, i1 %124) #3, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, float %210, i1 %124) #3, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %211 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %144, i1 %142) #3, !dbg !48
  %212 = bitcast float %211 to i32, !dbg !48
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 2, i32 31), !dbg !48
  %214 = bitcast i32 %213 to float, !dbg !48
  %215 = fadd float %211, %214, !dbg !52
  %216 = bitcast float %215 to i32, !dbg !48
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 1, i32 31), !dbg !48
  %218 = bitcast i32 %217 to float, !dbg !48
  %219 = fadd float %215, %218, !dbg !52
  %220 = extractelement <4 x i1> %150, i64 0, !dbg !48
  %221 = and i1 %142, %220, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, float %219, i1 %221) #3, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %222 = zext nneg i32 %126 to i64, !dbg !48
  %223 = getelementptr float, ptr addrspace(3) @global_smem, i64 %222, !dbg !48
  %224 = load float, ptr addrspace(3) %223, align 16, !dbg !48
  %225 = zext nneg i32 %130 to i64, !dbg !48
  %226 = getelementptr float, ptr addrspace(3) @global_smem, i64 %225, !dbg !48
  %227 = load float, ptr addrspace(3) %226, align 16, !dbg !48
  %228 = zext nneg i32 %134 to i64, !dbg !48
  %229 = getelementptr float, ptr addrspace(3) @global_smem, i64 %228, !dbg !48
  %230 = load float, ptr addrspace(3) %229, align 16, !dbg !48
  %231 = zext nneg i32 %138 to i64, !dbg !48
  %232 = getelementptr float, ptr addrspace(3) @global_smem, i64 %231, !dbg !48
  %233 = load float, ptr addrspace(3) %232, align 16, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %234 = zext nneg i32 %15 to i64, !dbg !54
  %235 = getelementptr float, ptr addrspace(3) @global_smem, i64 %234, !dbg !54
  %236 = insertelement <4 x float> poison, float %224, i64 0, !dbg !54
  %237 = insertelement <4 x float> %236, float %227, i64 1, !dbg !54
  %238 = insertelement <4 x float> %237, float %230, i64 2, !dbg !54
  %239 = insertelement <4 x float> %238, float %233, i64 3, !dbg !54
  store <4 x float> %239, ptr addrspace(3) %235, align 16, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %240 = zext nneg i32 %16 to i64, !dbg !54
  %241 = getelementptr float, ptr addrspace(3) @global_smem, i64 %240, !dbg !54
  %242 = load float, ptr addrspace(3) %241, align 4, !dbg !54
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %80) #3, !dbg !55
  %244 = fmul float %242, %243, !dbg !54
  %245 = mul i32 %26, 1872, !dbg !56
  %246 = add i32 %245, %.decomposed4, !dbg !57
  %247 = sext i32 %246 to i64, !dbg !58
  %248 = getelementptr float, ptr addrspace(1) %6, i64 %247, !dbg !58
  %249 = lshr i32 %13, 3, !dbg !59
  %250 = shl nuw nsw i32 %125, 2, !dbg !59
  %251 = or disjoint i32 %250, %249, !dbg !59
  %252 = icmp eq i32 %251, 0, !dbg !59
  %253 = bitcast float %244 to i32, !dbg !59
  %254 = and i1 %252, %20, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %253, ptr addrspace(1) %248, i1 %254) #3, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci2xsuz5hmbhdp6op2nnf4sykpv2zmuz6hsmprxn4ecqa27pj3gh.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu_torch260/i2")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 44, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 27, column: 20, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 33, column: 41, scope: !7)
!23 = !DILocation(line: 33, column: 37, scope: !7)
!24 = !DILocation(line: 33, column: 53, scope: !7)
!25 = !DILocation(line: 33, column: 48, scope: !7)
!26 = !DILocation(line: 33, column: 31, scope: !7)
!27 = !DILocation(line: 33, column: 67, scope: !7)
!28 = !DILocation(line: 33, column: 59, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 59, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 74, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/admin/zy429782/miniforge3/envs/torch_preview_0924/lib/python3.10/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 38, column: 40, scope: !7)
!39 = !DILocation(line: 76, column: 21, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 76, column: 16, scope: !36, inlinedAt: !38)
!41 = !DILocation(line: 77, column: 29, scope: !36, inlinedAt: !38)
!42 = !DILocation(line: 41, column: 18, scope: !7)
!43 = !DILocation(line: 43, column: 19, scope: !7)
!44 = !DILocation(line: 44, column: 18, scope: !7)
!45 = !DILocation(line: 45, column: 20, scope: !7)
!46 = !DILocation(line: 46, column: 20, scope: !7)
!47 = !DILocation(line: 49, column: 43, scope: !7)
!48 = !DILocation(line: 267, column: 36, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "standard.py", directory: "/home/admin/zy429782/miniforge3/envs/torch_preview_0924/lib/python3.10/site-packages/triton/language")
!51 = !DILocation(line: 50, column: 26, scope: !7)
!52 = !DILocation(line: 256, column: 15, scope: !53, inlinedAt: !51)
!53 = distinct !DILexicalBlockFile(scope: !49, file: !50, discriminator: 0)
!54 = !DILocation(line: 53, column: 20, scope: !7)
!55 = !DILocation(line: 52, column: 20, scope: !7)
!56 = !DILocation(line: 54, column: 36, scope: !7)
!57 = !DILocation(line: 54, column: 31, scope: !7)
!58 = !DILocation(line: 54, column: 25, scope: !7)
!59 = !DILocation(line: 54, column: 49, scope: !7)
!60 = !DILocation(line: 54, column: 4, scope: !7)

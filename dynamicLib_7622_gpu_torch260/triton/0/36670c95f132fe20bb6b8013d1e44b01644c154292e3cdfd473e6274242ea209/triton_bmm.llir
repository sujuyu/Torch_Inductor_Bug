; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

define void @triton_bmm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %.frozen = freeze i32 %4
  %5 = sdiv i32 %.frozen, 8, !dbg !11
  %6 = shl nsw i32 %5, 3, !dbg !12
  %7 = sub i32 1, %6, !dbg !13
  %8 = tail call i32 @llvm.smin.i32(i32 %7, i32 8), !dbg !14
  %9 = mul i32 %5, 8
  %.decomposed = sub i32 %.frozen, %9
  %10 = sdiv i32 %.decomposed, %8, !dbg !15
  %11 = shl nsw i32 %10, 4, !dbg !16
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !17
  %13 = shl i32 %12, 2, !dbg !17
  %14 = and i32 %13, 12, !dbg !17
  %15 = lshr i32 %12, 2, !dbg !17
  %16 = and i32 %15, 7, !dbg !17
  %17 = or disjoint i32 %16, 8, !dbg !17
  %18 = or disjoint i32 %11, %14, !dbg !18
  %19 = srem i32 %18, 16, !dbg !19
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !20
  %21 = shl i32 %12, 1, !dbg !21
  %22 = and i32 %21, 14, !dbg !21
  %23 = mul i32 %20, 50, !dbg !22
  %24 = add i32 %23, %22, !dbg !23
  %25 = sext i32 %24 to i64, !dbg !24
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !24
  %27 = shl nuw nsw i32 %16, 4, !dbg !25
  %28 = shl nuw nsw i32 %17, 4, !dbg !25
  %29 = mul i32 %20, 800, !dbg !26
  %30 = add i32 %19, %29, !dbg !27
  %31 = add i32 %30, %27, !dbg !28
  %32 = add i32 %30, %28, !dbg !28
  %33 = sext i32 %31 to i64, !dbg !29
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !29
  %35 = sext i32 %32 to i64, !dbg !29
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !29
  %37 = and i32 %21, 62
  %38 = zext nneg i32 %37 to i64
  %39 = getelementptr float, ptr addrspace(3) @global_smem, i64 %38
  %40 = or disjoint i32 %37, 64
  %41 = zext nneg i32 %40 to i64
  %42 = getelementptr float, ptr addrspace(3) @global_smem, i64 %41
  %43 = or disjoint i32 %37, 128
  %44 = zext nneg i32 %43 to i64
  %45 = getelementptr float, ptr addrspace(3) @global_smem, i64 %44
  %46 = or disjoint i32 %37, 192
  %47 = zext nneg i32 %46 to i64
  %48 = getelementptr float, ptr addrspace(3) @global_smem, i64 %47
  %49 = or disjoint i32 %27, %14
  %50 = zext nneg i32 %49 to i64
  %51 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %50
  %52 = or disjoint i32 %28, %14
  %53 = zext nneg i32 %52 to i64
  %54 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %53
  %55 = and i32 %13, 224
  %56 = zext nneg i32 %55 to i64
  %57 = getelementptr float, ptr addrspace(3) @global_smem, i64 %56
  %58 = getelementptr i8, ptr addrspace(3) %57, i64 64
  %59 = getelementptr i8, ptr addrspace(3) %57, i64 512
  %60 = getelementptr i8, ptr addrspace(3) %57, i64 576
  %61 = getelementptr i8, ptr addrspace(3) %57, i64 4
  %62 = getelementptr i8, ptr addrspace(3) %57, i64 68
  %63 = getelementptr i8, ptr addrspace(3) %57, i64 516
  %64 = getelementptr i8, ptr addrspace(3) %57, i64 580
  %65 = getelementptr i8, ptr addrspace(3) %57, i64 8
  %66 = getelementptr i8, ptr addrspace(3) %57, i64 72
  %67 = getelementptr i8, ptr addrspace(3) %57, i64 520
  %68 = getelementptr i8, ptr addrspace(3) %57, i64 584
  %69 = getelementptr i8, ptr addrspace(3) %57, i64 12
  %70 = getelementptr i8, ptr addrspace(3) %57, i64 76
  %71 = getelementptr i8, ptr addrspace(3) %57, i64 524
  %72 = getelementptr i8, ptr addrspace(3) %57, i64 588
  %73 = getelementptr i8, ptr addrspace(3) %57, i64 16
  %74 = getelementptr i8, ptr addrspace(3) %57, i64 80
  %75 = getelementptr i8, ptr addrspace(3) %57, i64 528
  %76 = getelementptr i8, ptr addrspace(3) %57, i64 592
  %77 = getelementptr i8, ptr addrspace(3) %57, i64 20
  %78 = getelementptr i8, ptr addrspace(3) %57, i64 84
  %79 = getelementptr i8, ptr addrspace(3) %57, i64 532
  %80 = getelementptr i8, ptr addrspace(3) %57, i64 596
  %81 = getelementptr i8, ptr addrspace(3) %57, i64 24
  %82 = getelementptr i8, ptr addrspace(3) %57, i64 88
  %83 = getelementptr i8, ptr addrspace(3) %57, i64 536
  %84 = getelementptr i8, ptr addrspace(3) %57, i64 600
  %85 = getelementptr i8, ptr addrspace(3) %57, i64 28
  %86 = getelementptr i8, ptr addrspace(3) %57, i64 92
  %87 = getelementptr i8, ptr addrspace(3) %57, i64 540
  %88 = getelementptr i8, ptr addrspace(3) %57, i64 604
  %89 = getelementptr i8, ptr addrspace(3) %57, i64 32
  %90 = getelementptr i8, ptr addrspace(3) %57, i64 96
  %91 = getelementptr i8, ptr addrspace(3) %57, i64 544
  %92 = getelementptr i8, ptr addrspace(3) %57, i64 608
  %93 = getelementptr i8, ptr addrspace(3) %57, i64 36
  %94 = getelementptr i8, ptr addrspace(3) %57, i64 100
  %95 = getelementptr i8, ptr addrspace(3) %57, i64 548
  %96 = getelementptr i8, ptr addrspace(3) %57, i64 612
  %97 = getelementptr i8, ptr addrspace(3) %57, i64 40
  %98 = getelementptr i8, ptr addrspace(3) %57, i64 104
  %99 = getelementptr i8, ptr addrspace(3) %57, i64 552
  %100 = getelementptr i8, ptr addrspace(3) %57, i64 616
  %101 = getelementptr i8, ptr addrspace(3) %57, i64 44
  %102 = getelementptr i8, ptr addrspace(3) %57, i64 108
  %103 = getelementptr i8, ptr addrspace(3) %57, i64 556
  %104 = getelementptr i8, ptr addrspace(3) %57, i64 620
  %105 = getelementptr i8, ptr addrspace(3) %57, i64 48
  %106 = getelementptr i8, ptr addrspace(3) %57, i64 112
  %107 = getelementptr i8, ptr addrspace(3) %57, i64 560
  %108 = getelementptr i8, ptr addrspace(3) %57, i64 624
  %109 = getelementptr i8, ptr addrspace(3) %57, i64 52
  %110 = getelementptr i8, ptr addrspace(3) %57, i64 116
  %111 = getelementptr i8, ptr addrspace(3) %57, i64 564
  %112 = getelementptr i8, ptr addrspace(3) %57, i64 628
  %113 = getelementptr i8, ptr addrspace(3) %57, i64 56
  %114 = getelementptr i8, ptr addrspace(3) %57, i64 120
  %115 = getelementptr i8, ptr addrspace(3) %57, i64 568
  %116 = getelementptr i8, ptr addrspace(3) %57, i64 632
  %117 = getelementptr i8, ptr addrspace(3) %57, i64 60
  %118 = getelementptr i8, ptr addrspace(3) %57, i64 124
  %119 = getelementptr i8, ptr addrspace(3) %57, i64 572
  %120 = getelementptr i8, ptr addrspace(3) %57, i64 636
  %121 = zext nneg i32 %22 to i64
  %122 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %121
  %123 = getelementptr i8, ptr addrspace(3) %122, i64 64
  %124 = getelementptr i8, ptr addrspace(3) %122, i64 128
  %125 = getelementptr i8, ptr addrspace(3) %122, i64 192
  %126 = getelementptr i8, ptr addrspace(3) %122, i64 256
  %127 = getelementptr i8, ptr addrspace(3) %122, i64 320
  %128 = getelementptr i8, ptr addrspace(3) %122, i64 384
  %129 = getelementptr i8, ptr addrspace(3) %122, i64 448
  %130 = getelementptr i8, ptr addrspace(3) %122, i64 512
  %131 = getelementptr i8, ptr addrspace(3) %122, i64 576
  %132 = getelementptr i8, ptr addrspace(3) %122, i64 640
  %133 = getelementptr i8, ptr addrspace(3) %122, i64 704
  %134 = getelementptr i8, ptr addrspace(3) %122, i64 768
  %135 = getelementptr i8, ptr addrspace(3) %122, i64 832
  %136 = getelementptr i8, ptr addrspace(3) %122, i64 896
  %137 = getelementptr i8, ptr addrspace(3) %122, i64 960
  br label %138, !dbg !30

138:                                              ; preds = %3, %138
  %.pn2353 = phi ptr addrspace(1) [ %36, %3 ], [ %377, %138 ]
  %.pn3152 = phi ptr addrspace(1) [ %34, %3 ], [ %376, %138 ]
  %.pn351 = phi ptr addrspace(1) [ %26, %3 ], [ %375, %138 ]
  %139 = phi i32 [ 0, %3 ], [ %378, %138 ]
  %140 = phi <8 x float> [ zeroinitializer, %3 ], [ %374, %138 ]
  %141 = sub nuw nsw i32 50, %139, !dbg !31
  %142 = icmp ult i32 %22, %141, !dbg !32
  %143 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %.pn351, i1 %142, i32 0, i1 %142, i32 0, i1 %142) #3, !dbg !33
  %144 = extractvalue { i32, i32 } %143, 0, !dbg !33
  %145 = extractvalue { i32, i32 } %143, 1, !dbg !33
  %146 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %.pn351, i1 %142, i32 0, i1 %142, i32 0, i1 %142) #3, !dbg !33
  %147 = extractvalue { i32, i32 } %146, 0, !dbg !33
  %148 = extractvalue { i32, i32 } %146, 1, !dbg !33
  %149 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %.pn351, i1 %142, i32 0, i1 %142, i32 0, i1 %142) #3, !dbg !33
  %150 = extractvalue { i32, i32 } %149, 0, !dbg !33
  %151 = extractvalue { i32, i32 } %149, 1, !dbg !33
  %152 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %.pn351, i1 %142, i32 0, i1 %142, i32 0, i1 %142) #3, !dbg !33
  %153 = extractvalue { i32, i32 } %152, 0, !dbg !33
  %154 = extractvalue { i32, i32 } %152, 1, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %155 = insertelement <2 x i32> poison, i32 %144, i64 0, !dbg !33
  %156 = insertelement <2 x i32> %155, i32 %145, i64 1, !dbg !33
  store <2 x i32> %156, ptr addrspace(3) %39, align 8, !dbg !33
  %157 = insertelement <2 x i32> poison, i32 %147, i64 0, !dbg !33
  %158 = insertelement <2 x i32> %157, i32 %148, i64 1, !dbg !33
  store <2 x i32> %158, ptr addrspace(3) %42, align 8, !dbg !33
  %159 = insertelement <2 x i32> poison, i32 %150, i64 0, !dbg !33
  %160 = insertelement <2 x i32> %159, i32 %151, i64 1, !dbg !33
  store <2 x i32> %160, ptr addrspace(3) %45, align 8, !dbg !33
  %161 = insertelement <2 x i32> poison, i32 %153, i64 0, !dbg !33
  %162 = insertelement <2 x i32> %161, i32 %154, i64 1, !dbg !33
  store <2 x i32> %162, ptr addrspace(3) %48, align 8, !dbg !33
  %163 = icmp ult i32 %16, %141, !dbg !34
  %164 = icmp ult i32 %17, %141, !dbg !34
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %.pn3152, i1 %163, i32 0, i1 %163, i32 0, i1 %163, i32 0, i1 %163, i32 0, i1 %163) #3, !dbg !35
  %166 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !35
  %167 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !35
  %168 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !35
  %169 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !35
  %170 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %.pn2353, i1 %164, i32 0, i1 %164, i32 0, i1 %164, i32 0, i1 %164, i32 0, i1 %164) #3, !dbg !35
  %171 = extractvalue { i32, i32, i32, i32 } %170, 0, !dbg !35
  %172 = extractvalue { i32, i32, i32, i32 } %170, 1, !dbg !35
  %173 = extractvalue { i32, i32, i32, i32 } %170, 2, !dbg !35
  %174 = extractvalue { i32, i32, i32, i32 } %170, 3, !dbg !35
  %175 = insertelement <4 x i32> poison, i32 %166, i64 0, !dbg !35
  %176 = insertelement <4 x i32> %175, i32 %167, i64 1, !dbg !35
  %177 = insertelement <4 x i32> %176, i32 %168, i64 2, !dbg !35
  %178 = insertelement <4 x i32> %177, i32 %169, i64 3, !dbg !35
  store <4 x i32> %178, ptr addrspace(3) %51, align 16, !dbg !35
  %179 = insertelement <4 x i32> poison, i32 %171, i64 0, !dbg !35
  %180 = insertelement <4 x i32> %179, i32 %172, i64 1, !dbg !35
  %181 = insertelement <4 x i32> %180, i32 %173, i64 2, !dbg !35
  %182 = insertelement <4 x i32> %181, i32 %174, i64 3, !dbg !35
  store <4 x i32> %182, ptr addrspace(3) %54, align 16, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %183 = load float, ptr addrspace(3) %57, align 16, !dbg !33
  %184 = load float, ptr addrspace(3) %58, align 16, !dbg !33
  %185 = load float, ptr addrspace(3) %59, align 16, !dbg !33
  %186 = load float, ptr addrspace(3) %60, align 16, !dbg !33
  %187 = load float, ptr addrspace(3) %61, align 4, !dbg !33
  %188 = load float, ptr addrspace(3) %62, align 4, !dbg !33
  %189 = load float, ptr addrspace(3) %63, align 4, !dbg !33
  %190 = load float, ptr addrspace(3) %64, align 4, !dbg !33
  %191 = load float, ptr addrspace(3) %65, align 8, !dbg !33
  %192 = load float, ptr addrspace(3) %66, align 8, !dbg !33
  %193 = load float, ptr addrspace(3) %67, align 8, !dbg !33
  %194 = load float, ptr addrspace(3) %68, align 8, !dbg !33
  %195 = load float, ptr addrspace(3) %69, align 4, !dbg !33
  %196 = load float, ptr addrspace(3) %70, align 4, !dbg !33
  %197 = load float, ptr addrspace(3) %71, align 4, !dbg !33
  %198 = load float, ptr addrspace(3) %72, align 4, !dbg !33
  %199 = load float, ptr addrspace(3) %73, align 16, !dbg !33
  %200 = load float, ptr addrspace(3) %74, align 16, !dbg !33
  %201 = load float, ptr addrspace(3) %75, align 16, !dbg !33
  %202 = load float, ptr addrspace(3) %76, align 16, !dbg !33
  %203 = load float, ptr addrspace(3) %77, align 4, !dbg !33
  %204 = load float, ptr addrspace(3) %78, align 4, !dbg !33
  %205 = load float, ptr addrspace(3) %79, align 4, !dbg !33
  %206 = load float, ptr addrspace(3) %80, align 4, !dbg !33
  %207 = load float, ptr addrspace(3) %81, align 8, !dbg !33
  %208 = load float, ptr addrspace(3) %82, align 8, !dbg !33
  %209 = load float, ptr addrspace(3) %83, align 8, !dbg !33
  %210 = load float, ptr addrspace(3) %84, align 8, !dbg !33
  %211 = load float, ptr addrspace(3) %85, align 4, !dbg !33
  %212 = load float, ptr addrspace(3) %86, align 4, !dbg !33
  %213 = load float, ptr addrspace(3) %87, align 4, !dbg !33
  %214 = load float, ptr addrspace(3) %88, align 4, !dbg !33
  %215 = load float, ptr addrspace(3) %89, align 16, !dbg !33
  %216 = load float, ptr addrspace(3) %90, align 16, !dbg !33
  %217 = load float, ptr addrspace(3) %91, align 16, !dbg !33
  %218 = load float, ptr addrspace(3) %92, align 16, !dbg !33
  %219 = load float, ptr addrspace(3) %93, align 4, !dbg !33
  %220 = load float, ptr addrspace(3) %94, align 4, !dbg !33
  %221 = load float, ptr addrspace(3) %95, align 4, !dbg !33
  %222 = load float, ptr addrspace(3) %96, align 4, !dbg !33
  %223 = load float, ptr addrspace(3) %97, align 8, !dbg !33
  %224 = load float, ptr addrspace(3) %98, align 8, !dbg !33
  %225 = load float, ptr addrspace(3) %99, align 8, !dbg !33
  %226 = load float, ptr addrspace(3) %100, align 8, !dbg !33
  %227 = load float, ptr addrspace(3) %101, align 4, !dbg !33
  %228 = load float, ptr addrspace(3) %102, align 4, !dbg !33
  %229 = load float, ptr addrspace(3) %103, align 4, !dbg !33
  %230 = load float, ptr addrspace(3) %104, align 4, !dbg !33
  %231 = load float, ptr addrspace(3) %105, align 16, !dbg !33
  %232 = load float, ptr addrspace(3) %106, align 16, !dbg !33
  %233 = load float, ptr addrspace(3) %107, align 16, !dbg !33
  %234 = load float, ptr addrspace(3) %108, align 16, !dbg !33
  %235 = load float, ptr addrspace(3) %109, align 4, !dbg !33
  %236 = load float, ptr addrspace(3) %110, align 4, !dbg !33
  %237 = load float, ptr addrspace(3) %111, align 4, !dbg !33
  %238 = load float, ptr addrspace(3) %112, align 4, !dbg !33
  %239 = load float, ptr addrspace(3) %113, align 8, !dbg !33
  %240 = load float, ptr addrspace(3) %114, align 8, !dbg !33
  %241 = load float, ptr addrspace(3) %115, align 8, !dbg !33
  %242 = load float, ptr addrspace(3) %116, align 8, !dbg !33
  %243 = load float, ptr addrspace(3) %117, align 4, !dbg !33
  %244 = load float, ptr addrspace(3) %118, align 4, !dbg !33
  %245 = load float, ptr addrspace(3) %119, align 4, !dbg !33
  %246 = load float, ptr addrspace(3) %120, align 4, !dbg !33
  %247 = load <2 x float>, ptr addrspace(3) %122, align 8, !dbg !35
  %248 = shufflevector <2 x float> %247, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !35
  %249 = load <2 x float>, ptr addrspace(3) %123, align 8, !dbg !35
  %250 = shufflevector <2 x float> %249, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !35
  %251 = load <2 x float>, ptr addrspace(3) %124, align 8, !dbg !35
  %252 = shufflevector <2 x float> %251, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !35
  %253 = load <2 x float>, ptr addrspace(3) %125, align 8, !dbg !35
  %254 = shufflevector <2 x float> %253, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !35
  %255 = load <2 x float>, ptr addrspace(3) %126, align 8, !dbg !35
  %256 = shufflevector <2 x float> %255, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !35
  %257 = insertelement <8 x float> poison, float %183, i64 0, !dbg !36
  %258 = insertelement <8 x float> %257, float %184, i64 1, !dbg !36
  %259 = insertelement <8 x float> %258, float %185, i64 2, !dbg !36
  %260 = insertelement <8 x float> %259, float %186, i64 3, !dbg !36
  %261 = shufflevector <8 x float> %260, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !36
  %262 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %261, <8 x float> %248, <8 x float> %140), !dbg !36
  %263 = insertelement <8 x float> poison, float %187, i64 0, !dbg !36
  %264 = insertelement <8 x float> %263, float %188, i64 1, !dbg !36
  %265 = insertelement <8 x float> %264, float %189, i64 2, !dbg !36
  %266 = insertelement <8 x float> %265, float %190, i64 3, !dbg !36
  %267 = shufflevector <8 x float> %266, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !36
  %268 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %267, <8 x float> %250, <8 x float> %262), !dbg !36
  %269 = insertelement <8 x float> poison, float %191, i64 0, !dbg !36
  %270 = insertelement <8 x float> %269, float %192, i64 1, !dbg !36
  %271 = insertelement <8 x float> %270, float %193, i64 2, !dbg !36
  %272 = insertelement <8 x float> %271, float %194, i64 3, !dbg !36
  %273 = shufflevector <8 x float> %272, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !36
  %274 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %273, <8 x float> %252, <8 x float> %268), !dbg !36
  %275 = insertelement <8 x float> poison, float %195, i64 0, !dbg !36
  %276 = insertelement <8 x float> %275, float %196, i64 1, !dbg !36
  %277 = insertelement <8 x float> %276, float %197, i64 2, !dbg !36
  %278 = insertelement <8 x float> %277, float %198, i64 3, !dbg !36
  %279 = shufflevector <8 x float> %278, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !36
  %280 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %279, <8 x float> %254, <8 x float> %274), !dbg !36
  %281 = insertelement <8 x float> poison, float %199, i64 0, !dbg !36
  %282 = insertelement <8 x float> %281, float %200, i64 1, !dbg !36
  %283 = insertelement <8 x float> %282, float %201, i64 2, !dbg !36
  %284 = insertelement <8 x float> %283, float %202, i64 3, !dbg !36
  %285 = shufflevector <8 x float> %284, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !36
  %286 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %285, <8 x float> %256, <8 x float> %280), !dbg !36
  %287 = load <2 x float>, ptr addrspace(3) %127, align 8, !dbg !35
  %288 = shufflevector <2 x float> %287, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !35
  %289 = load <2 x float>, ptr addrspace(3) %128, align 8, !dbg !35
  %290 = shufflevector <2 x float> %289, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !35
  %291 = load <2 x float>, ptr addrspace(3) %129, align 8, !dbg !35
  %292 = shufflevector <2 x float> %291, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !35
  %293 = load <2 x float>, ptr addrspace(3) %130, align 8, !dbg !35
  %294 = shufflevector <2 x float> %293, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !35
  %295 = load <2 x float>, ptr addrspace(3) %131, align 8, !dbg !35
  %296 = shufflevector <2 x float> %295, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !35
  %297 = load <2 x float>, ptr addrspace(3) %132, align 8, !dbg !35
  %298 = shufflevector <2 x float> %297, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !35
  %299 = load <2 x float>, ptr addrspace(3) %133, align 8, !dbg !35
  %300 = shufflevector <2 x float> %299, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !35
  %301 = load <2 x float>, ptr addrspace(3) %134, align 8, !dbg !35
  %302 = shufflevector <2 x float> %301, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !35
  %303 = load <2 x float>, ptr addrspace(3) %135, align 8, !dbg !35
  %304 = shufflevector <2 x float> %303, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !35
  %305 = load <2 x float>, ptr addrspace(3) %136, align 8, !dbg !35
  %306 = shufflevector <2 x float> %305, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !35
  %307 = load <2 x float>, ptr addrspace(3) %137, align 8, !dbg !35
  %308 = shufflevector <2 x float> %307, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !35
  %309 = insertelement <8 x float> poison, float %203, i64 0, !dbg !36
  %310 = insertelement <8 x float> %309, float %204, i64 1, !dbg !36
  %311 = insertelement <8 x float> %310, float %205, i64 2, !dbg !36
  %312 = insertelement <8 x float> %311, float %206, i64 3, !dbg !36
  %313 = shufflevector <8 x float> %312, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !36
  %314 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %313, <8 x float> %288, <8 x float> %286), !dbg !36
  %315 = insertelement <8 x float> poison, float %207, i64 0, !dbg !36
  %316 = insertelement <8 x float> %315, float %208, i64 1, !dbg !36
  %317 = insertelement <8 x float> %316, float %209, i64 2, !dbg !36
  %318 = insertelement <8 x float> %317, float %210, i64 3, !dbg !36
  %319 = shufflevector <8 x float> %318, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !36
  %320 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %319, <8 x float> %290, <8 x float> %314), !dbg !36
  %321 = insertelement <8 x float> poison, float %211, i64 0, !dbg !36
  %322 = insertelement <8 x float> %321, float %212, i64 1, !dbg !36
  %323 = insertelement <8 x float> %322, float %213, i64 2, !dbg !36
  %324 = insertelement <8 x float> %323, float %214, i64 3, !dbg !36
  %325 = shufflevector <8 x float> %324, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !36
  %326 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %325, <8 x float> %292, <8 x float> %320), !dbg !36
  %327 = insertelement <8 x float> poison, float %215, i64 0, !dbg !36
  %328 = insertelement <8 x float> %327, float %216, i64 1, !dbg !36
  %329 = insertelement <8 x float> %328, float %217, i64 2, !dbg !36
  %330 = insertelement <8 x float> %329, float %218, i64 3, !dbg !36
  %331 = shufflevector <8 x float> %330, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !36
  %332 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %331, <8 x float> %294, <8 x float> %326), !dbg !36
  %333 = insertelement <8 x float> poison, float %219, i64 0, !dbg !36
  %334 = insertelement <8 x float> %333, float %220, i64 1, !dbg !36
  %335 = insertelement <8 x float> %334, float %221, i64 2, !dbg !36
  %336 = insertelement <8 x float> %335, float %222, i64 3, !dbg !36
  %337 = shufflevector <8 x float> %336, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !36
  %338 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %337, <8 x float> %296, <8 x float> %332), !dbg !36
  %339 = insertelement <8 x float> poison, float %223, i64 0, !dbg !36
  %340 = insertelement <8 x float> %339, float %224, i64 1, !dbg !36
  %341 = insertelement <8 x float> %340, float %225, i64 2, !dbg !36
  %342 = insertelement <8 x float> %341, float %226, i64 3, !dbg !36
  %343 = shufflevector <8 x float> %342, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !36
  %344 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %343, <8 x float> %298, <8 x float> %338), !dbg !36
  %345 = insertelement <8 x float> poison, float %227, i64 0, !dbg !36
  %346 = insertelement <8 x float> %345, float %228, i64 1, !dbg !36
  %347 = insertelement <8 x float> %346, float %229, i64 2, !dbg !36
  %348 = insertelement <8 x float> %347, float %230, i64 3, !dbg !36
  %349 = shufflevector <8 x float> %348, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !36
  %350 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %349, <8 x float> %300, <8 x float> %344), !dbg !36
  %351 = insertelement <8 x float> poison, float %231, i64 0, !dbg !36
  %352 = insertelement <8 x float> %351, float %232, i64 1, !dbg !36
  %353 = insertelement <8 x float> %352, float %233, i64 2, !dbg !36
  %354 = insertelement <8 x float> %353, float %234, i64 3, !dbg !36
  %355 = shufflevector <8 x float> %354, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !36
  %356 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %355, <8 x float> %302, <8 x float> %350), !dbg !36
  %357 = insertelement <8 x float> poison, float %235, i64 0, !dbg !36
  %358 = insertelement <8 x float> %357, float %236, i64 1, !dbg !36
  %359 = insertelement <8 x float> %358, float %237, i64 2, !dbg !36
  %360 = insertelement <8 x float> %359, float %238, i64 3, !dbg !36
  %361 = shufflevector <8 x float> %360, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !36
  %362 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %361, <8 x float> %304, <8 x float> %356), !dbg !36
  %363 = insertelement <8 x float> poison, float %239, i64 0, !dbg !36
  %364 = insertelement <8 x float> %363, float %240, i64 1, !dbg !36
  %365 = insertelement <8 x float> %364, float %241, i64 2, !dbg !36
  %366 = insertelement <8 x float> %365, float %242, i64 3, !dbg !36
  %367 = shufflevector <8 x float> %366, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !36
  %368 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %367, <8 x float> %306, <8 x float> %362), !dbg !36
  %369 = insertelement <8 x float> poison, float %243, i64 0, !dbg !36
  %370 = insertelement <8 x float> %369, float %244, i64 1, !dbg !36
  %371 = insertelement <8 x float> %370, float %245, i64 2, !dbg !36
  %372 = insertelement <8 x float> %371, float %246, i64 3, !dbg !36
  %373 = shufflevector <8 x float> %372, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !36
  %374 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %373, <8 x float> %308, <8 x float> %368), !dbg !36
  %375 = getelementptr i8, ptr addrspace(1) %.pn351, i64 64, !dbg !37
  %376 = getelementptr i8, ptr addrspace(1) %.pn3152, i64 1024, !dbg !38
  %377 = getelementptr i8, ptr addrspace(1) %.pn2353, i64 1024, !dbg !38
  %378 = add nuw nsw i32 %139, 16, !dbg !30
  %379 = icmp ult i32 %139, 34, !dbg !30
  br i1 %379, label %138, label %380, !dbg !30

380:                                              ; preds = %138
  %381 = srem i32 %4, %8, !dbg !39
  %382 = add i32 %381, %6, !dbg !40
  %383 = shl i32 %382, 4, !dbg !41
  %384 = or disjoint i32 %383, %16, !dbg !42
  %385 = or disjoint i32 %383, %17, !dbg !42
  %386 = icmp slt i32 %384, 1, !dbg !43
  %387 = icmp slt i32 %385, 1, !dbg !43
  %388 = icmp slt i32 %18, 16, !dbg !44
  %389 = and i1 %388, %386, !dbg !45
  %390 = and i1 %388, %387, !dbg !45
  %391 = shl i32 %20, 4, !dbg !46
  %392 = add i32 %18, %391, !dbg !47
  %393 = sext i32 %392 to i64, !dbg !48
  %394 = getelementptr float, ptr addrspace(1) %2, i64 %393, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %395 = and i32 %15, 6, !dbg !49
  %396 = mul nuw nsw i32 %395, 20, !dbg !49
  %397 = add nuw nsw i32 %396, %22, !dbg !49
  %398 = zext nneg i32 %397 to i64, !dbg !49
  %399 = getelementptr float, ptr addrspace(3) @global_smem, i64 %398, !dbg !49
  %400 = shufflevector <8 x float> %374, <8 x float> poison, <2 x i32> <i32 0, i32 1>, !dbg !49
  store <2 x float> %400, ptr addrspace(3) %399, align 8, !dbg !49
  %401 = add nuw nsw i32 %22, 20, !dbg !49
  %402 = add nuw nsw i32 %401, %396, !dbg !49
  %403 = zext nneg i32 %402 to i64, !dbg !49
  %404 = getelementptr float, ptr addrspace(3) @global_smem, i64 %403, !dbg !49
  %405 = shufflevector <8 x float> %374, <8 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !49
  store <2 x float> %405, ptr addrspace(3) %404, align 8, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %406 = and i32 %15, 7, !dbg !49
  %407 = mul nuw nsw i32 %406, 20, !dbg !49
  %408 = add nuw nsw i32 %407, %14, !dbg !49
  %409 = zext nneg i32 %408 to i64, !dbg !49
  %410 = getelementptr float, ptr addrspace(3) @global_smem, i64 %409, !dbg !49
  %411 = load <4 x i32>, ptr addrspace(3) %410, align 16, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %412 = shufflevector <8 x float> %374, <8 x float> poison, <2 x i32> <i32 4, i32 5>, !dbg !49
  store <2 x float> %412, ptr addrspace(3) %399, align 8, !dbg !49
  %413 = shufflevector <8 x float> %374, <8 x float> poison, <2 x i32> <i32 6, i32 7>, !dbg !49
  store <2 x float> %413, ptr addrspace(3) %404, align 8, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %414 = load <4 x i32>, ptr addrspace(3) %410, align 16, !dbg !49
  %.extract = extractelement <4 x i32> %411, i64 0, !dbg !49
  %.extract33 = extractelement <4 x i32> %411, i64 1, !dbg !49
  %.extract35 = extractelement <4 x i32> %411, i64 2, !dbg !49
  %.extract37 = extractelement <4 x i32> %411, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract33, i32 %.extract35, i32 %.extract37, ptr addrspace(1) %394, i1 %389) #3, !dbg !49
  %.extract39 = extractelement <4 x i32> %414, i64 0, !dbg !49
  %.extract41 = extractelement <4 x i32> %414, i64 1, !dbg !49
  %.extract43 = extractelement <4 x i32> %414, i64 2, !dbg !49
  %.extract45 = extractelement <4 x i32> %414, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract39, i32 %.extract41, i32 %.extract43, i32 %.extract45, ptr addrspace(1) %394, i1 %390) #3, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <8 x float> @llvm.fmuladd.v8f32(<8 x float>, <8 x float>, <8 x float>) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp544jtqsdcptrdnds6nqnnqngudyvp4kh4km2gx2fqk4mv7ks5s.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu_torch260/p5")
!4 = !{ptr @triton_bmm, !"kernel", i32 1}
!5 = !{ptr @triton_bmm, !"maxntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_bmm", linkageName: "triton_bmm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 43, column: 24, scope: !7)
!11 = !DILocation(line: 49, column: 22, scope: !7)
!12 = !DILocation(line: 50, column: 41, scope: !7)
!13 = !DILocation(line: 50, column: 30, scope: !7)
!14 = !DILocation(line: 50, column: 50, scope: !7)
!15 = !DILocation(line: 52, column: 30, scope: !7)
!16 = !DILocation(line: 55, column: 17, scope: !7)
!17 = !DILocation(line: 55, column: 40, scope: !7)
!18 = !DILocation(line: 55, column: 27, scope: !7)
!19 = !DILocation(line: 61, column: 52, scope: !7)
!20 = !DILocation(line: 67, column: 26, scope: !7)
!21 = !DILocation(line: 68, column: 43, scope: !7)
!22 = !DILocation(line: 68, column: 72, scope: !7)
!23 = !DILocation(line: 68, column: 66, scope: !7)
!24 = !DILocation(line: 68, column: 13, scope: !7)
!25 = !DILocation(line: 69, column: 27, scope: !7)
!26 = !DILocation(line: 69, column: 72, scope: !7)
!27 = !DILocation(line: 69, column: 39, scope: !7)
!28 = !DILocation(line: 69, column: 66, scope: !7)
!29 = !DILocation(line: 69, column: 13, scope: !7)
!30 = !DILocation(line: 72, column: 25, scope: !7)
!31 = !DILocation(line: 77, column: 35, scope: !7)
!32 = !DILocation(line: 77, column: 46, scope: !7)
!33 = !DILocation(line: 77, column: 24, scope: !7)
!34 = !DILocation(line: 78, column: 46, scope: !7)
!35 = !DILocation(line: 78, column: 24, scope: !7)
!36 = !DILocation(line: 79, column: 25, scope: !7)
!37 = !DILocation(line: 80, column: 13, scope: !7)
!38 = !DILocation(line: 81, column: 13, scope: !7)
!39 = !DILocation(line: 51, column: 40, scope: !7)
!40 = !DILocation(line: 51, column: 34, scope: !7)
!41 = !DILocation(line: 84, column: 17, scope: !7)
!42 = !DILocation(line: 84, column: 27, scope: !7)
!43 = !DILocation(line: 89, column: 20, scope: !7)
!44 = !DILocation(line: 89, column: 34, scope: !7)
!45 = !DILocation(line: 89, column: 26, scope: !7)
!46 = !DILocation(line: 93, column: 53, scope: !7)
!47 = !DILocation(line: 93, column: 50, scope: !7)
!48 = !DILocation(line: 93, column: 25, scope: !7)
!49 = !DILocation(line: 93, column: 79, scope: !7)
!50 = !DILocation(line: 93, column: 4, scope: !7)

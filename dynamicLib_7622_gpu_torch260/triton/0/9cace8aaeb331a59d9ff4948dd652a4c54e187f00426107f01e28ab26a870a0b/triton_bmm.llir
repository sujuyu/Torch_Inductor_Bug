; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_bmm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %.frozen = freeze i32 %4
  %5 = sdiv i32 %.frozen, 8, !dbg !11
  %6 = shl nsw i32 %5, 3, !dbg !12
  %7 = sub i32 1, %6, !dbg !13
  %8 = tail call i32 @llvm.smin.i32(i32 %7, i32 8), !dbg !14
  %9 = mul i32 %5, 8
  %.decomposed = sub i32 %.frozen, %9
  %10 = sdiv i32 %.decomposed, %8, !dbg !15
  %11 = shl nsw i32 %10, 4, !dbg !16
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !17
  %13 = shl i32 %12, 2, !dbg !17
  %14 = and i32 %13, 12, !dbg !17
  %15 = lshr i32 %12, 2, !dbg !17
  %16 = and i32 %15, 7, !dbg !17
  %17 = or disjoint i32 %16, 8, !dbg !17
  %18 = or disjoint i32 %11, %14, !dbg !18
  %19 = srem i32 %18, 16, !dbg !19
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !20
  %21 = shl i32 %12, 1, !dbg !21
  %22 = and i32 %21, 30, !dbg !21
  %23 = mul i32 %20, 50, !dbg !22
  %24 = add i32 %23, %22, !dbg !23
  %25 = sext i32 %24 to i64, !dbg !24
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !24
  %27 = or disjoint i32 %16, 16, !dbg !25
  %28 = shl nuw nsw i32 %16, 4, !dbg !26
  %29 = shl nuw nsw i32 %17, 4, !dbg !26
  %30 = shl nuw nsw i32 %27, 4, !dbg !26
  %31 = shl nuw nsw i32 %16, 4, !dbg !26
  %32 = or disjoint i32 %31, 384, !dbg !26
  %33 = mul i32 %20, 800, !dbg !27
  %34 = add i32 %19, %33, !dbg !28
  %35 = add i32 %34, %28, !dbg !29
  %36 = add i32 %34, %29, !dbg !29
  %37 = add i32 %34, %30, !dbg !29
  %38 = add i32 %34, %32, !dbg !29
  %39 = sext i32 %35 to i64, !dbg !30
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !30
  %41 = sext i32 %36 to i64, !dbg !30
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !30
  %43 = sext i32 %37 to i64, !dbg !30
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !30
  %45 = sext i32 %38 to i64, !dbg !30
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !30
  %47 = and i32 %21, 62, !dbg !31
  %48 = zext nneg i32 %47 to i64, !dbg !31
  %49 = getelementptr float, ptr addrspace(3) @global_smem, i64 %48, !dbg !31
  %50 = or disjoint i32 %47, 64, !dbg !31
  %51 = zext nneg i32 %50 to i64, !dbg !31
  %52 = getelementptr float, ptr addrspace(3) @global_smem, i64 %51, !dbg !31
  %53 = or disjoint i32 %47, 128, !dbg !31
  %54 = zext nneg i32 %53 to i64, !dbg !31
  %55 = getelementptr float, ptr addrspace(3) @global_smem, i64 %54, !dbg !31
  %56 = or disjoint i32 %47, 192, !dbg !31
  %57 = zext nneg i32 %56 to i64, !dbg !31
  %58 = getelementptr float, ptr addrspace(3) @global_smem, i64 %57, !dbg !31
  %59 = or disjoint i32 %47, 256, !dbg !31
  %60 = zext nneg i32 %59 to i64, !dbg !31
  %61 = getelementptr float, ptr addrspace(3) @global_smem, i64 %60, !dbg !31
  %62 = or disjoint i32 %47, 320, !dbg !31
  %63 = zext nneg i32 %62 to i64, !dbg !31
  %64 = getelementptr float, ptr addrspace(3) @global_smem, i64 %63, !dbg !31
  %65 = or disjoint i32 %47, 384, !dbg !31
  %66 = zext nneg i32 %65 to i64, !dbg !31
  %67 = getelementptr float, ptr addrspace(3) @global_smem, i64 %66, !dbg !31
  %68 = or disjoint i32 %47, 448, !dbg !31
  %69 = zext nneg i32 %68 to i64, !dbg !31
  %70 = getelementptr float, ptr addrspace(3) @global_smem, i64 %69, !dbg !31
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %49, ptr addrspace(1) %26, i32 8, i1 true) #3, !dbg !31
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %52, ptr addrspace(1) %26, i32 8, i1 true) #3, !dbg !31
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %55, ptr addrspace(1) %26, i32 8, i1 true) #3, !dbg !31
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %58, ptr addrspace(1) %26, i32 8, i1 true) #3, !dbg !31
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %61, ptr addrspace(1) %26, i32 8, i1 true) #3, !dbg !31
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %64, ptr addrspace(1) %26, i32 8, i1 true) #3, !dbg !31
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %67, ptr addrspace(1) %26, i32 8, i1 true) #3, !dbg !31
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %70, ptr addrspace(1) %26, i32 8, i1 true) #3, !dbg !31
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !31
  %71 = or disjoint i32 %28, %14, !dbg !32
  %72 = zext nneg i32 %71 to i64, !dbg !32
  %73 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %72, !dbg !32
  %74 = or disjoint i32 %29, %14, !dbg !32
  %75 = zext nneg i32 %74 to i64, !dbg !32
  %76 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %75, !dbg !32
  %77 = or disjoint i32 %30, %14, !dbg !32
  %78 = zext nneg i32 %77 to i64, !dbg !32
  %79 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %78, !dbg !32
  %80 = or disjoint i32 %32, %14, !dbg !32
  %81 = zext nneg i32 %80 to i64, !dbg !32
  %82 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %81, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %73, ptr addrspace(1) %40, i32 16, i1 true) #3, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %76, ptr addrspace(1) %42, i32 16, i1 true) #3, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %79, ptr addrspace(1) %44, i32 16, i1 true) #3, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %82, ptr addrspace(1) %46, i32 16, i1 true) #3, !dbg !32
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !32
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %83 = shl i32 %12, 3
  %84 = and i32 %83, 448
  %85 = zext nneg i32 %84 to i64
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i64 %85
  %87 = getelementptr i8, ptr addrspace(3) %86, i64 128
  %88 = getelementptr i8, ptr addrspace(3) %86, i64 1024
  %89 = getelementptr i8, ptr addrspace(3) %86, i64 1152
  %90 = getelementptr i8, ptr addrspace(3) %86, i64 4
  %91 = getelementptr i8, ptr addrspace(3) %86, i64 132
  %92 = getelementptr i8, ptr addrspace(3) %86, i64 1028
  %93 = getelementptr i8, ptr addrspace(3) %86, i64 1156
  %94 = getelementptr i8, ptr addrspace(3) %86, i64 8
  %95 = getelementptr i8, ptr addrspace(3) %86, i64 136
  %96 = getelementptr i8, ptr addrspace(3) %86, i64 1032
  %97 = getelementptr i8, ptr addrspace(3) %86, i64 1160
  %98 = getelementptr i8, ptr addrspace(3) %86, i64 12
  %99 = getelementptr i8, ptr addrspace(3) %86, i64 140
  %100 = getelementptr i8, ptr addrspace(3) %86, i64 1036
  %101 = getelementptr i8, ptr addrspace(3) %86, i64 1164
  %102 = getelementptr i8, ptr addrspace(3) %86, i64 16
  %103 = getelementptr i8, ptr addrspace(3) %86, i64 144
  %104 = getelementptr i8, ptr addrspace(3) %86, i64 1040
  %105 = getelementptr i8, ptr addrspace(3) %86, i64 1168
  %106 = getelementptr i8, ptr addrspace(3) %86, i64 20
  %107 = getelementptr i8, ptr addrspace(3) %86, i64 148
  %108 = getelementptr i8, ptr addrspace(3) %86, i64 1044
  %109 = getelementptr i8, ptr addrspace(3) %86, i64 1172
  %110 = getelementptr i8, ptr addrspace(3) %86, i64 24
  %111 = getelementptr i8, ptr addrspace(3) %86, i64 152
  %112 = getelementptr i8, ptr addrspace(3) %86, i64 1048
  %113 = getelementptr i8, ptr addrspace(3) %86, i64 1176
  %114 = getelementptr i8, ptr addrspace(3) %86, i64 28
  %115 = getelementptr i8, ptr addrspace(3) %86, i64 156
  %116 = getelementptr i8, ptr addrspace(3) %86, i64 1052
  %117 = getelementptr i8, ptr addrspace(3) %86, i64 1180
  %118 = getelementptr i8, ptr addrspace(3) %86, i64 32
  %119 = getelementptr i8, ptr addrspace(3) %86, i64 160
  %120 = getelementptr i8, ptr addrspace(3) %86, i64 1056
  %121 = getelementptr i8, ptr addrspace(3) %86, i64 1184
  %122 = getelementptr i8, ptr addrspace(3) %86, i64 36
  %123 = getelementptr i8, ptr addrspace(3) %86, i64 164
  %124 = getelementptr i8, ptr addrspace(3) %86, i64 1060
  %125 = getelementptr i8, ptr addrspace(3) %86, i64 1188
  %126 = getelementptr i8, ptr addrspace(3) %86, i64 40
  %127 = getelementptr i8, ptr addrspace(3) %86, i64 168
  %128 = getelementptr i8, ptr addrspace(3) %86, i64 1064
  %129 = getelementptr i8, ptr addrspace(3) %86, i64 1192
  %130 = getelementptr i8, ptr addrspace(3) %86, i64 44
  %131 = getelementptr i8, ptr addrspace(3) %86, i64 172
  %132 = getelementptr i8, ptr addrspace(3) %86, i64 1068
  %133 = getelementptr i8, ptr addrspace(3) %86, i64 1196
  %134 = getelementptr i8, ptr addrspace(3) %86, i64 48
  %135 = getelementptr i8, ptr addrspace(3) %86, i64 176
  %136 = getelementptr i8, ptr addrspace(3) %86, i64 1072
  %137 = getelementptr i8, ptr addrspace(3) %86, i64 1200
  %138 = getelementptr i8, ptr addrspace(3) %86, i64 52
  %139 = getelementptr i8, ptr addrspace(3) %86, i64 180
  %140 = getelementptr i8, ptr addrspace(3) %86, i64 1076
  %141 = getelementptr i8, ptr addrspace(3) %86, i64 1204
  %142 = getelementptr i8, ptr addrspace(3) %86, i64 56
  %143 = getelementptr i8, ptr addrspace(3) %86, i64 184
  %144 = getelementptr i8, ptr addrspace(3) %86, i64 1080
  %145 = getelementptr i8, ptr addrspace(3) %86, i64 1208
  %146 = getelementptr i8, ptr addrspace(3) %86, i64 60
  %147 = getelementptr i8, ptr addrspace(3) %86, i64 188
  %148 = getelementptr i8, ptr addrspace(3) %86, i64 1084
  %149 = getelementptr i8, ptr addrspace(3) %86, i64 1212
  %150 = getelementptr i8, ptr addrspace(3) %86, i64 64
  %151 = getelementptr i8, ptr addrspace(3) %86, i64 192
  %152 = getelementptr i8, ptr addrspace(3) %86, i64 1088
  %153 = getelementptr i8, ptr addrspace(3) %86, i64 1216
  %154 = getelementptr i8, ptr addrspace(3) %86, i64 68
  %155 = getelementptr i8, ptr addrspace(3) %86, i64 196
  %156 = getelementptr i8, ptr addrspace(3) %86, i64 1092
  %157 = getelementptr i8, ptr addrspace(3) %86, i64 1220
  %158 = getelementptr i8, ptr addrspace(3) %86, i64 72
  %159 = getelementptr i8, ptr addrspace(3) %86, i64 200
  %160 = getelementptr i8, ptr addrspace(3) %86, i64 1096
  %161 = getelementptr i8, ptr addrspace(3) %86, i64 1224
  %162 = getelementptr i8, ptr addrspace(3) %86, i64 76
  %163 = getelementptr i8, ptr addrspace(3) %86, i64 204
  %164 = getelementptr i8, ptr addrspace(3) %86, i64 1100
  %165 = getelementptr i8, ptr addrspace(3) %86, i64 1228
  %166 = getelementptr i8, ptr addrspace(3) %86, i64 80
  %167 = getelementptr i8, ptr addrspace(3) %86, i64 208
  %168 = getelementptr i8, ptr addrspace(3) %86, i64 1104
  %169 = getelementptr i8, ptr addrspace(3) %86, i64 1232
  %170 = getelementptr i8, ptr addrspace(3) %86, i64 84
  %171 = getelementptr i8, ptr addrspace(3) %86, i64 212
  %172 = getelementptr i8, ptr addrspace(3) %86, i64 1108
  %173 = getelementptr i8, ptr addrspace(3) %86, i64 1236
  %174 = getelementptr i8, ptr addrspace(3) %86, i64 88
  %175 = getelementptr i8, ptr addrspace(3) %86, i64 216
  %176 = getelementptr i8, ptr addrspace(3) %86, i64 1112
  %177 = getelementptr i8, ptr addrspace(3) %86, i64 1240
  %178 = getelementptr i8, ptr addrspace(3) %86, i64 92
  %179 = getelementptr i8, ptr addrspace(3) %86, i64 220
  %180 = getelementptr i8, ptr addrspace(3) %86, i64 1116
  %181 = getelementptr i8, ptr addrspace(3) %86, i64 1244
  %182 = getelementptr i8, ptr addrspace(3) %86, i64 96
  %183 = getelementptr i8, ptr addrspace(3) %86, i64 224
  %184 = getelementptr i8, ptr addrspace(3) %86, i64 1120
  %185 = getelementptr i8, ptr addrspace(3) %86, i64 1248
  %186 = getelementptr i8, ptr addrspace(3) %86, i64 100
  %187 = getelementptr i8, ptr addrspace(3) %86, i64 228
  %188 = getelementptr i8, ptr addrspace(3) %86, i64 1124
  %189 = getelementptr i8, ptr addrspace(3) %86, i64 1252
  %190 = getelementptr i8, ptr addrspace(3) %86, i64 104
  %191 = getelementptr i8, ptr addrspace(3) %86, i64 232
  %192 = getelementptr i8, ptr addrspace(3) %86, i64 1128
  %193 = getelementptr i8, ptr addrspace(3) %86, i64 1256
  %194 = getelementptr i8, ptr addrspace(3) %86, i64 108
  %195 = getelementptr i8, ptr addrspace(3) %86, i64 236
  %196 = getelementptr i8, ptr addrspace(3) %86, i64 1132
  %197 = getelementptr i8, ptr addrspace(3) %86, i64 1260
  %198 = getelementptr i8, ptr addrspace(3) %86, i64 112
  %199 = getelementptr i8, ptr addrspace(3) %86, i64 240
  %200 = getelementptr i8, ptr addrspace(3) %86, i64 1136
  %201 = getelementptr i8, ptr addrspace(3) %86, i64 1264
  %202 = getelementptr i8, ptr addrspace(3) %86, i64 116
  %203 = getelementptr i8, ptr addrspace(3) %86, i64 244
  %204 = getelementptr i8, ptr addrspace(3) %86, i64 1140
  %205 = getelementptr i8, ptr addrspace(3) %86, i64 1268
  %206 = getelementptr i8, ptr addrspace(3) %86, i64 120
  %207 = getelementptr i8, ptr addrspace(3) %86, i64 248
  %208 = getelementptr i8, ptr addrspace(3) %86, i64 1144
  %209 = getelementptr i8, ptr addrspace(3) %86, i64 1272
  %210 = getelementptr i8, ptr addrspace(3) %86, i64 124
  %211 = getelementptr i8, ptr addrspace(3) %86, i64 252
  %212 = getelementptr i8, ptr addrspace(3) %86, i64 1148
  %213 = getelementptr i8, ptr addrspace(3) %86, i64 1276
  %214 = and i32 %21, 14
  %215 = zext nneg i32 %214 to i64
  %216 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %215
  %217 = getelementptr i8, ptr addrspace(3) %216, i64 64
  %218 = getelementptr i8, ptr addrspace(3) %216, i64 128
  %219 = getelementptr i8, ptr addrspace(3) %216, i64 192
  %220 = getelementptr i8, ptr addrspace(3) %216, i64 256
  %221 = getelementptr i8, ptr addrspace(3) %216, i64 320
  %222 = getelementptr i8, ptr addrspace(3) %216, i64 384
  %223 = getelementptr i8, ptr addrspace(3) %216, i64 448
  %224 = getelementptr i8, ptr addrspace(3) %216, i64 512
  %225 = getelementptr i8, ptr addrspace(3) %216, i64 576
  %226 = getelementptr i8, ptr addrspace(3) %216, i64 640
  %227 = getelementptr i8, ptr addrspace(3) %216, i64 704
  %228 = getelementptr i8, ptr addrspace(3) %216, i64 768
  %229 = getelementptr i8, ptr addrspace(3) %216, i64 832
  %230 = getelementptr i8, ptr addrspace(3) %216, i64 896
  %231 = getelementptr i8, ptr addrspace(3) %216, i64 960
  %232 = getelementptr i8, ptr addrspace(3) %216, i64 1024
  %233 = getelementptr i8, ptr addrspace(3) %216, i64 1088
  %234 = getelementptr i8, ptr addrspace(3) %216, i64 1152
  %235 = getelementptr i8, ptr addrspace(3) %216, i64 1216
  %236 = getelementptr i8, ptr addrspace(3) %216, i64 1280
  %237 = getelementptr i8, ptr addrspace(3) %216, i64 1344
  %238 = getelementptr i8, ptr addrspace(3) %216, i64 1408
  %239 = getelementptr i8, ptr addrspace(3) %216, i64 1472
  %240 = getelementptr i8, ptr addrspace(3) %216, i64 1536
  %241 = getelementptr i8, ptr addrspace(3) %216, i64 1600
  %242 = getelementptr i8, ptr addrspace(3) %216, i64 1664
  %243 = getelementptr i8, ptr addrspace(3) %216, i64 1728
  %244 = getelementptr i8, ptr addrspace(3) %216, i64 1792
  %245 = getelementptr i8, ptr addrspace(3) %216, i64 1856
  %246 = getelementptr i8, ptr addrspace(3) %216, i64 1920
  %247 = getelementptr i8, ptr addrspace(3) %216, i64 1984
  br label %248, !dbg !33

248:                                              ; preds = %3, %248
  %.pn4090 = phi ptr addrspace(1) [ %46, %3 ], [ %639, %248 ]
  %.pn4889 = phi ptr addrspace(1) [ %44, %3 ], [ %638, %248 ]
  %.pn5688 = phi ptr addrspace(1) [ %42, %3 ], [ %637, %248 ]
  %.pn6487 = phi ptr addrspace(1) [ %40, %3 ], [ %636, %248 ]
  %.pn486 = phi ptr addrspace(1) [ %26, %3 ], [ %635, %248 ]
  %249 = phi i1 [ true, %3 ], [ false, %248 ]
  %.neg = phi i32 [ 18, %3 ], [ -14, %248 ]
  %250 = phi <8 x float> [ zeroinitializer, %3 ], [ %634, %248 ]
  %251 = load float, ptr addrspace(3) %86, align 16, !dbg !31
  %252 = load float, ptr addrspace(3) %87, align 16, !dbg !31
  %253 = load float, ptr addrspace(3) %88, align 16, !dbg !31
  %254 = load float, ptr addrspace(3) %89, align 16, !dbg !31
  %255 = load float, ptr addrspace(3) %90, align 4, !dbg !31
  %256 = load float, ptr addrspace(3) %91, align 4, !dbg !31
  %257 = load float, ptr addrspace(3) %92, align 4, !dbg !31
  %258 = load float, ptr addrspace(3) %93, align 4, !dbg !31
  %259 = load float, ptr addrspace(3) %94, align 8, !dbg !31
  %260 = load float, ptr addrspace(3) %95, align 8, !dbg !31
  %261 = load float, ptr addrspace(3) %96, align 8, !dbg !31
  %262 = load float, ptr addrspace(3) %97, align 8, !dbg !31
  %263 = load float, ptr addrspace(3) %98, align 4, !dbg !31
  %264 = load float, ptr addrspace(3) %99, align 4, !dbg !31
  %265 = load float, ptr addrspace(3) %100, align 4, !dbg !31
  %266 = load float, ptr addrspace(3) %101, align 4, !dbg !31
  %267 = load float, ptr addrspace(3) %102, align 16, !dbg !31
  %268 = load float, ptr addrspace(3) %103, align 16, !dbg !31
  %269 = load float, ptr addrspace(3) %104, align 16, !dbg !31
  %270 = load float, ptr addrspace(3) %105, align 16, !dbg !31
  %271 = load float, ptr addrspace(3) %106, align 4, !dbg !31
  %272 = load float, ptr addrspace(3) %107, align 4, !dbg !31
  %273 = load float, ptr addrspace(3) %108, align 4, !dbg !31
  %274 = load float, ptr addrspace(3) %109, align 4, !dbg !31
  %275 = load float, ptr addrspace(3) %110, align 8, !dbg !31
  %276 = load float, ptr addrspace(3) %111, align 8, !dbg !31
  %277 = load float, ptr addrspace(3) %112, align 8, !dbg !31
  %278 = load float, ptr addrspace(3) %113, align 8, !dbg !31
  %279 = load float, ptr addrspace(3) %114, align 4, !dbg !31
  %280 = load float, ptr addrspace(3) %115, align 4, !dbg !31
  %281 = load float, ptr addrspace(3) %116, align 4, !dbg !31
  %282 = load float, ptr addrspace(3) %117, align 4, !dbg !31
  %283 = load float, ptr addrspace(3) %118, align 16, !dbg !31
  %284 = load float, ptr addrspace(3) %119, align 16, !dbg !31
  %285 = load float, ptr addrspace(3) %120, align 16, !dbg !31
  %286 = load float, ptr addrspace(3) %121, align 16, !dbg !31
  %287 = load float, ptr addrspace(3) %122, align 4, !dbg !31
  %288 = load float, ptr addrspace(3) %123, align 4, !dbg !31
  %289 = load float, ptr addrspace(3) %124, align 4, !dbg !31
  %290 = load float, ptr addrspace(3) %125, align 4, !dbg !31
  %291 = load float, ptr addrspace(3) %126, align 8, !dbg !31
  %292 = load float, ptr addrspace(3) %127, align 8, !dbg !31
  %293 = load float, ptr addrspace(3) %128, align 8, !dbg !31
  %294 = load float, ptr addrspace(3) %129, align 8, !dbg !31
  %295 = load float, ptr addrspace(3) %130, align 4, !dbg !31
  %296 = load float, ptr addrspace(3) %131, align 4, !dbg !31
  %297 = load float, ptr addrspace(3) %132, align 4, !dbg !31
  %298 = load float, ptr addrspace(3) %133, align 4, !dbg !31
  %299 = load float, ptr addrspace(3) %134, align 16, !dbg !31
  %300 = load float, ptr addrspace(3) %135, align 16, !dbg !31
  %301 = load float, ptr addrspace(3) %136, align 16, !dbg !31
  %302 = load float, ptr addrspace(3) %137, align 16, !dbg !31
  %303 = load float, ptr addrspace(3) %138, align 4, !dbg !31
  %304 = load float, ptr addrspace(3) %139, align 4, !dbg !31
  %305 = load float, ptr addrspace(3) %140, align 4, !dbg !31
  %306 = load float, ptr addrspace(3) %141, align 4, !dbg !31
  %307 = load float, ptr addrspace(3) %142, align 8, !dbg !31
  %308 = load float, ptr addrspace(3) %143, align 8, !dbg !31
  %309 = load float, ptr addrspace(3) %144, align 8, !dbg !31
  %310 = load float, ptr addrspace(3) %145, align 8, !dbg !31
  %311 = load float, ptr addrspace(3) %146, align 4, !dbg !31
  %312 = load float, ptr addrspace(3) %147, align 4, !dbg !31
  %313 = load float, ptr addrspace(3) %148, align 4, !dbg !31
  %314 = load float, ptr addrspace(3) %149, align 4, !dbg !31
  %315 = load float, ptr addrspace(3) %150, align 16, !dbg !31
  %316 = load float, ptr addrspace(3) %151, align 16, !dbg !31
  %317 = load float, ptr addrspace(3) %152, align 16, !dbg !31
  %318 = load float, ptr addrspace(3) %153, align 16, !dbg !31
  %319 = load float, ptr addrspace(3) %154, align 4, !dbg !31
  %320 = load float, ptr addrspace(3) %155, align 4, !dbg !31
  %321 = load float, ptr addrspace(3) %156, align 4, !dbg !31
  %322 = load float, ptr addrspace(3) %157, align 4, !dbg !31
  %323 = load float, ptr addrspace(3) %158, align 8, !dbg !31
  %324 = load float, ptr addrspace(3) %159, align 8, !dbg !31
  %325 = load float, ptr addrspace(3) %160, align 8, !dbg !31
  %326 = load float, ptr addrspace(3) %161, align 8, !dbg !31
  %327 = load float, ptr addrspace(3) %162, align 4, !dbg !31
  %328 = load float, ptr addrspace(3) %163, align 4, !dbg !31
  %329 = load float, ptr addrspace(3) %164, align 4, !dbg !31
  %330 = load float, ptr addrspace(3) %165, align 4, !dbg !31
  %331 = load float, ptr addrspace(3) %166, align 16, !dbg !31
  %332 = load float, ptr addrspace(3) %167, align 16, !dbg !31
  %333 = load float, ptr addrspace(3) %168, align 16, !dbg !31
  %334 = load float, ptr addrspace(3) %169, align 16, !dbg !31
  %335 = load float, ptr addrspace(3) %170, align 4, !dbg !31
  %336 = load float, ptr addrspace(3) %171, align 4, !dbg !31
  %337 = load float, ptr addrspace(3) %172, align 4, !dbg !31
  %338 = load float, ptr addrspace(3) %173, align 4, !dbg !31
  %339 = load float, ptr addrspace(3) %174, align 8, !dbg !31
  %340 = load float, ptr addrspace(3) %175, align 8, !dbg !31
  %341 = load float, ptr addrspace(3) %176, align 8, !dbg !31
  %342 = load float, ptr addrspace(3) %177, align 8, !dbg !31
  %343 = load float, ptr addrspace(3) %178, align 4, !dbg !31
  %344 = load float, ptr addrspace(3) %179, align 4, !dbg !31
  %345 = load float, ptr addrspace(3) %180, align 4, !dbg !31
  %346 = load float, ptr addrspace(3) %181, align 4, !dbg !31
  %347 = load float, ptr addrspace(3) %182, align 16, !dbg !31
  %348 = load float, ptr addrspace(3) %183, align 16, !dbg !31
  %349 = load float, ptr addrspace(3) %184, align 16, !dbg !31
  %350 = load float, ptr addrspace(3) %185, align 16, !dbg !31
  %351 = load float, ptr addrspace(3) %186, align 4, !dbg !31
  %352 = load float, ptr addrspace(3) %187, align 4, !dbg !31
  %353 = load float, ptr addrspace(3) %188, align 4, !dbg !31
  %354 = load float, ptr addrspace(3) %189, align 4, !dbg !31
  %355 = load float, ptr addrspace(3) %190, align 8, !dbg !31
  %356 = load float, ptr addrspace(3) %191, align 8, !dbg !31
  %357 = load float, ptr addrspace(3) %192, align 8, !dbg !31
  %358 = load float, ptr addrspace(3) %193, align 8, !dbg !31
  %359 = load float, ptr addrspace(3) %194, align 4, !dbg !31
  %360 = load float, ptr addrspace(3) %195, align 4, !dbg !31
  %361 = load float, ptr addrspace(3) %196, align 4, !dbg !31
  %362 = load float, ptr addrspace(3) %197, align 4, !dbg !31
  %363 = load float, ptr addrspace(3) %198, align 16, !dbg !31
  %364 = load float, ptr addrspace(3) %199, align 16, !dbg !31
  %365 = load float, ptr addrspace(3) %200, align 16, !dbg !31
  %366 = load float, ptr addrspace(3) %201, align 16, !dbg !31
  %367 = load float, ptr addrspace(3) %202, align 4, !dbg !31
  %368 = load float, ptr addrspace(3) %203, align 4, !dbg !31
  %369 = load float, ptr addrspace(3) %204, align 4, !dbg !31
  %370 = load float, ptr addrspace(3) %205, align 4, !dbg !31
  %371 = load float, ptr addrspace(3) %206, align 8, !dbg !31
  %372 = load float, ptr addrspace(3) %207, align 8, !dbg !31
  %373 = load float, ptr addrspace(3) %208, align 8, !dbg !31
  %374 = load float, ptr addrspace(3) %209, align 8, !dbg !31
  %375 = load float, ptr addrspace(3) %210, align 4, !dbg !31
  %376 = load float, ptr addrspace(3) %211, align 4, !dbg !31
  %377 = load float, ptr addrspace(3) %212, align 4, !dbg !31
  %378 = load float, ptr addrspace(3) %213, align 4, !dbg !31
  %379 = load <2 x float>, ptr addrspace(3) %216, align 8, !dbg !32
  %380 = shufflevector <2 x float> %379, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %381 = load <2 x float>, ptr addrspace(3) %217, align 8, !dbg !32
  %382 = shufflevector <2 x float> %381, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %383 = load <2 x float>, ptr addrspace(3) %218, align 8, !dbg !32
  %384 = shufflevector <2 x float> %383, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %385 = load <2 x float>, ptr addrspace(3) %219, align 8, !dbg !32
  %386 = shufflevector <2 x float> %385, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %387 = load <2 x float>, ptr addrspace(3) %220, align 8, !dbg !32
  %388 = shufflevector <2 x float> %387, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %389 = load <2 x float>, ptr addrspace(3) %221, align 8, !dbg !32
  %390 = shufflevector <2 x float> %389, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %391 = load <2 x float>, ptr addrspace(3) %222, align 8, !dbg !32
  %392 = shufflevector <2 x float> %391, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %393 = load <2 x float>, ptr addrspace(3) %223, align 8, !dbg !32
  %394 = shufflevector <2 x float> %393, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %395 = load <2 x float>, ptr addrspace(3) %224, align 8, !dbg !32
  %396 = shufflevector <2 x float> %395, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %397 = load <2 x float>, ptr addrspace(3) %225, align 8, !dbg !32
  %398 = shufflevector <2 x float> %397, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %399 = insertelement <8 x float> poison, float %251, i64 0, !dbg !34
  %400 = insertelement <8 x float> %399, float %252, i64 1, !dbg !34
  %401 = insertelement <8 x float> %400, float %253, i64 2, !dbg !34
  %402 = insertelement <8 x float> %401, float %254, i64 3, !dbg !34
  %403 = shufflevector <8 x float> %402, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %404 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %403, <8 x float> %380, <8 x float> %250), !dbg !34
  %405 = insertelement <8 x float> poison, float %255, i64 0, !dbg !34
  %406 = insertelement <8 x float> %405, float %256, i64 1, !dbg !34
  %407 = insertelement <8 x float> %406, float %257, i64 2, !dbg !34
  %408 = insertelement <8 x float> %407, float %258, i64 3, !dbg !34
  %409 = shufflevector <8 x float> %408, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %410 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %409, <8 x float> %382, <8 x float> %404), !dbg !34
  %411 = insertelement <8 x float> poison, float %259, i64 0, !dbg !34
  %412 = insertelement <8 x float> %411, float %260, i64 1, !dbg !34
  %413 = insertelement <8 x float> %412, float %261, i64 2, !dbg !34
  %414 = insertelement <8 x float> %413, float %262, i64 3, !dbg !34
  %415 = shufflevector <8 x float> %414, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %416 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %415, <8 x float> %384, <8 x float> %410), !dbg !34
  %417 = insertelement <8 x float> poison, float %263, i64 0, !dbg !34
  %418 = insertelement <8 x float> %417, float %264, i64 1, !dbg !34
  %419 = insertelement <8 x float> %418, float %265, i64 2, !dbg !34
  %420 = insertelement <8 x float> %419, float %266, i64 3, !dbg !34
  %421 = shufflevector <8 x float> %420, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %422 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %421, <8 x float> %386, <8 x float> %416), !dbg !34
  %423 = insertelement <8 x float> poison, float %267, i64 0, !dbg !34
  %424 = insertelement <8 x float> %423, float %268, i64 1, !dbg !34
  %425 = insertelement <8 x float> %424, float %269, i64 2, !dbg !34
  %426 = insertelement <8 x float> %425, float %270, i64 3, !dbg !34
  %427 = shufflevector <8 x float> %426, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %428 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %427, <8 x float> %388, <8 x float> %422), !dbg !34
  %429 = insertelement <8 x float> poison, float %271, i64 0, !dbg !34
  %430 = insertelement <8 x float> %429, float %272, i64 1, !dbg !34
  %431 = insertelement <8 x float> %430, float %273, i64 2, !dbg !34
  %432 = insertelement <8 x float> %431, float %274, i64 3, !dbg !34
  %433 = shufflevector <8 x float> %432, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %434 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %433, <8 x float> %390, <8 x float> %428), !dbg !34
  %435 = insertelement <8 x float> poison, float %275, i64 0, !dbg !34
  %436 = insertelement <8 x float> %435, float %276, i64 1, !dbg !34
  %437 = insertelement <8 x float> %436, float %277, i64 2, !dbg !34
  %438 = insertelement <8 x float> %437, float %278, i64 3, !dbg !34
  %439 = shufflevector <8 x float> %438, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %440 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %439, <8 x float> %392, <8 x float> %434), !dbg !34
  %441 = insertelement <8 x float> poison, float %279, i64 0, !dbg !34
  %442 = insertelement <8 x float> %441, float %280, i64 1, !dbg !34
  %443 = insertelement <8 x float> %442, float %281, i64 2, !dbg !34
  %444 = insertelement <8 x float> %443, float %282, i64 3, !dbg !34
  %445 = shufflevector <8 x float> %444, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %446 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %445, <8 x float> %394, <8 x float> %440), !dbg !34
  %447 = insertelement <8 x float> poison, float %283, i64 0, !dbg !34
  %448 = insertelement <8 x float> %447, float %284, i64 1, !dbg !34
  %449 = insertelement <8 x float> %448, float %285, i64 2, !dbg !34
  %450 = insertelement <8 x float> %449, float %286, i64 3, !dbg !34
  %451 = shufflevector <8 x float> %450, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %452 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %451, <8 x float> %396, <8 x float> %446), !dbg !34
  %453 = insertelement <8 x float> poison, float %287, i64 0, !dbg !34
  %454 = insertelement <8 x float> %453, float %288, i64 1, !dbg !34
  %455 = insertelement <8 x float> %454, float %289, i64 2, !dbg !34
  %456 = insertelement <8 x float> %455, float %290, i64 3, !dbg !34
  %457 = shufflevector <8 x float> %456, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %458 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %457, <8 x float> %398, <8 x float> %452), !dbg !34
  %459 = load <2 x float>, ptr addrspace(3) %226, align 8, !dbg !32
  %460 = shufflevector <2 x float> %459, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %461 = load <2 x float>, ptr addrspace(3) %227, align 8, !dbg !32
  %462 = shufflevector <2 x float> %461, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %463 = load <2 x float>, ptr addrspace(3) %228, align 8, !dbg !32
  %464 = shufflevector <2 x float> %463, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %465 = load <2 x float>, ptr addrspace(3) %229, align 8, !dbg !32
  %466 = shufflevector <2 x float> %465, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %467 = load <2 x float>, ptr addrspace(3) %230, align 8, !dbg !32
  %468 = shufflevector <2 x float> %467, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %469 = load <2 x float>, ptr addrspace(3) %231, align 8, !dbg !32
  %470 = shufflevector <2 x float> %469, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %471 = load <2 x float>, ptr addrspace(3) %232, align 8, !dbg !32
  %472 = shufflevector <2 x float> %471, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %473 = load <2 x float>, ptr addrspace(3) %233, align 8, !dbg !32
  %474 = shufflevector <2 x float> %473, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %475 = load <2 x float>, ptr addrspace(3) %234, align 8, !dbg !32
  %476 = shufflevector <2 x float> %475, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %477 = load <2 x float>, ptr addrspace(3) %235, align 8, !dbg !32
  %478 = shufflevector <2 x float> %477, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %479 = load <2 x float>, ptr addrspace(3) %236, align 8, !dbg !32
  %480 = shufflevector <2 x float> %479, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %481 = insertelement <8 x float> poison, float %291, i64 0, !dbg !34
  %482 = insertelement <8 x float> %481, float %292, i64 1, !dbg !34
  %483 = insertelement <8 x float> %482, float %293, i64 2, !dbg !34
  %484 = insertelement <8 x float> %483, float %294, i64 3, !dbg !34
  %485 = shufflevector <8 x float> %484, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %486 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %485, <8 x float> %460, <8 x float> %458), !dbg !34
  %487 = insertelement <8 x float> poison, float %295, i64 0, !dbg !34
  %488 = insertelement <8 x float> %487, float %296, i64 1, !dbg !34
  %489 = insertelement <8 x float> %488, float %297, i64 2, !dbg !34
  %490 = insertelement <8 x float> %489, float %298, i64 3, !dbg !34
  %491 = shufflevector <8 x float> %490, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %492 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %491, <8 x float> %462, <8 x float> %486), !dbg !34
  %493 = insertelement <8 x float> poison, float %299, i64 0, !dbg !34
  %494 = insertelement <8 x float> %493, float %300, i64 1, !dbg !34
  %495 = insertelement <8 x float> %494, float %301, i64 2, !dbg !34
  %496 = insertelement <8 x float> %495, float %302, i64 3, !dbg !34
  %497 = shufflevector <8 x float> %496, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %498 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %497, <8 x float> %464, <8 x float> %492), !dbg !34
  %499 = insertelement <8 x float> poison, float %303, i64 0, !dbg !34
  %500 = insertelement <8 x float> %499, float %304, i64 1, !dbg !34
  %501 = insertelement <8 x float> %500, float %305, i64 2, !dbg !34
  %502 = insertelement <8 x float> %501, float %306, i64 3, !dbg !34
  %503 = shufflevector <8 x float> %502, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %504 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %503, <8 x float> %466, <8 x float> %498), !dbg !34
  %505 = insertelement <8 x float> poison, float %307, i64 0, !dbg !34
  %506 = insertelement <8 x float> %505, float %308, i64 1, !dbg !34
  %507 = insertelement <8 x float> %506, float %309, i64 2, !dbg !34
  %508 = insertelement <8 x float> %507, float %310, i64 3, !dbg !34
  %509 = shufflevector <8 x float> %508, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %510 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %509, <8 x float> %468, <8 x float> %504), !dbg !34
  %511 = insertelement <8 x float> poison, float %311, i64 0, !dbg !34
  %512 = insertelement <8 x float> %511, float %312, i64 1, !dbg !34
  %513 = insertelement <8 x float> %512, float %313, i64 2, !dbg !34
  %514 = insertelement <8 x float> %513, float %314, i64 3, !dbg !34
  %515 = shufflevector <8 x float> %514, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %516 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %515, <8 x float> %470, <8 x float> %510), !dbg !34
  %517 = insertelement <8 x float> poison, float %315, i64 0, !dbg !34
  %518 = insertelement <8 x float> %517, float %316, i64 1, !dbg !34
  %519 = insertelement <8 x float> %518, float %317, i64 2, !dbg !34
  %520 = insertelement <8 x float> %519, float %318, i64 3, !dbg !34
  %521 = shufflevector <8 x float> %520, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %522 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %521, <8 x float> %472, <8 x float> %516), !dbg !34
  %523 = insertelement <8 x float> poison, float %319, i64 0, !dbg !34
  %524 = insertelement <8 x float> %523, float %320, i64 1, !dbg !34
  %525 = insertelement <8 x float> %524, float %321, i64 2, !dbg !34
  %526 = insertelement <8 x float> %525, float %322, i64 3, !dbg !34
  %527 = shufflevector <8 x float> %526, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %528 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %527, <8 x float> %474, <8 x float> %522), !dbg !34
  %529 = insertelement <8 x float> poison, float %323, i64 0, !dbg !34
  %530 = insertelement <8 x float> %529, float %324, i64 1, !dbg !34
  %531 = insertelement <8 x float> %530, float %325, i64 2, !dbg !34
  %532 = insertelement <8 x float> %531, float %326, i64 3, !dbg !34
  %533 = shufflevector <8 x float> %532, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %534 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %533, <8 x float> %476, <8 x float> %528), !dbg !34
  %535 = insertelement <8 x float> poison, float %327, i64 0, !dbg !34
  %536 = insertelement <8 x float> %535, float %328, i64 1, !dbg !34
  %537 = insertelement <8 x float> %536, float %329, i64 2, !dbg !34
  %538 = insertelement <8 x float> %537, float %330, i64 3, !dbg !34
  %539 = shufflevector <8 x float> %538, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %540 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %539, <8 x float> %478, <8 x float> %534), !dbg !34
  %541 = insertelement <8 x float> poison, float %331, i64 0, !dbg !34
  %542 = insertelement <8 x float> %541, float %332, i64 1, !dbg !34
  %543 = insertelement <8 x float> %542, float %333, i64 2, !dbg !34
  %544 = insertelement <8 x float> %543, float %334, i64 3, !dbg !34
  %545 = shufflevector <8 x float> %544, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %546 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %545, <8 x float> %480, <8 x float> %540), !dbg !34
  %547 = load <2 x float>, ptr addrspace(3) %237, align 8, !dbg !32
  %548 = shufflevector <2 x float> %547, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %549 = load <2 x float>, ptr addrspace(3) %238, align 8, !dbg !32
  %550 = shufflevector <2 x float> %549, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %551 = load <2 x float>, ptr addrspace(3) %239, align 8, !dbg !32
  %552 = shufflevector <2 x float> %551, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %553 = load <2 x float>, ptr addrspace(3) %240, align 8, !dbg !32
  %554 = shufflevector <2 x float> %553, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %555 = load <2 x float>, ptr addrspace(3) %241, align 8, !dbg !32
  %556 = shufflevector <2 x float> %555, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %557 = load <2 x float>, ptr addrspace(3) %242, align 8, !dbg !32
  %558 = shufflevector <2 x float> %557, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %559 = load <2 x float>, ptr addrspace(3) %243, align 8, !dbg !32
  %560 = shufflevector <2 x float> %559, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %561 = load <2 x float>, ptr addrspace(3) %244, align 8, !dbg !32
  %562 = shufflevector <2 x float> %561, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %563 = load <2 x float>, ptr addrspace(3) %245, align 8, !dbg !32
  %564 = shufflevector <2 x float> %563, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %565 = load <2 x float>, ptr addrspace(3) %246, align 8, !dbg !32
  %566 = shufflevector <2 x float> %565, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %567 = load <2 x float>, ptr addrspace(3) %247, align 8, !dbg !32
  %568 = shufflevector <2 x float> %567, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %569 = insertelement <8 x float> poison, float %335, i64 0, !dbg !34
  %570 = insertelement <8 x float> %569, float %336, i64 1, !dbg !34
  %571 = insertelement <8 x float> %570, float %337, i64 2, !dbg !34
  %572 = insertelement <8 x float> %571, float %338, i64 3, !dbg !34
  %573 = shufflevector <8 x float> %572, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %574 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %573, <8 x float> %548, <8 x float> %546), !dbg !34
  %575 = insertelement <8 x float> poison, float %339, i64 0, !dbg !34
  %576 = insertelement <8 x float> %575, float %340, i64 1, !dbg !34
  %577 = insertelement <8 x float> %576, float %341, i64 2, !dbg !34
  %578 = insertelement <8 x float> %577, float %342, i64 3, !dbg !34
  %579 = shufflevector <8 x float> %578, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %580 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %579, <8 x float> %550, <8 x float> %574), !dbg !34
  %581 = insertelement <8 x float> poison, float %343, i64 0, !dbg !34
  %582 = insertelement <8 x float> %581, float %344, i64 1, !dbg !34
  %583 = insertelement <8 x float> %582, float %345, i64 2, !dbg !34
  %584 = insertelement <8 x float> %583, float %346, i64 3, !dbg !34
  %585 = shufflevector <8 x float> %584, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %586 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %585, <8 x float> %552, <8 x float> %580), !dbg !34
  %587 = insertelement <8 x float> poison, float %347, i64 0, !dbg !34
  %588 = insertelement <8 x float> %587, float %348, i64 1, !dbg !34
  %589 = insertelement <8 x float> %588, float %349, i64 2, !dbg !34
  %590 = insertelement <8 x float> %589, float %350, i64 3, !dbg !34
  %591 = shufflevector <8 x float> %590, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %592 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %591, <8 x float> %554, <8 x float> %586), !dbg !34
  %593 = insertelement <8 x float> poison, float %351, i64 0, !dbg !34
  %594 = insertelement <8 x float> %593, float %352, i64 1, !dbg !34
  %595 = insertelement <8 x float> %594, float %353, i64 2, !dbg !34
  %596 = insertelement <8 x float> %595, float %354, i64 3, !dbg !34
  %597 = shufflevector <8 x float> %596, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %598 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %597, <8 x float> %556, <8 x float> %592), !dbg !34
  %599 = insertelement <8 x float> poison, float %355, i64 0, !dbg !34
  %600 = insertelement <8 x float> %599, float %356, i64 1, !dbg !34
  %601 = insertelement <8 x float> %600, float %357, i64 2, !dbg !34
  %602 = insertelement <8 x float> %601, float %358, i64 3, !dbg !34
  %603 = shufflevector <8 x float> %602, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %604 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %603, <8 x float> %558, <8 x float> %598), !dbg !34
  %605 = insertelement <8 x float> poison, float %359, i64 0, !dbg !34
  %606 = insertelement <8 x float> %605, float %360, i64 1, !dbg !34
  %607 = insertelement <8 x float> %606, float %361, i64 2, !dbg !34
  %608 = insertelement <8 x float> %607, float %362, i64 3, !dbg !34
  %609 = shufflevector <8 x float> %608, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %610 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %609, <8 x float> %560, <8 x float> %604), !dbg !34
  %611 = insertelement <8 x float> poison, float %363, i64 0, !dbg !34
  %612 = insertelement <8 x float> %611, float %364, i64 1, !dbg !34
  %613 = insertelement <8 x float> %612, float %365, i64 2, !dbg !34
  %614 = insertelement <8 x float> %613, float %366, i64 3, !dbg !34
  %615 = shufflevector <8 x float> %614, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %616 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %615, <8 x float> %562, <8 x float> %610), !dbg !34
  %617 = insertelement <8 x float> poison, float %367, i64 0, !dbg !34
  %618 = insertelement <8 x float> %617, float %368, i64 1, !dbg !34
  %619 = insertelement <8 x float> %618, float %369, i64 2, !dbg !34
  %620 = insertelement <8 x float> %619, float %370, i64 3, !dbg !34
  %621 = shufflevector <8 x float> %620, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %622 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %621, <8 x float> %564, <8 x float> %616), !dbg !34
  %623 = insertelement <8 x float> poison, float %371, i64 0, !dbg !34
  %624 = insertelement <8 x float> %623, float %372, i64 1, !dbg !34
  %625 = insertelement <8 x float> %624, float %373, i64 2, !dbg !34
  %626 = insertelement <8 x float> %625, float %374, i64 3, !dbg !34
  %627 = shufflevector <8 x float> %626, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %628 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %627, <8 x float> %566, <8 x float> %622), !dbg !34
  %629 = insertelement <8 x float> poison, float %375, i64 0, !dbg !34
  %630 = insertelement <8 x float> %629, float %376, i64 1, !dbg !34
  %631 = insertelement <8 x float> %630, float %377, i64 2, !dbg !34
  %632 = insertelement <8 x float> %631, float %378, i64 3, !dbg !34
  %633 = shufflevector <8 x float> %632, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %634 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %633, <8 x float> %568, <8 x float> %628), !dbg !34
  %635 = getelementptr i8, ptr addrspace(1) %.pn486, i64 128, !dbg !35
  %636 = getelementptr i8, ptr addrspace(1) %.pn6487, i64 2048, !dbg !36
  %637 = getelementptr i8, ptr addrspace(1) %.pn5688, i64 2048, !dbg !36
  %638 = getelementptr i8, ptr addrspace(1) %.pn4889, i64 2048, !dbg !36
  %639 = getelementptr i8, ptr addrspace(1) %.pn4090, i64 2048, !dbg !36
  %640 = icmp slt i32 %22, %.neg, !dbg !37
  %641 = and i1 %249, %640, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %642 = select i1 %641, i32 8, i32 0, !dbg !31
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %49, ptr addrspace(1) %635, i32 %642, i1 true) #3, !dbg !31
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %52, ptr addrspace(1) %635, i32 %642, i1 true) #3, !dbg !31
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %55, ptr addrspace(1) %635, i32 %642, i1 true) #3, !dbg !31
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %58, ptr addrspace(1) %635, i32 %642, i1 true) #3, !dbg !31
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %61, ptr addrspace(1) %635, i32 %642, i1 true) #3, !dbg !31
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %64, ptr addrspace(1) %635, i32 %642, i1 true) #3, !dbg !31
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %67, ptr addrspace(1) %635, i32 %642, i1 true) #3, !dbg !31
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %70, ptr addrspace(1) %635, i32 %642, i1 true) #3, !dbg !31
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !31
  %643 = icmp slt i32 %17, %.neg, !dbg !38
  %644 = icmp slt i32 %27, %.neg, !dbg !38
  %645 = and i1 %249, %643, !dbg !33
  %646 = and i1 %249, %644, !dbg !33
  %647 = select i1 %249, i32 16, i32 0, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %73, ptr addrspace(1) %636, i32 %647, i1 true) #3, !dbg !32
  %648 = select i1 %645, i32 16, i32 0, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %76, ptr addrspace(1) %637, i32 %648, i1 true) #3, !dbg !32
  %649 = select i1 %646, i32 16, i32 0, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %79, ptr addrspace(1) %638, i32 %649, i1 true) #3, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %82, ptr addrspace(1) %639, i32 0, i1 true) #3, !dbg !32
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !32
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  br i1 %249, label %248, label %650, !dbg !33

650:                                              ; preds = %248
  %651 = srem i32 %4, %8, !dbg !39
  %652 = add i32 %651, %6, !dbg !40
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %653 = shl i32 %652, 4, !dbg !41
  %654 = or disjoint i32 %653, %16, !dbg !42
  %655 = or disjoint i32 %653, %17, !dbg !42
  %656 = icmp slt i32 %654, 1, !dbg !43
  %657 = icmp slt i32 %655, 1, !dbg !43
  %658 = icmp slt i32 %18, 16, !dbg !44
  %659 = and i1 %658, %656, !dbg !45
  %660 = and i1 %658, %657, !dbg !45
  %661 = shl i32 %20, 4, !dbg !46
  %662 = add i32 %18, %661, !dbg !47
  %663 = sext i32 %662 to i64, !dbg !48
  %664 = getelementptr float, ptr addrspace(1) %2, i64 %663, !dbg !48
  %665 = and i32 %15, 6, !dbg !49
  %666 = mul nuw nsw i32 %665, 20, !dbg !49
  %667 = add nuw nsw i32 %666, %214, !dbg !49
  %668 = zext nneg i32 %667 to i64, !dbg !49
  %669 = getelementptr float, ptr addrspace(3) @global_smem, i64 %668, !dbg !49
  %670 = shufflevector <8 x float> %634, <8 x float> poison, <2 x i32> <i32 0, i32 1>, !dbg !49
  store <2 x float> %670, ptr addrspace(3) %669, align 8, !dbg !49
  %671 = getelementptr i8, ptr addrspace(3) %669, i64 80, !dbg !49
  %672 = shufflevector <8 x float> %634, <8 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !49
  store <2 x float> %672, ptr addrspace(3) %671, align 8, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %673 = mul nuw nsw i32 %16, 20, !dbg !49
  %674 = add nuw nsw i32 %673, %14, !dbg !49
  %675 = zext nneg i32 %674 to i64, !dbg !49
  %676 = getelementptr float, ptr addrspace(3) @global_smem, i64 %675, !dbg !49
  %677 = load <4 x i32>, ptr addrspace(3) %676, align 16, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %678 = shufflevector <8 x float> %634, <8 x float> poison, <2 x i32> <i32 4, i32 5>, !dbg !49
  store <2 x float> %678, ptr addrspace(3) %669, align 8, !dbg !49
  %679 = shufflevector <8 x float> %634, <8 x float> poison, <2 x i32> <i32 6, i32 7>, !dbg !49
  store <2 x float> %679, ptr addrspace(3) %671, align 8, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %680 = load <4 x i32>, ptr addrspace(3) %676, align 16, !dbg !49
  %.extract = extractelement <4 x i32> %677, i64 0, !dbg !49
  %.extract66 = extractelement <4 x i32> %677, i64 1, !dbg !49
  %.extract68 = extractelement <4 x i32> %677, i64 2, !dbg !49
  %.extract70 = extractelement <4 x i32> %677, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract66, i32 %.extract68, i32 %.extract70, ptr addrspace(1) %664, i1 %659) #3, !dbg !49
  %.extract72 = extractelement <4 x i32> %680, i64 0, !dbg !49
  %.extract74 = extractelement <4 x i32> %680, i64 1, !dbg !49
  %.extract76 = extractelement <4 x i32> %680, i64 2, !dbg !49
  %.extract78 = extractelement <4 x i32> %680, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract72, i32 %.extract74, i32 %.extract76, i32 %.extract78, ptr addrspace(1) %664, i1 %660) #3, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <8 x float> @llvm.fmuladd.v8f32(<8 x float>, <8 x float>, <8 x float>) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cd5i5kz2cnfyhueqymsc7mdzon5m3n4ly7iaeb2aaycl4kyuzymm.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu_torch260/d5")
!4 = !{ptr @triton_bmm, !"kernel", i32 1}
!5 = !{ptr @triton_bmm, !"maxntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_bmm", linkageName: "triton_bmm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 43, column: 24, scope: !7)
!11 = !DILocation(line: 49, column: 22, scope: !7)
!12 = !DILocation(line: 50, column: 41, scope: !7)
!13 = !DILocation(line: 50, column: 30, scope: !7)
!14 = !DILocation(line: 50, column: 50, scope: !7)
!15 = !DILocation(line: 52, column: 30, scope: !7)
!16 = !DILocation(line: 55, column: 17, scope: !7)
!17 = !DILocation(line: 55, column: 40, scope: !7)
!18 = !DILocation(line: 55, column: 27, scope: !7)
!19 = !DILocation(line: 61, column: 52, scope: !7)
!20 = !DILocation(line: 67, column: 26, scope: !7)
!21 = !DILocation(line: 68, column: 43, scope: !7)
!22 = !DILocation(line: 68, column: 72, scope: !7)
!23 = !DILocation(line: 68, column: 66, scope: !7)
!24 = !DILocation(line: 68, column: 13, scope: !7)
!25 = !DILocation(line: 69, column: 16, scope: !7)
!26 = !DILocation(line: 69, column: 27, scope: !7)
!27 = !DILocation(line: 69, column: 72, scope: !7)
!28 = !DILocation(line: 69, column: 39, scope: !7)
!29 = !DILocation(line: 69, column: 66, scope: !7)
!30 = !DILocation(line: 69, column: 13, scope: !7)
!31 = !DILocation(line: 77, column: 24, scope: !7)
!32 = !DILocation(line: 78, column: 24, scope: !7)
!33 = !DILocation(line: 72, column: 25, scope: !7)
!34 = !DILocation(line: 79, column: 25, scope: !7)
!35 = !DILocation(line: 80, column: 13, scope: !7)
!36 = !DILocation(line: 81, column: 13, scope: !7)
!37 = !DILocation(line: 77, column: 46, scope: !7)
!38 = !DILocation(line: 78, column: 46, scope: !7)
!39 = !DILocation(line: 51, column: 40, scope: !7)
!40 = !DILocation(line: 51, column: 34, scope: !7)
!41 = !DILocation(line: 84, column: 17, scope: !7)
!42 = !DILocation(line: 84, column: 27, scope: !7)
!43 = !DILocation(line: 89, column: 20, scope: !7)
!44 = !DILocation(line: 89, column: 34, scope: !7)
!45 = !DILocation(line: 89, column: 26, scope: !7)
!46 = !DILocation(line: 93, column: 53, scope: !7)
!47 = !DILocation(line: 93, column: 50, scope: !7)
!48 = !DILocation(line: 93, column: 25, scope: !7)
!49 = !DILocation(line: 93, column: 79, scope: !7)
!50 = !DILocation(line: 93, column: 4, scope: !7)

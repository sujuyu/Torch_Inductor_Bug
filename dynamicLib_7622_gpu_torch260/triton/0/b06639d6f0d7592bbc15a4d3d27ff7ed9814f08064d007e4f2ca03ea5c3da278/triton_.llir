; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = and i32 %6, 127, !dbg !12
  %10 = or disjoint i32 %9, 128, !dbg !12
  %11 = or disjoint i32 %9, 256, !dbg !12
  %12 = or disjoint i32 %9, 384, !dbg !12
  %13 = or disjoint i32 %5, %8, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %17 = or disjoint i32 %13, 512, !dbg !13
  %18 = or disjoint i32 %13, 513, !dbg !13
  %19 = or disjoint i32 %13, 514, !dbg !13
  %20 = or disjoint i32 %13, 515, !dbg !13
  %21 = or disjoint i32 %5, %9, !dbg !13
  %22 = or disjoint i32 %5, %10, !dbg !13
  %23 = or disjoint i32 %5, %11, !dbg !13
  %24 = or disjoint i32 %5, %12, !dbg !13
  %25 = or disjoint i32 %21, 512, !dbg !13
  %26 = or disjoint i32 %21, 640, !dbg !13
  %27 = or disjoint i32 %21, 768, !dbg !13
  %28 = or disjoint i32 %21, 896, !dbg !13
  %29 = icmp slt i32 %13, %2, !dbg !14
  %30 = icmp slt i32 %14, %2, !dbg !14
  %31 = icmp slt i32 %15, %2, !dbg !14
  %32 = icmp slt i32 %16, %2, !dbg !14
  %33 = icmp slt i32 %17, %2, !dbg !14
  %34 = icmp slt i32 %18, %2, !dbg !14
  %35 = icmp slt i32 %19, %2, !dbg !14
  %36 = icmp slt i32 %20, %2, !dbg !14
  %37 = icmp slt i32 %21, %2, !dbg !14
  %38 = icmp slt i32 %22, %2, !dbg !14
  %39 = icmp slt i32 %23, %2, !dbg !14
  %40 = icmp slt i32 %24, %2, !dbg !14
  %41 = icmp slt i32 %25, %2, !dbg !14
  %42 = icmp slt i32 %26, %2, !dbg !14
  %43 = icmp slt i32 %27, %2, !dbg !14
  %44 = icmp slt i32 %28, %2, !dbg !14
  %.frozen = freeze i32 %21
  %45 = sdiv i32 %.frozen, 220, !dbg !15
  %46 = mul i32 %45, 220
  %.decomposed = sub i32 %.frozen, %46
  %.frozen1 = freeze i32 %22
  %47 = sdiv i32 %.frozen1, 220, !dbg !15
  %48 = mul i32 %47, 220
  %.decomposed2 = sub i32 %.frozen1, %48
  %.frozen3 = freeze i32 %23
  %49 = sdiv i32 %.frozen3, 220, !dbg !15
  %50 = mul i32 %49, 220
  %.decomposed4 = sub i32 %.frozen3, %50
  %.frozen5 = freeze i32 %24
  %51 = sdiv i32 %.frozen5, 220, !dbg !15
  %52 = mul i32 %51, 220
  %.decomposed6 = sub i32 %.frozen5, %52
  %.frozen7 = freeze i32 %25
  %53 = sdiv i32 %.frozen7, 220, !dbg !15
  %54 = mul i32 %53, 220
  %.decomposed8 = sub i32 %.frozen7, %54
  %.frozen9 = freeze i32 %26
  %55 = sdiv i32 %.frozen9, 220, !dbg !15
  %56 = mul i32 %55, 220
  %.decomposed10 = sub i32 %.frozen9, %56
  %.frozen11 = freeze i32 %27
  %57 = sdiv i32 %.frozen11, 220, !dbg !15
  %58 = mul i32 %57, 220
  %.decomposed12 = sub i32 %.frozen11, %58
  %.frozen13 = freeze i32 %28
  %59 = sdiv i32 %.frozen13, 220, !dbg !15
  %60 = mul i32 %59, 220
  %.decomposed14 = sub i32 %.frozen13, %60
  %61 = sext i32 %13 to i64, !dbg !16
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !16
  %63 = sext i32 %14 to i64, !dbg !16
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !16
  %65 = sext i32 %15 to i64, !dbg !16
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !16
  %67 = sext i32 %16 to i64, !dbg !16
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !16
  %69 = sext i32 %17 to i64, !dbg !16
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !16
  %71 = sext i32 %18 to i64, !dbg !16
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !16
  %73 = sext i32 %19 to i64, !dbg !16
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !16
  %75 = sext i32 %20 to i64, !dbg !16
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !16
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %29) #2, !dbg !17
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %30) #2, !dbg !17
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %31) #2, !dbg !17
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %32) #2, !dbg !17
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %33) #2, !dbg !17
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %34) #2, !dbg !17
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %35) #2, !dbg !17
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %36) #2, !dbg !17
  %85 = mul i32 %45, 1872, !dbg !18
  %86 = mul i32 %47, 1872, !dbg !18
  %87 = mul i32 %49, 1872, !dbg !18
  %88 = mul i32 %51, 1872, !dbg !18
  %89 = mul i32 %53, 1872, !dbg !18
  %90 = mul i32 %55, 1872, !dbg !18
  %91 = mul i32 %57, 1872, !dbg !18
  %92 = mul i32 %59, 1872, !dbg !18
  %93 = add i32 %85, %.decomposed, !dbg !19
  %94 = add i32 %86, %.decomposed2, !dbg !19
  %95 = add i32 %87, %.decomposed4, !dbg !19
  %96 = add i32 %88, %.decomposed6, !dbg !19
  %97 = add i32 %89, %.decomposed8, !dbg !19
  %98 = add i32 %90, %.decomposed10, !dbg !19
  %99 = add i32 %91, %.decomposed12, !dbg !19
  %100 = add i32 %92, %.decomposed14, !dbg !19
  %101 = sext i32 %93 to i64, !dbg !20
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !20
  %103 = sext i32 %94 to i64, !dbg !20
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !20
  %105 = sext i32 %95 to i64, !dbg !20
  %106 = getelementptr float, ptr addrspace(1) %1, i64 %105, !dbg !20
  %107 = sext i32 %96 to i64, !dbg !20
  %108 = getelementptr float, ptr addrspace(1) %1, i64 %107, !dbg !20
  %109 = sext i32 %97 to i64, !dbg !20
  %110 = getelementptr float, ptr addrspace(1) %1, i64 %109, !dbg !20
  %111 = sext i32 %98 to i64, !dbg !20
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %111, !dbg !20
  %113 = sext i32 %99 to i64, !dbg !20
  %114 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !20
  %115 = sext i32 %100 to i64, !dbg !20
  %116 = getelementptr float, ptr addrspace(1) %1, i64 %115, !dbg !20
  %117 = shl nuw nsw i32 %9, 2, !dbg !21
  %118 = zext nneg i32 %117 to i64, !dbg !21
  %119 = getelementptr float, ptr addrspace(3) @global_smem, i64 %118, !dbg !21
  %120 = insertelement <4 x i32> poison, i32 %77, i64 0, !dbg !21
  %121 = insertelement <4 x i32> %120, i32 %78, i64 1, !dbg !21
  %122 = insertelement <4 x i32> %121, i32 %79, i64 2, !dbg !21
  %123 = insertelement <4 x i32> %122, i32 %80, i64 3, !dbg !21
  store <4 x i32> %123, ptr addrspace(3) %119, align 16, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %124 = zext nneg i32 %9 to i64, !dbg !21
  %125 = getelementptr float, ptr addrspace(3) @global_smem, i64 %124, !dbg !21
  %126 = load i32, ptr addrspace(3) %125, align 4, !dbg !21
  %127 = zext nneg i32 %10 to i64, !dbg !21
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i64 %127, !dbg !21
  %129 = load i32, ptr addrspace(3) %128, align 4, !dbg !21
  %130 = zext nneg i32 %11 to i64, !dbg !21
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i64 %130, !dbg !21
  %132 = load i32, ptr addrspace(3) %131, align 4, !dbg !21
  %133 = zext nneg i32 %12 to i64, !dbg !21
  %134 = getelementptr float, ptr addrspace(3) @global_smem, i64 %133, !dbg !21
  %135 = load i32, ptr addrspace(3) %134, align 4, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %136 = insertelement <4 x i32> poison, i32 %81, i64 0, !dbg !21
  %137 = insertelement <4 x i32> %136, i32 %82, i64 1, !dbg !21
  %138 = insertelement <4 x i32> %137, i32 %83, i64 2, !dbg !21
  %139 = insertelement <4 x i32> %138, i32 %84, i64 3, !dbg !21
  store <4 x i32> %139, ptr addrspace(3) %119, align 16, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %140 = load i32, ptr addrspace(3) %125, align 4, !dbg !21
  %141 = load i32, ptr addrspace(3) %128, align 4, !dbg !21
  %142 = load i32, ptr addrspace(3) %131, align 4, !dbg !21
  %143 = load i32, ptr addrspace(3) %134, align 4, !dbg !21
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %126, ptr addrspace(1) %102, i1 %37) #2, !dbg !21
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %129, ptr addrspace(1) %104, i1 %38) #2, !dbg !21
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %132, ptr addrspace(1) %106, i1 %39) #2, !dbg !21
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %135, ptr addrspace(1) %108, i1 %40) #2, !dbg !21
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %140, ptr addrspace(1) %110, i1 %41) #2, !dbg !21
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %141, ptr addrspace(1) %112, i1 %42) #2, !dbg !21
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %142, ptr addrspace(1) %114, i1 %43) #2, !dbg !21
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %143, ptr addrspace(1) %116, i1 %44) #2, !dbg !21
  ret void, !dbg !22
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqiwarv76v36pxm4m4casilxrt2hjladpat5tizmhz6erjqghw6f.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu_torch260/qi")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 19, column: 28, scope: !7)
!11 = !DILocation(line: 19, column: 33, scope: !7)
!12 = !DILocation(line: 20, column: 36, scope: !7)
!13 = !DILocation(line: 20, column: 23, scope: !7)
!14 = !DILocation(line: 21, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 20, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 35, scope: !7)
!18 = !DILocation(line: 26, column: 36, scope: !7)
!19 = !DILocation(line: 26, column: 31, scope: !7)
!20 = !DILocation(line: 26, column: 25, scope: !7)
!21 = !DILocation(line: 26, column: 48, scope: !7)
!22 = !DILocation(line: 26, column: 4, scope: !7)

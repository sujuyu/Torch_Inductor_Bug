; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #4, !dbg !11
  %11 = tail call i32 asm "mov.u32 $0, %nctaid.y;", "=r"() #4, !dbg !12
  %12 = mul i32 %11, %10, !dbg !13
  %13 = add i32 %12, %9, !dbg !14
  %14 = shl i32 %13, 8, !dbg !15
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !16
  %16 = shl i32 %15, 2, !dbg !16
  %17 = and i32 %16, 252, !dbg !16
  %18 = lshr i32 %15, 3, !dbg !16
  %19 = and i32 %18, 31, !dbg !16
  %20 = and i32 %15, 255, !dbg !16
  %21 = or disjoint i32 %14, %17, !dbg !17
  %22 = or disjoint i32 %14, %19, !dbg !17
  %23 = or disjoint i32 %22, 32, !dbg !17
  %24 = or disjoint i32 %22, 64, !dbg !17
  %25 = or disjoint i32 %22, 96, !dbg !17
  %26 = or disjoint i32 %22, 128, !dbg !17
  %27 = or disjoint i32 %22, 160, !dbg !17
  %28 = or disjoint i32 %22, 192, !dbg !17
  %29 = or disjoint i32 %22, 224, !dbg !17
  %30 = or disjoint i32 %14, %20, !dbg !17
  %31 = icmp slt i32 %21, %6, !dbg !18
  %32 = icmp slt i32 %22, %6, !dbg !18
  %33 = icmp slt i32 %23, %6, !dbg !18
  %34 = icmp slt i32 %24, %6, !dbg !18
  %35 = icmp slt i32 %25, %6, !dbg !18
  %36 = icmp slt i32 %26, %6, !dbg !18
  %37 = icmp slt i32 %27, %6, !dbg !18
  %38 = icmp slt i32 %28, %6, !dbg !18
  %39 = icmp slt i32 %29, %6, !dbg !18
  %40 = icmp slt i32 %30, %6, !dbg !18
  %41 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !19
  %42 = shl i32 %41, 4, !dbg !20
  %.lobit248 = lshr i32 %15, 6, !dbg !21
  %43 = and i32 %.lobit248, 3, !dbg !21
  %44 = shl i32 %15, 1, !dbg !21
  %45 = and i32 %44, 14, !dbg !21
  %46 = or disjoint i32 %42, %43, !dbg !22
  %47 = or disjoint i32 %46, 4, !dbg !22
  %48 = or disjoint i32 %46, 8, !dbg !22
  %49 = or disjoint i32 %46, 12, !dbg !22
  %50 = or disjoint i32 %42, %45, !dbg !22
  %51 = icmp slt i32 %46, 50, !dbg !23
  %52 = icmp slt i32 %47, 50, !dbg !23
  %53 = icmp slt i32 %48, 50, !dbg !23
  %54 = icmp slt i32 %49, 50, !dbg !23
  %55 = icmp slt i32 %50, 50, !dbg !23
  %.frozen = freeze i32 %21
  %56 = sdiv i32 %.frozen, 128, !dbg !24
  %57 = sdiv i32 %22, 128, !dbg !24
  %58 = sdiv i32 %23, 128, !dbg !24
  %59 = sdiv i32 %24, 128, !dbg !24
  %60 = sdiv i32 %25, 128, !dbg !24
  %61 = sdiv i32 %26, 128, !dbg !24
  %62 = sdiv i32 %27, 128, !dbg !24
  %63 = sdiv i32 %28, 128, !dbg !24
  %64 = sdiv i32 %29, 128, !dbg !24
  %65 = mul i32 %56, 128
  %.decomposed = sub i32 %.frozen, %65
  %66 = sdiv i32 %22, 16, !dbg !25
  %67 = sdiv i32 %23, 16, !dbg !25
  %68 = sdiv i32 %24, 16, !dbg !25
  %69 = sdiv i32 %25, 16, !dbg !25
  %70 = sdiv i32 %26, 16, !dbg !25
  %71 = sdiv i32 %27, 16, !dbg !25
  %72 = sdiv i32 %28, 16, !dbg !25
  %73 = sdiv i32 %29, 16, !dbg !25
  %74 = srem i32 %66, 8, !dbg !26
  %75 = srem i32 %67, 8, !dbg !26
  %76 = srem i32 %68, 8, !dbg !26
  %77 = srem i32 %69, 8, !dbg !26
  %78 = srem i32 %70, 8, !dbg !26
  %79 = srem i32 %71, 8, !dbg !26
  %80 = srem i32 %72, 8, !dbg !26
  %81 = srem i32 %73, 8, !dbg !26
  %82 = srem i32 %30, 16, !dbg !27
  %83 = shl i32 %46, 7, !dbg !28
  %84 = shl i32 %47, 7, !dbg !28
  %85 = shl i32 %48, 7, !dbg !28
  %86 = shl i32 %49, 7, !dbg !28
  %87 = mul i32 %56, 6400, !dbg !29
  %88 = add i32 %87, %.decomposed, !dbg !30
  %89 = add i32 %88, %83, !dbg !31
  %90 = add i32 %88, %84, !dbg !31
  %91 = add i32 %88, %85, !dbg !31
  %92 = add i32 %88, %86, !dbg !31
  %93 = sext i32 %89 to i64, !dbg !32
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !32
  %95 = sext i32 %90 to i64, !dbg !32
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !32
  %97 = sext i32 %91 to i64, !dbg !32
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !32
  %99 = sext i32 %92 to i64, !dbg !32
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !32
  %101 = and i1 %51, %31, !dbg !33
  %102 = and i1 %52, %31, !dbg !33
  %103 = and i1 %53, %31, !dbg !33
  %104 = and i1 %54, %31, !dbg !33
  %105 = and i1 %55, %32, !dbg !33
  %106 = and i1 %33, %55, !dbg !33
  %107 = and i1 %34, %55, !dbg !33
  %108 = and i1 %35, %55, !dbg !33
  %109 = and i1 %36, %55, !dbg !33
  %110 = and i1 %37, %55, !dbg !33
  %111 = and i1 %38, %55, !dbg !33
  %112 = and i1 %39, %55, !dbg !33
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %94, i1 %101) #4, !dbg !34
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !34
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !34
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !34
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !34
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 %102) #4, !dbg !34
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !34
  %120 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !34
  %121 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !34
  %122 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !34
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %98, i1 %103) #4, !dbg !34
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !34
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !34
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !34
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !34
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 %104) #4, !dbg !34
  %129 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !34
  %130 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !34
  %131 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !34
  %132 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !34
  %133 = mul nuw nsw i32 %17, 17, !dbg !34
  %134 = or disjoint i32 %133, %43, !dbg !34
  %135 = zext nneg i32 %134 to i64, !dbg !34
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i64 %135, !dbg !34
  store i32 %114, ptr addrspace(3) %136, align 4, !dbg !34
  %137 = add nuw nsw i32 %133, 17, !dbg !34
  %138 = add nuw nsw i32 %137, %43, !dbg !34
  %139 = zext nneg i32 %138 to i64, !dbg !34
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i64 %139, !dbg !34
  store i32 %115, ptr addrspace(3) %140, align 4, !dbg !34
  %141 = add nuw nsw i32 %133, 34, !dbg !34
  %142 = add nuw nsw i32 %141, %43, !dbg !34
  %143 = zext nneg i32 %142 to i64, !dbg !34
  %144 = getelementptr float, ptr addrspace(3) @global_smem, i64 %143, !dbg !34
  store i32 %116, ptr addrspace(3) %144, align 4, !dbg !34
  %145 = add nuw nsw i32 %133, 51, !dbg !34
  %146 = add nuw nsw i32 %145, %43, !dbg !34
  %147 = zext nneg i32 %146 to i64, !dbg !34
  %148 = getelementptr float, ptr addrspace(3) @global_smem, i64 %147, !dbg !34
  store i32 %117, ptr addrspace(3) %148, align 4, !dbg !34
  %149 = or disjoint i32 %43, 4, !dbg !34
  %150 = add nuw nsw i32 %133, %149, !dbg !34
  %151 = zext nneg i32 %150 to i64, !dbg !34
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i64 %151, !dbg !34
  store i32 %119, ptr addrspace(3) %152, align 4, !dbg !34
  %153 = add nuw nsw i32 %137, %149, !dbg !34
  %154 = zext nneg i32 %153 to i64, !dbg !34
  %155 = getelementptr float, ptr addrspace(3) @global_smem, i64 %154, !dbg !34
  store i32 %120, ptr addrspace(3) %155, align 4, !dbg !34
  %156 = add nuw nsw i32 %141, %149, !dbg !34
  %157 = zext nneg i32 %156 to i64, !dbg !34
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i64 %157, !dbg !34
  store i32 %121, ptr addrspace(3) %158, align 4, !dbg !34
  %159 = add nuw nsw i32 %145, %149, !dbg !34
  %160 = zext nneg i32 %159 to i64, !dbg !34
  %161 = getelementptr float, ptr addrspace(3) @global_smem, i64 %160, !dbg !34
  store i32 %122, ptr addrspace(3) %161, align 4, !dbg !34
  %162 = or disjoint i32 %43, 8, !dbg !34
  %163 = add nuw nsw i32 %133, %162, !dbg !34
  %164 = zext nneg i32 %163 to i64, !dbg !34
  %165 = getelementptr float, ptr addrspace(3) @global_smem, i64 %164, !dbg !34
  store i32 %124, ptr addrspace(3) %165, align 4, !dbg !34
  %166 = add nuw nsw i32 %137, %162, !dbg !34
  %167 = zext nneg i32 %166 to i64, !dbg !34
  %168 = getelementptr float, ptr addrspace(3) @global_smem, i64 %167, !dbg !34
  store i32 %125, ptr addrspace(3) %168, align 4, !dbg !34
  %169 = add nuw nsw i32 %141, %162, !dbg !34
  %170 = zext nneg i32 %169 to i64, !dbg !34
  %171 = getelementptr float, ptr addrspace(3) @global_smem, i64 %170, !dbg !34
  store i32 %126, ptr addrspace(3) %171, align 4, !dbg !34
  %172 = add nuw nsw i32 %145, %162, !dbg !34
  %173 = zext nneg i32 %172 to i64, !dbg !34
  %174 = getelementptr float, ptr addrspace(3) @global_smem, i64 %173, !dbg !34
  store i32 %127, ptr addrspace(3) %174, align 4, !dbg !34
  %175 = or disjoint i32 %43, 12, !dbg !34
  %176 = add nuw nsw i32 %133, %175, !dbg !34
  %177 = zext nneg i32 %176 to i64, !dbg !34
  %178 = getelementptr float, ptr addrspace(3) @global_smem, i64 %177, !dbg !34
  store i32 %129, ptr addrspace(3) %178, align 4, !dbg !34
  %179 = add nuw nsw i32 %137, %175, !dbg !34
  %180 = zext nneg i32 %179 to i64, !dbg !34
  %181 = getelementptr float, ptr addrspace(3) @global_smem, i64 %180, !dbg !34
  store i32 %130, ptr addrspace(3) %181, align 4, !dbg !34
  %182 = add nuw nsw i32 %141, %175, !dbg !34
  %183 = zext nneg i32 %182 to i64, !dbg !34
  %184 = getelementptr float, ptr addrspace(3) @global_smem, i64 %183, !dbg !34
  store i32 %131, ptr addrspace(3) %184, align 4, !dbg !34
  %185 = add nuw nsw i32 %145, %175, !dbg !34
  %186 = zext nneg i32 %185 to i64, !dbg !34
  %187 = getelementptr float, ptr addrspace(3) @global_smem, i64 %186, !dbg !34
  store i32 %132, ptr addrspace(3) %187, align 4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %188 = and i32 %18, 31, !dbg !34
  %189 = mul nuw nsw i32 %188, 17, !dbg !34
  %190 = add nuw nsw i32 %189, %45, !dbg !34
  %191 = zext nneg i32 %190 to i64, !dbg !34
  %192 = getelementptr float, ptr addrspace(3) @global_smem, i64 %191, !dbg !34
  %193 = load <1 x float>, ptr addrspace(3) %192, align 4, !dbg !34
  %194 = or disjoint i32 %45, 1, !dbg !34
  %195 = add nuw nsw i32 %189, %194, !dbg !34
  %196 = zext nneg i32 %195 to i64, !dbg !34
  %197 = getelementptr float, ptr addrspace(3) @global_smem, i64 %196, !dbg !34
  %198 = load <1 x float>, ptr addrspace(3) %197, align 4, !dbg !34
  %199 = or disjoint i32 %188, 32, !dbg !34
  %200 = mul nuw nsw i32 %199, 17, !dbg !34
  %201 = add nuw nsw i32 %200, %45, !dbg !34
  %202 = zext nneg i32 %201 to i64, !dbg !34
  %203 = getelementptr float, ptr addrspace(3) @global_smem, i64 %202, !dbg !34
  %204 = load <1 x float>, ptr addrspace(3) %203, align 4, !dbg !34
  %205 = add nuw nsw i32 %200, %194, !dbg !34
  %206 = zext nneg i32 %205 to i64, !dbg !34
  %207 = getelementptr float, ptr addrspace(3) @global_smem, i64 %206, !dbg !34
  %208 = load <1 x float>, ptr addrspace(3) %207, align 4, !dbg !34
  %209 = or disjoint i32 %188, 64, !dbg !34
  %210 = mul nuw nsw i32 %209, 17, !dbg !34
  %211 = add nuw nsw i32 %210, %45, !dbg !34
  %212 = zext nneg i32 %211 to i64, !dbg !34
  %213 = getelementptr float, ptr addrspace(3) @global_smem, i64 %212, !dbg !34
  %214 = load <1 x float>, ptr addrspace(3) %213, align 4, !dbg !34
  %215 = add nuw nsw i32 %210, %194, !dbg !34
  %216 = zext nneg i32 %215 to i64, !dbg !34
  %217 = getelementptr float, ptr addrspace(3) @global_smem, i64 %216, !dbg !34
  %218 = load <1 x float>, ptr addrspace(3) %217, align 4, !dbg !34
  %219 = or disjoint i32 %188, 96, !dbg !34
  %220 = mul nuw nsw i32 %219, 17, !dbg !34
  %221 = add nuw nsw i32 %220, %45, !dbg !34
  %222 = zext nneg i32 %221 to i64, !dbg !34
  %223 = getelementptr float, ptr addrspace(3) @global_smem, i64 %222, !dbg !34
  %224 = load <1 x float>, ptr addrspace(3) %223, align 4, !dbg !34
  %225 = add nuw nsw i32 %220, %194, !dbg !34
  %226 = zext nneg i32 %225 to i64, !dbg !34
  %227 = getelementptr float, ptr addrspace(3) @global_smem, i64 %226, !dbg !34
  %228 = load <1 x float>, ptr addrspace(3) %227, align 4, !dbg !34
  %229 = or disjoint i32 %188, 128, !dbg !34
  %230 = mul nuw nsw i32 %229, 17, !dbg !34
  %231 = add nuw nsw i32 %230, %45, !dbg !34
  %232 = zext nneg i32 %231 to i64, !dbg !34
  %233 = getelementptr float, ptr addrspace(3) @global_smem, i64 %232, !dbg !34
  %234 = load <1 x float>, ptr addrspace(3) %233, align 4, !dbg !34
  %235 = add nuw nsw i32 %230, %194, !dbg !34
  %236 = zext nneg i32 %235 to i64, !dbg !34
  %237 = getelementptr float, ptr addrspace(3) @global_smem, i64 %236, !dbg !34
  %238 = load <1 x float>, ptr addrspace(3) %237, align 4, !dbg !34
  %239 = or disjoint i32 %188, 160, !dbg !34
  %240 = mul nuw nsw i32 %239, 17, !dbg !34
  %241 = add nuw nsw i32 %240, %45, !dbg !34
  %242 = zext nneg i32 %241 to i64, !dbg !34
  %243 = getelementptr float, ptr addrspace(3) @global_smem, i64 %242, !dbg !34
  %244 = load <1 x float>, ptr addrspace(3) %243, align 4, !dbg !34
  %245 = add nuw nsw i32 %240, %194, !dbg !34
  %246 = zext nneg i32 %245 to i64, !dbg !34
  %247 = getelementptr float, ptr addrspace(3) @global_smem, i64 %246, !dbg !34
  %248 = load <1 x float>, ptr addrspace(3) %247, align 4, !dbg !34
  %249 = or disjoint i32 %188, 192, !dbg !34
  %250 = mul nuw nsw i32 %249, 17, !dbg !34
  %251 = add nuw nsw i32 %250, %45, !dbg !34
  %252 = zext nneg i32 %251 to i64, !dbg !34
  %253 = getelementptr float, ptr addrspace(3) @global_smem, i64 %252, !dbg !34
  %254 = load <1 x float>, ptr addrspace(3) %253, align 4, !dbg !34
  %255 = add nuw nsw i32 %250, %194, !dbg !34
  %256 = zext nneg i32 %255 to i64, !dbg !34
  %257 = getelementptr float, ptr addrspace(3) @global_smem, i64 %256, !dbg !34
  %258 = load <1 x float>, ptr addrspace(3) %257, align 4, !dbg !34
  %259 = or disjoint i32 %188, 224, !dbg !34
  %260 = mul nuw nsw i32 %259, 17, !dbg !34
  %261 = add nuw nsw i32 %260, %45, !dbg !34
  %262 = zext nneg i32 %261 to i64, !dbg !34
  %263 = getelementptr float, ptr addrspace(3) @global_smem, i64 %262, !dbg !34
  %264 = load <1 x float>, ptr addrspace(3) %263, align 4, !dbg !34
  %265 = add nuw nsw i32 %260, %194, !dbg !34
  %266 = zext nneg i32 %265 to i64, !dbg !34
  %267 = getelementptr float, ptr addrspace(3) @global_smem, i64 %266, !dbg !34
  %268 = load <1 x float>, ptr addrspace(3) %267, align 4, !dbg !34
  %269 = shl i32 %50, 3, !dbg !35
  %270 = or disjoint i32 %269, 8, !dbg !35
  %271 = mul i32 %57, 400, !dbg !36
  %272 = mul i32 %58, 400, !dbg !36
  %273 = mul i32 %59, 400, !dbg !36
  %274 = mul i32 %60, 400, !dbg !36
  %275 = mul i32 %61, 400, !dbg !36
  %276 = mul i32 %62, 400, !dbg !36
  %277 = mul i32 %63, 400, !dbg !36
  %278 = mul i32 %64, 400, !dbg !36
  %279 = add i32 %271, %74, !dbg !37
  %280 = add i32 %279, %269, !dbg !38
  %281 = add i32 %279, %270, !dbg !38
  %282 = add i32 %272, %75, !dbg !37
  %283 = add i32 %282, %269, !dbg !38
  %284 = add i32 %282, %270, !dbg !38
  %285 = add i32 %273, %76, !dbg !37
  %286 = add i32 %285, %269, !dbg !38
  %287 = add i32 %285, %270, !dbg !38
  %288 = add i32 %274, %77, !dbg !37
  %289 = add i32 %288, %269, !dbg !38
  %290 = add i32 %288, %270, !dbg !38
  %291 = add i32 %275, %78, !dbg !37
  %292 = add i32 %291, %269, !dbg !38
  %293 = add i32 %291, %270, !dbg !38
  %294 = add i32 %276, %79, !dbg !37
  %295 = add i32 %294, %269, !dbg !38
  %296 = add i32 %294, %270, !dbg !38
  %297 = add i32 %277, %80, !dbg !37
  %298 = add i32 %297, %269, !dbg !38
  %299 = add i32 %297, %270, !dbg !38
  %300 = add i32 %278, %81, !dbg !37
  %301 = add i32 %300, %269, !dbg !38
  %302 = add i32 %300, %270, !dbg !38
  %303 = sext i32 %280 to i64, !dbg !39
  %304 = getelementptr float, ptr addrspace(1) %1, i64 %303, !dbg !39
  %305 = sext i32 %281 to i64, !dbg !39
  %306 = getelementptr float, ptr addrspace(1) %1, i64 %305, !dbg !39
  %307 = sext i32 %283 to i64, !dbg !39
  %308 = getelementptr float, ptr addrspace(1) %1, i64 %307, !dbg !39
  %309 = sext i32 %284 to i64, !dbg !39
  %310 = getelementptr float, ptr addrspace(1) %1, i64 %309, !dbg !39
  %311 = sext i32 %286 to i64, !dbg !39
  %312 = getelementptr float, ptr addrspace(1) %1, i64 %311, !dbg !39
  %313 = sext i32 %287 to i64, !dbg !39
  %314 = getelementptr float, ptr addrspace(1) %1, i64 %313, !dbg !39
  %315 = sext i32 %289 to i64, !dbg !39
  %316 = getelementptr float, ptr addrspace(1) %1, i64 %315, !dbg !39
  %317 = sext i32 %290 to i64, !dbg !39
  %318 = getelementptr float, ptr addrspace(1) %1, i64 %317, !dbg !39
  %319 = sext i32 %292 to i64, !dbg !39
  %320 = getelementptr float, ptr addrspace(1) %1, i64 %319, !dbg !39
  %321 = sext i32 %293 to i64, !dbg !39
  %322 = getelementptr float, ptr addrspace(1) %1, i64 %321, !dbg !39
  %323 = sext i32 %295 to i64, !dbg !39
  %324 = getelementptr float, ptr addrspace(1) %1, i64 %323, !dbg !39
  %325 = sext i32 %296 to i64, !dbg !39
  %326 = getelementptr float, ptr addrspace(1) %1, i64 %325, !dbg !39
  %327 = sext i32 %298 to i64, !dbg !39
  %328 = getelementptr float, ptr addrspace(1) %1, i64 %327, !dbg !39
  %329 = sext i32 %299 to i64, !dbg !39
  %330 = getelementptr float, ptr addrspace(1) %1, i64 %329, !dbg !39
  %331 = sext i32 %301 to i64, !dbg !39
  %332 = getelementptr float, ptr addrspace(1) %1, i64 %331, !dbg !39
  %333 = sext i32 %302 to i64, !dbg !39
  %334 = getelementptr float, ptr addrspace(1) %1, i64 %333, !dbg !39
  %335 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %304, i1 %105) #4, !dbg !40
  %336 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %306, i1 %105) #4, !dbg !40
  %337 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %308, i1 %106) #4, !dbg !40
  %338 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %310, i1 %106) #4, !dbg !40
  %339 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %312, i1 %107) #4, !dbg !40
  %340 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %314, i1 %107) #4, !dbg !40
  %341 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %316, i1 %108) #4, !dbg !40
  %342 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %318, i1 %108) #4, !dbg !40
  %343 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %320, i1 %109) #4, !dbg !40
  %344 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %322, i1 %109) #4, !dbg !40
  %345 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %324, i1 %110) #4, !dbg !40
  %346 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %326, i1 %110) #4, !dbg !40
  %347 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %328, i1 %111) #4, !dbg !40
  %348 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %330, i1 %111) #4, !dbg !40
  %349 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %332, i1 %112) #4, !dbg !40
  %350 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %334, i1 %112) #4, !dbg !40
  %351 = getelementptr float, ptr addrspace(1) %2, i64 %303, !dbg !41
  %352 = getelementptr float, ptr addrspace(1) %2, i64 %305, !dbg !41
  %353 = getelementptr float, ptr addrspace(1) %2, i64 %307, !dbg !41
  %354 = getelementptr float, ptr addrspace(1) %2, i64 %309, !dbg !41
  %355 = getelementptr float, ptr addrspace(1) %2, i64 %311, !dbg !41
  %356 = getelementptr float, ptr addrspace(1) %2, i64 %313, !dbg !41
  %357 = getelementptr float, ptr addrspace(1) %2, i64 %315, !dbg !41
  %358 = getelementptr float, ptr addrspace(1) %2, i64 %317, !dbg !41
  %359 = getelementptr float, ptr addrspace(1) %2, i64 %319, !dbg !41
  %360 = getelementptr float, ptr addrspace(1) %2, i64 %321, !dbg !41
  %361 = getelementptr float, ptr addrspace(1) %2, i64 %323, !dbg !41
  %362 = getelementptr float, ptr addrspace(1) %2, i64 %325, !dbg !41
  %363 = getelementptr float, ptr addrspace(1) %2, i64 %327, !dbg !41
  %364 = getelementptr float, ptr addrspace(1) %2, i64 %329, !dbg !41
  %365 = getelementptr float, ptr addrspace(1) %2, i64 %331, !dbg !41
  %366 = getelementptr float, ptr addrspace(1) %2, i64 %333, !dbg !41
  %367 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %351, i1 %105) #4, !dbg !42
  %368 = bitcast i32 %367 to float, !dbg !42
  %369 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %352, i1 %105) #4, !dbg !42
  %370 = bitcast i32 %369 to float, !dbg !42
  %371 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %353, i1 %106) #4, !dbg !42
  %372 = bitcast i32 %371 to float, !dbg !42
  %373 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %354, i1 %106) #4, !dbg !42
  %374 = bitcast i32 %373 to float, !dbg !42
  %375 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %355, i1 %107) #4, !dbg !42
  %376 = bitcast i32 %375 to float, !dbg !42
  %377 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %356, i1 %107) #4, !dbg !42
  %378 = bitcast i32 %377 to float, !dbg !42
  %379 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %357, i1 %108) #4, !dbg !42
  %380 = bitcast i32 %379 to float, !dbg !42
  %381 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %358, i1 %108) #4, !dbg !42
  %382 = bitcast i32 %381 to float, !dbg !42
  %383 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %359, i1 %109) #4, !dbg !42
  %384 = bitcast i32 %383 to float, !dbg !42
  %385 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %360, i1 %109) #4, !dbg !42
  %386 = bitcast i32 %385 to float, !dbg !42
  %387 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %361, i1 %110) #4, !dbg !42
  %388 = bitcast i32 %387 to float, !dbg !42
  %389 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %362, i1 %110) #4, !dbg !42
  %390 = bitcast i32 %389 to float, !dbg !42
  %391 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %363, i1 %111) #4, !dbg !42
  %392 = bitcast i32 %391 to float, !dbg !42
  %393 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %364, i1 %111) #4, !dbg !42
  %394 = bitcast i32 %393 to float, !dbg !42
  %395 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %365, i1 %112) #4, !dbg !42
  %396 = bitcast i32 %395 to float, !dbg !42
  %397 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %366, i1 %112) #4, !dbg !42
  %398 = bitcast i32 %397 to float, !dbg !42
  %399 = sext i32 %82 to i64, !dbg !43
  %400 = getelementptr float, ptr addrspace(1) %3, i64 %399, !dbg !43
  %401 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %400, i1 %40) #4, !dbg !44
  %402 = getelementptr float, ptr addrspace(1) %4, i64 %399, !dbg !45
  %403 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %402, i1 %40) #4, !dbg !46
  %404 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %368, float 1.600000e+01) #4, !dbg !47
  %405 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %370, float 1.600000e+01) #4, !dbg !47
  %406 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %372, float 1.600000e+01) #4, !dbg !47
  %407 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %374, float 1.600000e+01) #4, !dbg !47
  %408 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %376, float 1.600000e+01) #4, !dbg !47
  %409 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %378, float 1.600000e+01) #4, !dbg !47
  %410 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %380, float 1.600000e+01) #4, !dbg !47
  %411 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %382, float 1.600000e+01) #4, !dbg !47
  %412 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %384, float 1.600000e+01) #4, !dbg !47
  %413 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %386, float 1.600000e+01) #4, !dbg !47
  %414 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %388, float 1.600000e+01) #4, !dbg !47
  %415 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %390, float 1.600000e+01) #4, !dbg !47
  %416 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %392, float 1.600000e+01) #4, !dbg !47
  %417 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %394, float 1.600000e+01) #4, !dbg !47
  %418 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %396, float 1.600000e+01) #4, !dbg !47
  %419 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %398, float 1.600000e+01) #4, !dbg !47
  %420 = fadd float %404, 0x3EE4F8B580000000, !dbg !48
  %421 = fadd float %405, 0x3EE4F8B580000000, !dbg !48
  %422 = fadd float %406, 0x3EE4F8B580000000, !dbg !48
  %423 = fadd float %407, 0x3EE4F8B580000000, !dbg !48
  %424 = fadd float %408, 0x3EE4F8B580000000, !dbg !48
  %425 = fadd float %409, 0x3EE4F8B580000000, !dbg !48
  %426 = fadd float %410, 0x3EE4F8B580000000, !dbg !48
  %427 = fadd float %411, 0x3EE4F8B580000000, !dbg !48
  %428 = fadd float %412, 0x3EE4F8B580000000, !dbg !48
  %429 = fadd float %413, 0x3EE4F8B580000000, !dbg !48
  %430 = fadd float %414, 0x3EE4F8B580000000, !dbg !48
  %431 = fadd float %415, 0x3EE4F8B580000000, !dbg !48
  %432 = fadd float %416, 0x3EE4F8B580000000, !dbg !48
  %433 = fadd float %417, 0x3EE4F8B580000000, !dbg !48
  %434 = fadd float %418, 0x3EE4F8B580000000, !dbg !48
  %435 = fadd float %419, 0x3EE4F8B580000000, !dbg !48
  %436 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not.i = icmp eq i32 %436, 0, !dbg !49
  br i1 %.not.i, label %439, label %437, !dbg !49

437:                                              ; preds = %8
  %438 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %420), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

439:                                              ; preds = %8
  %440 = tail call float @llvm.nvvm.rsqrt.approx.f(float %420), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

__nv_rsqrtf.exit:                                 ; preds = %437, %439
  %.0.i = phi float [ %438, %437 ], [ %440, %439 ], !dbg !49
  %441 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not.i3 = icmp eq i32 %441, 0, !dbg !49
  br i1 %.not.i3, label %444, label %442, !dbg !49

442:                                              ; preds = %__nv_rsqrtf.exit
  %443 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %421), !dbg !49
  br label %__nv_rsqrtf.exit5, !dbg !49

444:                                              ; preds = %__nv_rsqrtf.exit
  %445 = tail call float @llvm.nvvm.rsqrt.approx.f(float %421), !dbg !49
  br label %__nv_rsqrtf.exit5, !dbg !49

__nv_rsqrtf.exit5:                                ; preds = %442, %444
  %.0.i4 = phi float [ %443, %442 ], [ %445, %444 ], !dbg !49
  %446 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not.i6 = icmp eq i32 %446, 0, !dbg !49
  br i1 %.not.i6, label %449, label %447, !dbg !49

447:                                              ; preds = %__nv_rsqrtf.exit5
  %448 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %422), !dbg !49
  br label %__nv_rsqrtf.exit8, !dbg !49

449:                                              ; preds = %__nv_rsqrtf.exit5
  %450 = tail call float @llvm.nvvm.rsqrt.approx.f(float %422), !dbg !49
  br label %__nv_rsqrtf.exit8, !dbg !49

__nv_rsqrtf.exit8:                                ; preds = %447, %449
  %.0.i7 = phi float [ %448, %447 ], [ %450, %449 ], !dbg !49
  %451 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not.i9 = icmp eq i32 %451, 0, !dbg !49
  br i1 %.not.i9, label %454, label %452, !dbg !49

452:                                              ; preds = %__nv_rsqrtf.exit8
  %453 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %423), !dbg !49
  br label %__nv_rsqrtf.exit11, !dbg !49

454:                                              ; preds = %__nv_rsqrtf.exit8
  %455 = tail call float @llvm.nvvm.rsqrt.approx.f(float %423), !dbg !49
  br label %__nv_rsqrtf.exit11, !dbg !49

__nv_rsqrtf.exit11:                               ; preds = %452, %454
  %.0.i10 = phi float [ %453, %452 ], [ %455, %454 ], !dbg !49
  %456 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not.i12 = icmp eq i32 %456, 0, !dbg !49
  br i1 %.not.i12, label %459, label %457, !dbg !49

457:                                              ; preds = %__nv_rsqrtf.exit11
  %458 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %424), !dbg !49
  br label %__nv_rsqrtf.exit14, !dbg !49

459:                                              ; preds = %__nv_rsqrtf.exit11
  %460 = tail call float @llvm.nvvm.rsqrt.approx.f(float %424), !dbg !49
  br label %__nv_rsqrtf.exit14, !dbg !49

__nv_rsqrtf.exit14:                               ; preds = %457, %459
  %.0.i13 = phi float [ %458, %457 ], [ %460, %459 ], !dbg !49
  %461 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not.i15 = icmp eq i32 %461, 0, !dbg !49
  br i1 %.not.i15, label %464, label %462, !dbg !49

462:                                              ; preds = %__nv_rsqrtf.exit14
  %463 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %425), !dbg !49
  br label %__nv_rsqrtf.exit17, !dbg !49

464:                                              ; preds = %__nv_rsqrtf.exit14
  %465 = tail call float @llvm.nvvm.rsqrt.approx.f(float %425), !dbg !49
  br label %__nv_rsqrtf.exit17, !dbg !49

__nv_rsqrtf.exit17:                               ; preds = %462, %464
  %.0.i16 = phi float [ %463, %462 ], [ %465, %464 ], !dbg !49
  %466 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not.i18 = icmp eq i32 %466, 0, !dbg !49
  br i1 %.not.i18, label %469, label %467, !dbg !49

467:                                              ; preds = %__nv_rsqrtf.exit17
  %468 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %426), !dbg !49
  br label %__nv_rsqrtf.exit20, !dbg !49

469:                                              ; preds = %__nv_rsqrtf.exit17
  %470 = tail call float @llvm.nvvm.rsqrt.approx.f(float %426), !dbg !49
  br label %__nv_rsqrtf.exit20, !dbg !49

__nv_rsqrtf.exit20:                               ; preds = %467, %469
  %.0.i19 = phi float [ %468, %467 ], [ %470, %469 ], !dbg !49
  %471 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not.i21 = icmp eq i32 %471, 0, !dbg !49
  br i1 %.not.i21, label %474, label %472, !dbg !49

472:                                              ; preds = %__nv_rsqrtf.exit20
  %473 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %427), !dbg !49
  br label %__nv_rsqrtf.exit23, !dbg !49

474:                                              ; preds = %__nv_rsqrtf.exit20
  %475 = tail call float @llvm.nvvm.rsqrt.approx.f(float %427), !dbg !49
  br label %__nv_rsqrtf.exit23, !dbg !49

__nv_rsqrtf.exit23:                               ; preds = %472, %474
  %.0.i22 = phi float [ %473, %472 ], [ %475, %474 ], !dbg !49
  %476 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not.i24 = icmp eq i32 %476, 0, !dbg !49
  br i1 %.not.i24, label %479, label %477, !dbg !49

477:                                              ; preds = %__nv_rsqrtf.exit23
  %478 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %428), !dbg !49
  br label %__nv_rsqrtf.exit26, !dbg !49

479:                                              ; preds = %__nv_rsqrtf.exit23
  %480 = tail call float @llvm.nvvm.rsqrt.approx.f(float %428), !dbg !49
  br label %__nv_rsqrtf.exit26, !dbg !49

__nv_rsqrtf.exit26:                               ; preds = %477, %479
  %.0.i25 = phi float [ %478, %477 ], [ %480, %479 ], !dbg !49
  %481 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not.i27 = icmp eq i32 %481, 0, !dbg !49
  br i1 %.not.i27, label %484, label %482, !dbg !49

482:                                              ; preds = %__nv_rsqrtf.exit26
  %483 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %429), !dbg !49
  br label %__nv_rsqrtf.exit29, !dbg !49

484:                                              ; preds = %__nv_rsqrtf.exit26
  %485 = tail call float @llvm.nvvm.rsqrt.approx.f(float %429), !dbg !49
  br label %__nv_rsqrtf.exit29, !dbg !49

__nv_rsqrtf.exit29:                               ; preds = %482, %484
  %.0.i28 = phi float [ %483, %482 ], [ %485, %484 ], !dbg !49
  %486 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not.i30 = icmp eq i32 %486, 0, !dbg !49
  br i1 %.not.i30, label %489, label %487, !dbg !49

487:                                              ; preds = %__nv_rsqrtf.exit29
  %488 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %430), !dbg !49
  br label %__nv_rsqrtf.exit32, !dbg !49

489:                                              ; preds = %__nv_rsqrtf.exit29
  %490 = tail call float @llvm.nvvm.rsqrt.approx.f(float %430), !dbg !49
  br label %__nv_rsqrtf.exit32, !dbg !49

__nv_rsqrtf.exit32:                               ; preds = %487, %489
  %.0.i31 = phi float [ %488, %487 ], [ %490, %489 ], !dbg !49
  %491 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not.i33 = icmp eq i32 %491, 0, !dbg !49
  br i1 %.not.i33, label %494, label %492, !dbg !49

492:                                              ; preds = %__nv_rsqrtf.exit32
  %493 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %431), !dbg !49
  br label %__nv_rsqrtf.exit35, !dbg !49

494:                                              ; preds = %__nv_rsqrtf.exit32
  %495 = tail call float @llvm.nvvm.rsqrt.approx.f(float %431), !dbg !49
  br label %__nv_rsqrtf.exit35, !dbg !49

__nv_rsqrtf.exit35:                               ; preds = %492, %494
  %.0.i34 = phi float [ %493, %492 ], [ %495, %494 ], !dbg !49
  %496 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not.i36 = icmp eq i32 %496, 0, !dbg !49
  br i1 %.not.i36, label %499, label %497, !dbg !49

497:                                              ; preds = %__nv_rsqrtf.exit35
  %498 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %432), !dbg !49
  br label %__nv_rsqrtf.exit38, !dbg !49

499:                                              ; preds = %__nv_rsqrtf.exit35
  %500 = tail call float @llvm.nvvm.rsqrt.approx.f(float %432), !dbg !49
  br label %__nv_rsqrtf.exit38, !dbg !49

__nv_rsqrtf.exit38:                               ; preds = %497, %499
  %.0.i37 = phi float [ %498, %497 ], [ %500, %499 ], !dbg !49
  %501 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not.i39 = icmp eq i32 %501, 0, !dbg !49
  br i1 %.not.i39, label %504, label %502, !dbg !49

502:                                              ; preds = %__nv_rsqrtf.exit38
  %503 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %433), !dbg !49
  br label %__nv_rsqrtf.exit41, !dbg !49

504:                                              ; preds = %__nv_rsqrtf.exit38
  %505 = tail call float @llvm.nvvm.rsqrt.approx.f(float %433), !dbg !49
  br label %__nv_rsqrtf.exit41, !dbg !49

__nv_rsqrtf.exit41:                               ; preds = %502, %504
  %.0.i40 = phi float [ %503, %502 ], [ %505, %504 ], !dbg !49
  %506 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not.i42 = icmp eq i32 %506, 0, !dbg !49
  br i1 %.not.i42, label %509, label %507, !dbg !49

507:                                              ; preds = %__nv_rsqrtf.exit41
  %508 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %434), !dbg !49
  br label %__nv_rsqrtf.exit44, !dbg !49

509:                                              ; preds = %__nv_rsqrtf.exit41
  %510 = tail call float @llvm.nvvm.rsqrt.approx.f(float %434), !dbg !49
  br label %__nv_rsqrtf.exit44, !dbg !49

__nv_rsqrtf.exit44:                               ; preds = %507, %509
  %.0.i43 = phi float [ %508, %507 ], [ %510, %509 ], !dbg !49
  %511 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not.i45 = icmp eq i32 %511, 0, !dbg !49
  br i1 %.not.i45, label %514, label %512, !dbg !49

512:                                              ; preds = %__nv_rsqrtf.exit44
  %513 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %435), !dbg !49
  br label %__nv_rsqrtf.exit47, !dbg !49

514:                                              ; preds = %__nv_rsqrtf.exit44
  %515 = tail call float @llvm.nvvm.rsqrt.approx.f(float %435), !dbg !49
  br label %__nv_rsqrtf.exit47, !dbg !49

__nv_rsqrtf.exit47:                               ; preds = %512, %514
  %.0.i46 = phi float [ %513, %512 ], [ %515, %514 ], !dbg !49
  %516 = extractelement <1 x float> %268, i64 0, !dbg !34
  %517 = bitcast i32 %350 to float, !dbg !40
  %518 = fsub float %516, %517, !dbg !50
  %519 = extractelement <1 x float> %264, i64 0, !dbg !34
  %520 = bitcast i32 %349 to float, !dbg !40
  %521 = fsub float %519, %520, !dbg !50
  %522 = extractelement <1 x float> %258, i64 0, !dbg !34
  %523 = bitcast i32 %348 to float, !dbg !40
  %524 = fsub float %522, %523, !dbg !50
  %525 = extractelement <1 x float> %254, i64 0, !dbg !34
  %526 = bitcast i32 %347 to float, !dbg !40
  %527 = fsub float %525, %526, !dbg !50
  %528 = extractelement <1 x float> %248, i64 0, !dbg !34
  %529 = bitcast i32 %346 to float, !dbg !40
  %530 = fsub float %528, %529, !dbg !50
  %531 = extractelement <1 x float> %244, i64 0, !dbg !34
  %532 = bitcast i32 %345 to float, !dbg !40
  %533 = fsub float %531, %532, !dbg !50
  %534 = extractelement <1 x float> %238, i64 0, !dbg !34
  %535 = bitcast i32 %344 to float, !dbg !40
  %536 = fsub float %534, %535, !dbg !50
  %537 = extractelement <1 x float> %234, i64 0, !dbg !34
  %538 = bitcast i32 %343 to float, !dbg !40
  %539 = fsub float %537, %538, !dbg !50
  %540 = extractelement <1 x float> %228, i64 0, !dbg !34
  %541 = bitcast i32 %342 to float, !dbg !40
  %542 = fsub float %540, %541, !dbg !50
  %543 = extractelement <1 x float> %224, i64 0, !dbg !34
  %544 = bitcast i32 %341 to float, !dbg !40
  %545 = fsub float %543, %544, !dbg !50
  %546 = extractelement <1 x float> %218, i64 0, !dbg !34
  %547 = bitcast i32 %340 to float, !dbg !40
  %548 = fsub float %546, %547, !dbg !50
  %549 = extractelement <1 x float> %214, i64 0, !dbg !34
  %550 = bitcast i32 %339 to float, !dbg !40
  %551 = fsub float %549, %550, !dbg !50
  %552 = extractelement <1 x float> %208, i64 0, !dbg !34
  %553 = bitcast i32 %338 to float, !dbg !40
  %554 = fsub float %552, %553, !dbg !50
  %555 = extractelement <1 x float> %204, i64 0, !dbg !34
  %556 = bitcast i32 %337 to float, !dbg !40
  %557 = fsub float %555, %556, !dbg !50
  %558 = extractelement <1 x float> %198, i64 0, !dbg !34
  %559 = bitcast i32 %336 to float, !dbg !40
  %560 = fsub float %558, %559, !dbg !50
  %561 = extractelement <1 x float> %193, i64 0, !dbg !34
  %562 = bitcast i32 %335 to float, !dbg !40
  %563 = fsub float %561, %562, !dbg !50
  %564 = bitcast i32 %403 to float, !dbg !46
  %565 = bitcast i32 %401 to float, !dbg !44
  %566 = fmul float %563, %.0.i, !dbg !51
  %567 = fmul float %560, %.0.i4, !dbg !51
  %568 = fmul float %557, %.0.i7, !dbg !51
  %569 = fmul float %554, %.0.i10, !dbg !51
  %570 = fmul float %551, %.0.i13, !dbg !51
  %571 = fmul float %548, %.0.i16, !dbg !51
  %572 = fmul float %545, %.0.i19, !dbg !51
  %573 = fmul float %542, %.0.i22, !dbg !51
  %574 = fmul float %539, %.0.i25, !dbg !51
  %575 = fmul float %536, %.0.i28, !dbg !51
  %576 = fmul float %533, %.0.i31, !dbg !51
  %577 = fmul float %530, %.0.i34, !dbg !51
  %578 = fmul float %527, %.0.i37, !dbg !51
  %579 = fmul float %524, %.0.i40, !dbg !51
  %580 = fmul float %521, %.0.i43, !dbg !51
  %581 = fmul float %518, %.0.i46, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %582 = mul nuw nsw i32 %45, 257, !dbg !51
  %583 = add nuw nsw i32 %582, %188, !dbg !51
  %584 = zext nneg i32 %583 to i64, !dbg !51
  %585 = getelementptr float, ptr addrspace(3) @global_smem, i64 %584, !dbg !51
  %586 = insertelement <1 x float> poison, float %566, i64 0, !dbg !51
  store <1 x float> %586, ptr addrspace(3) %585, align 4, !dbg !51
  %587 = mul nuw nsw i32 %194, 257, !dbg !51
  %588 = add nuw nsw i32 %587, %188, !dbg !51
  %589 = zext nneg i32 %588 to i64, !dbg !51
  %590 = getelementptr float, ptr addrspace(3) @global_smem, i64 %589, !dbg !51
  %591 = insertelement <1 x float> poison, float %567, i64 0, !dbg !51
  store <1 x float> %591, ptr addrspace(3) %590, align 4, !dbg !51
  %592 = add nuw nsw i32 %582, %199, !dbg !51
  %593 = zext nneg i32 %592 to i64, !dbg !51
  %594 = getelementptr float, ptr addrspace(3) @global_smem, i64 %593, !dbg !51
  %595 = insertelement <1 x float> poison, float %568, i64 0, !dbg !51
  store <1 x float> %595, ptr addrspace(3) %594, align 4, !dbg !51
  %596 = add nuw nsw i32 %587, %199, !dbg !51
  %597 = zext nneg i32 %596 to i64, !dbg !51
  %598 = getelementptr float, ptr addrspace(3) @global_smem, i64 %597, !dbg !51
  %599 = insertelement <1 x float> poison, float %569, i64 0, !dbg !51
  store <1 x float> %599, ptr addrspace(3) %598, align 4, !dbg !51
  %600 = add nuw nsw i32 %582, %209, !dbg !51
  %601 = zext nneg i32 %600 to i64, !dbg !51
  %602 = getelementptr float, ptr addrspace(3) @global_smem, i64 %601, !dbg !51
  %603 = insertelement <1 x float> poison, float %570, i64 0, !dbg !51
  store <1 x float> %603, ptr addrspace(3) %602, align 4, !dbg !51
  %604 = add nuw nsw i32 %587, %209, !dbg !51
  %605 = zext nneg i32 %604 to i64, !dbg !51
  %606 = getelementptr float, ptr addrspace(3) @global_smem, i64 %605, !dbg !51
  %607 = insertelement <1 x float> poison, float %571, i64 0, !dbg !51
  store <1 x float> %607, ptr addrspace(3) %606, align 4, !dbg !51
  %608 = add nuw nsw i32 %582, %219, !dbg !51
  %609 = zext nneg i32 %608 to i64, !dbg !51
  %610 = getelementptr float, ptr addrspace(3) @global_smem, i64 %609, !dbg !51
  %611 = insertelement <1 x float> poison, float %572, i64 0, !dbg !51
  store <1 x float> %611, ptr addrspace(3) %610, align 4, !dbg !51
  %612 = add nuw nsw i32 %587, %219, !dbg !51
  %613 = zext nneg i32 %612 to i64, !dbg !51
  %614 = getelementptr float, ptr addrspace(3) @global_smem, i64 %613, !dbg !51
  %615 = insertelement <1 x float> poison, float %573, i64 0, !dbg !51
  store <1 x float> %615, ptr addrspace(3) %614, align 4, !dbg !51
  %616 = add nuw nsw i32 %582, %229, !dbg !51
  %617 = zext nneg i32 %616 to i64, !dbg !51
  %618 = getelementptr float, ptr addrspace(3) @global_smem, i64 %617, !dbg !51
  %619 = insertelement <1 x float> poison, float %574, i64 0, !dbg !51
  store <1 x float> %619, ptr addrspace(3) %618, align 4, !dbg !51
  %620 = add nuw nsw i32 %587, %229, !dbg !51
  %621 = zext nneg i32 %620 to i64, !dbg !51
  %622 = getelementptr float, ptr addrspace(3) @global_smem, i64 %621, !dbg !51
  %623 = insertelement <1 x float> poison, float %575, i64 0, !dbg !51
  store <1 x float> %623, ptr addrspace(3) %622, align 4, !dbg !51
  %624 = add nuw nsw i32 %582, %239, !dbg !51
  %625 = zext nneg i32 %624 to i64, !dbg !51
  %626 = getelementptr float, ptr addrspace(3) @global_smem, i64 %625, !dbg !51
  %627 = insertelement <1 x float> poison, float %576, i64 0, !dbg !51
  store <1 x float> %627, ptr addrspace(3) %626, align 4, !dbg !51
  %628 = add nuw nsw i32 %587, %239, !dbg !51
  %629 = zext nneg i32 %628 to i64, !dbg !51
  %630 = getelementptr float, ptr addrspace(3) @global_smem, i64 %629, !dbg !51
  %631 = insertelement <1 x float> poison, float %577, i64 0, !dbg !51
  store <1 x float> %631, ptr addrspace(3) %630, align 4, !dbg !51
  %632 = add nuw nsw i32 %582, %249, !dbg !51
  %633 = zext nneg i32 %632 to i64, !dbg !51
  %634 = getelementptr float, ptr addrspace(3) @global_smem, i64 %633, !dbg !51
  %635 = insertelement <1 x float> poison, float %578, i64 0, !dbg !51
  store <1 x float> %635, ptr addrspace(3) %634, align 4, !dbg !51
  %636 = add nuw nsw i32 %587, %249, !dbg !51
  %637 = zext nneg i32 %636 to i64, !dbg !51
  %638 = getelementptr float, ptr addrspace(3) @global_smem, i64 %637, !dbg !51
  %639 = insertelement <1 x float> poison, float %579, i64 0, !dbg !51
  store <1 x float> %639, ptr addrspace(3) %638, align 4, !dbg !51
  %640 = add nuw nsw i32 %582, %259, !dbg !51
  %641 = zext nneg i32 %640 to i64, !dbg !51
  %642 = getelementptr float, ptr addrspace(3) @global_smem, i64 %641, !dbg !51
  %643 = insertelement <1 x float> poison, float %580, i64 0, !dbg !51
  store <1 x float> %643, ptr addrspace(3) %642, align 4, !dbg !51
  %644 = add nuw nsw i32 %587, %259, !dbg !51
  %645 = zext nneg i32 %644 to i64, !dbg !51
  %646 = getelementptr float, ptr addrspace(3) @global_smem, i64 %645, !dbg !51
  %647 = insertelement <1 x float> poison, float %581, i64 0, !dbg !51
  store <1 x float> %647, ptr addrspace(3) %646, align 4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %648 = zext nneg i32 %20 to i64, !dbg !51
  %649 = getelementptr float, ptr addrspace(3) @global_smem, i64 %648, !dbg !51
  %650 = load float, ptr addrspace(3) %649, align 4, !dbg !51
  %651 = getelementptr i8, ptr addrspace(3) %649, i64 1028, !dbg !51
  %652 = load float, ptr addrspace(3) %651, align 4, !dbg !51
  %653 = getelementptr i8, ptr addrspace(3) %649, i64 2056, !dbg !51
  %654 = load float, ptr addrspace(3) %653, align 4, !dbg !51
  %655 = getelementptr i8, ptr addrspace(3) %649, i64 3084, !dbg !51
  %656 = load float, ptr addrspace(3) %655, align 4, !dbg !51
  %657 = getelementptr i8, ptr addrspace(3) %649, i64 4112, !dbg !51
  %658 = load float, ptr addrspace(3) %657, align 4, !dbg !51
  %659 = getelementptr i8, ptr addrspace(3) %649, i64 5140, !dbg !51
  %660 = load float, ptr addrspace(3) %659, align 4, !dbg !51
  %661 = getelementptr i8, ptr addrspace(3) %649, i64 6168, !dbg !51
  %662 = load float, ptr addrspace(3) %661, align 4, !dbg !51
  %663 = getelementptr i8, ptr addrspace(3) %649, i64 7196, !dbg !51
  %664 = load float, ptr addrspace(3) %663, align 4, !dbg !51
  %665 = getelementptr i8, ptr addrspace(3) %649, i64 8224, !dbg !51
  %666 = load float, ptr addrspace(3) %665, align 4, !dbg !51
  %667 = getelementptr i8, ptr addrspace(3) %649, i64 9252, !dbg !51
  %668 = load float, ptr addrspace(3) %667, align 4, !dbg !51
  %669 = getelementptr i8, ptr addrspace(3) %649, i64 10280, !dbg !51
  %670 = load float, ptr addrspace(3) %669, align 4, !dbg !51
  %671 = getelementptr i8, ptr addrspace(3) %649, i64 11308, !dbg !51
  %672 = load float, ptr addrspace(3) %671, align 4, !dbg !51
  %673 = getelementptr i8, ptr addrspace(3) %649, i64 12336, !dbg !51
  %674 = load float, ptr addrspace(3) %673, align 4, !dbg !51
  %675 = getelementptr i8, ptr addrspace(3) %649, i64 13364, !dbg !51
  %676 = load float, ptr addrspace(3) %675, align 4, !dbg !51
  %677 = getelementptr i8, ptr addrspace(3) %649, i64 14392, !dbg !51
  %678 = load float, ptr addrspace(3) %677, align 4, !dbg !51
  %679 = getelementptr i8, ptr addrspace(3) %649, i64 15420, !dbg !51
  %680 = load float, ptr addrspace(3) %679, align 4, !dbg !51
  %681 = fmul float %650, %565, !dbg !52
  %682 = fmul float %652, %565, !dbg !52
  %683 = fmul float %654, %565, !dbg !52
  %684 = fmul float %656, %565, !dbg !52
  %685 = fmul float %658, %565, !dbg !52
  %686 = fmul float %660, %565, !dbg !52
  %687 = fmul float %662, %565, !dbg !52
  %688 = fmul float %664, %565, !dbg !52
  %689 = fmul float %666, %565, !dbg !52
  %690 = fmul float %668, %565, !dbg !52
  %691 = fmul float %670, %565, !dbg !52
  %692 = fmul float %672, %565, !dbg !52
  %693 = fmul float %674, %565, !dbg !52
  %694 = fmul float %676, %565, !dbg !52
  %695 = fmul float %678, %565, !dbg !52
  %696 = fmul float %680, %565, !dbg !52
  %697 = fadd float %681, %564, !dbg !53
  %698 = fadd float %682, %564, !dbg !53
  %699 = fadd float %683, %564, !dbg !53
  %700 = fadd float %684, %564, !dbg !53
  %701 = fadd float %685, %564, !dbg !53
  %702 = fadd float %686, %564, !dbg !53
  %703 = fadd float %687, %564, !dbg !53
  %704 = fadd float %688, %564, !dbg !53
  %705 = fadd float %689, %564, !dbg !53
  %706 = fadd float %690, %564, !dbg !53
  %707 = fadd float %691, %564, !dbg !53
  %708 = fadd float %692, %564, !dbg !53
  %709 = fadd float %693, %564, !dbg !53
  %710 = fadd float %694, %564, !dbg !53
  %711 = fadd float %695, %564, !dbg !53
  %712 = fadd float %696, %564, !dbg !53
  %713 = mul i32 %22, 50, !dbg !54
  %714 = mul i32 %23, 50, !dbg !54
  %715 = mul i32 %24, 50, !dbg !54
  %716 = mul i32 %25, 50, !dbg !54
  %717 = mul i32 %26, 50, !dbg !54
  %718 = mul i32 %27, 50, !dbg !54
  %719 = mul i32 %28, 50, !dbg !54
  %720 = mul i32 %29, 50, !dbg !54
  %721 = add i32 %713, %50, !dbg !55
  %722 = add i32 %50, %714, !dbg !55
  %723 = add i32 %50, %715, !dbg !55
  %724 = add i32 %50, %716, !dbg !55
  %725 = add i32 %50, %717, !dbg !55
  %726 = add i32 %50, %718, !dbg !55
  %727 = add i32 %50, %719, !dbg !55
  %728 = add i32 %50, %720, !dbg !55
  %729 = sext i32 %721 to i64, !dbg !56
  %730 = getelementptr float, ptr addrspace(1) %5, i64 %729, !dbg !56
  %731 = sext i32 %722 to i64, !dbg !56
  %732 = getelementptr float, ptr addrspace(1) %5, i64 %731, !dbg !56
  %733 = sext i32 %723 to i64, !dbg !56
  %734 = getelementptr float, ptr addrspace(1) %5, i64 %733, !dbg !56
  %735 = sext i32 %724 to i64, !dbg !56
  %736 = getelementptr float, ptr addrspace(1) %5, i64 %735, !dbg !56
  %737 = sext i32 %725 to i64, !dbg !56
  %738 = getelementptr float, ptr addrspace(1) %5, i64 %737, !dbg !56
  %739 = sext i32 %726 to i64, !dbg !56
  %740 = getelementptr float, ptr addrspace(1) %5, i64 %739, !dbg !56
  %741 = sext i32 %727 to i64, !dbg !56
  %742 = getelementptr float, ptr addrspace(1) %5, i64 %741, !dbg !56
  %743 = sext i32 %728 to i64, !dbg !56
  %744 = getelementptr float, ptr addrspace(1) %5, i64 %743, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %745 = mul nuw nsw i32 %20, 17, !dbg !57
  %746 = zext nneg i32 %745 to i64, !dbg !57
  %747 = getelementptr float, ptr addrspace(3) @global_smem, i64 %746, !dbg !57
  %748 = insertelement <1 x float> poison, float %697, i64 0, !dbg !57
  store <1 x float> %748, ptr addrspace(3) %747, align 4, !dbg !57
  %749 = getelementptr i8, ptr addrspace(3) %747, i64 4, !dbg !57
  %750 = insertelement <1 x float> poison, float %698, i64 0, !dbg !57
  store <1 x float> %750, ptr addrspace(3) %749, align 4, !dbg !57
  %751 = getelementptr i8, ptr addrspace(3) %747, i64 8, !dbg !57
  %752 = insertelement <1 x float> poison, float %699, i64 0, !dbg !57
  store <1 x float> %752, ptr addrspace(3) %751, align 4, !dbg !57
  %753 = getelementptr i8, ptr addrspace(3) %747, i64 12, !dbg !57
  %754 = insertelement <1 x float> poison, float %700, i64 0, !dbg !57
  store <1 x float> %754, ptr addrspace(3) %753, align 4, !dbg !57
  %755 = getelementptr i8, ptr addrspace(3) %747, i64 16, !dbg !57
  %756 = insertelement <1 x float> poison, float %701, i64 0, !dbg !57
  store <1 x float> %756, ptr addrspace(3) %755, align 4, !dbg !57
  %757 = getelementptr i8, ptr addrspace(3) %747, i64 20, !dbg !57
  %758 = insertelement <1 x float> poison, float %702, i64 0, !dbg !57
  store <1 x float> %758, ptr addrspace(3) %757, align 4, !dbg !57
  %759 = getelementptr i8, ptr addrspace(3) %747, i64 24, !dbg !57
  %760 = insertelement <1 x float> poison, float %703, i64 0, !dbg !57
  store <1 x float> %760, ptr addrspace(3) %759, align 4, !dbg !57
  %761 = getelementptr i8, ptr addrspace(3) %747, i64 28, !dbg !57
  %762 = insertelement <1 x float> poison, float %704, i64 0, !dbg !57
  store <1 x float> %762, ptr addrspace(3) %761, align 4, !dbg !57
  %763 = getelementptr i8, ptr addrspace(3) %747, i64 32, !dbg !57
  %764 = insertelement <1 x float> poison, float %705, i64 0, !dbg !57
  store <1 x float> %764, ptr addrspace(3) %763, align 4, !dbg !57
  %765 = getelementptr i8, ptr addrspace(3) %747, i64 36, !dbg !57
  %766 = insertelement <1 x float> poison, float %706, i64 0, !dbg !57
  store <1 x float> %766, ptr addrspace(3) %765, align 4, !dbg !57
  %767 = getelementptr i8, ptr addrspace(3) %747, i64 40, !dbg !57
  %768 = insertelement <1 x float> poison, float %707, i64 0, !dbg !57
  store <1 x float> %768, ptr addrspace(3) %767, align 4, !dbg !57
  %769 = getelementptr i8, ptr addrspace(3) %747, i64 44, !dbg !57
  %770 = insertelement <1 x float> poison, float %708, i64 0, !dbg !57
  store <1 x float> %770, ptr addrspace(3) %769, align 4, !dbg !57
  %771 = getelementptr i8, ptr addrspace(3) %747, i64 48, !dbg !57
  %772 = insertelement <1 x float> poison, float %709, i64 0, !dbg !57
  store <1 x float> %772, ptr addrspace(3) %771, align 4, !dbg !57
  %773 = getelementptr i8, ptr addrspace(3) %747, i64 52, !dbg !57
  %774 = insertelement <1 x float> poison, float %710, i64 0, !dbg !57
  store <1 x float> %774, ptr addrspace(3) %773, align 4, !dbg !57
  %775 = getelementptr i8, ptr addrspace(3) %747, i64 56, !dbg !57
  %776 = insertelement <1 x float> poison, float %711, i64 0, !dbg !57
  store <1 x float> %776, ptr addrspace(3) %775, align 4, !dbg !57
  %777 = getelementptr i8, ptr addrspace(3) %747, i64 60, !dbg !57
  %778 = insertelement <1 x float> poison, float %712, i64 0, !dbg !57
  store <1 x float> %778, ptr addrspace(3) %777, align 4, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %779 = load i32, ptr addrspace(3) %192, align 4, !dbg !57
  %780 = load i32, ptr addrspace(3) %197, align 4, !dbg !57
  %781 = load i32, ptr addrspace(3) %203, align 4, !dbg !57
  %782 = load i32, ptr addrspace(3) %207, align 4, !dbg !57
  %783 = load i32, ptr addrspace(3) %213, align 4, !dbg !57
  %784 = load i32, ptr addrspace(3) %217, align 4, !dbg !57
  %785 = load i32, ptr addrspace(3) %223, align 4, !dbg !57
  %786 = load i32, ptr addrspace(3) %227, align 4, !dbg !57
  %787 = load i32, ptr addrspace(3) %233, align 4, !dbg !57
  %788 = load i32, ptr addrspace(3) %237, align 4, !dbg !57
  %789 = load i32, ptr addrspace(3) %243, align 4, !dbg !57
  %790 = load i32, ptr addrspace(3) %247, align 4, !dbg !57
  %791 = load i32, ptr addrspace(3) %253, align 4, !dbg !57
  %792 = load i32, ptr addrspace(3) %257, align 4, !dbg !57
  %793 = load i32, ptr addrspace(3) %263, align 4, !dbg !57
  %794 = load i32, ptr addrspace(3) %267, align 4, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %779, i32 %780, ptr addrspace(1) %730, i1 %105) #4, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %781, i32 %782, ptr addrspace(1) %732, i1 %106) #4, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %783, i32 %784, ptr addrspace(1) %734, i1 %107) #4, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %785, i32 %786, ptr addrspace(1) %736, i1 %108) #4, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %787, i32 %788, ptr addrspace(1) %738, i1 %109) #4, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %789, i32 %790, ptr addrspace(1) %740, i1 %110) #4, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %791, i32 %792, ptr addrspace(1) %742, i1 %111) #4, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %793, i32 %794, ptr addrspace(1) %744, i1 %112) #4, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cak5b7ifbyysgpn6c4plcw4cu6dwygnrwa7semwtfe7p7vo3ijno.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu_torch260/ak")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 29, scope: !7)
!11 = !DILocation(line: 20, column: 48, scope: !7)
!12 = !DILocation(line: 20, column: 69, scope: !7)
!13 = !DILocation(line: 20, column: 53, scope: !7)
!14 = !DILocation(line: 20, column: 34, scope: !7)
!15 = !DILocation(line: 20, column: 75, scope: !7)
!16 = !DILocation(line: 21, column: 44, scope: !7)
!17 = !DILocation(line: 21, column: 23, scope: !7)
!18 = !DILocation(line: 22, column: 21, scope: !7)
!19 = !DILocation(line: 23, column: 28, scope: !7)
!20 = !DILocation(line: 23, column: 33, scope: !7)
!21 = !DILocation(line: 24, column: 44, scope: !7)
!22 = !DILocation(line: 24, column: 23, scope: !7)
!23 = !DILocation(line: 25, column: 21, scope: !7)
!24 = !DILocation(line: 27, column: 20, scope: !7)
!25 = !DILocation(line: 29, column: 20, scope: !7)
!26 = !DILocation(line: 29, column: 26, scope: !7)
!27 = !DILocation(line: 30, column: 18, scope: !7)
!28 = !DILocation(line: 32, column: 40, scope: !7)
!29 = !DILocation(line: 32, column: 52, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 32, column: 47, scope: !7)
!32 = !DILocation(line: 32, column: 30, scope: !7)
!33 = !DILocation(line: 32, column: 66, scope: !7)
!34 = !DILocation(line: 32, column: 58, scope: !7)
!35 = !DILocation(line: 33, column: 38, scope: !7)
!36 = !DILocation(line: 33, column: 49, scope: !7)
!37 = !DILocation(line: 33, column: 36, scope: !7)
!38 = !DILocation(line: 33, column: 45, scope: !7)
!39 = !DILocation(line: 33, column: 30, scope: !7)
!40 = !DILocation(line: 33, column: 55, scope: !7)
!41 = !DILocation(line: 34, column: 30, scope: !7)
!42 = !DILocation(line: 34, column: 55, scope: !7)
!43 = !DILocation(line: 35, column: 31, scope: !7)
!44 = !DILocation(line: 35, column: 36, scope: !7)
!45 = !DILocation(line: 36, column: 31, scope: !7)
!46 = !DILocation(line: 36, column: 36, scope: !7)
!47 = !DILocation(line: 39, column: 18, scope: !7)
!48 = !DILocation(line: 41, column: 18, scope: !7)
!49 = !DILocation(line: 42, column: 27, scope: !7)
!50 = !DILocation(line: 37, column: 18, scope: !7)
!51 = !DILocation(line: 43, column: 18, scope: !7)
!52 = !DILocation(line: 44, column: 19, scope: !7)
!53 = !DILocation(line: 45, column: 20, scope: !7)
!54 = !DILocation(line: 46, column: 34, scope: !7)
!55 = !DILocation(line: 46, column: 31, scope: !7)
!56 = !DILocation(line: 46, column: 25, scope: !7)
!57 = !DILocation(line: 46, column: 47, scope: !7)
!58 = !DILocation(line: 46, column: 4, scope: !7)

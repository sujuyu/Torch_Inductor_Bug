; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
__nv_rsqrtf.exit:
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 3, !dbg !12
  %10 = and i32 %9, 7, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, %4, !dbg !14
  %13 = shl i32 %8, 1, !dbg !15
  %14 = and i32 %13, 14, !dbg !15
  %15 = shl i32 %11, 4, !dbg !16
  %16 = or disjoint i32 %15, %14, !dbg !17
  %17 = sext i32 %16 to i64, !dbg !18
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !18
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %18, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #4, !dbg !19
  %20 = extractvalue { i32, i32 } %19, 0, !dbg !19
  %21 = extractvalue { i32, i32 } %19, 1, !dbg !19
  %22 = bitcast i32 %20 to float, !dbg !19
  %23 = bitcast i32 %21 to float, !dbg !19
  %24 = zext nneg i32 %14 to i64, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !20
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #4, !dbg !21
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !22
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #4, !dbg !23
  %29 = fadd float %22, %23, !dbg !24
  %30 = select i1 %12, float %29, float 0.000000e+00, !dbg !24
  %31 = bitcast float %30 to i32, !dbg !29
  %32 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %31, i32 4, i32 31), !dbg !29
  %33 = bitcast i32 %32 to float, !dbg !29
  %34 = fadd float %30, %33, !dbg !24
  %35 = bitcast float %34 to i32, !dbg !29
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 2, i32 31), !dbg !29
  %37 = bitcast i32 %36 to float, !dbg !29
  %38 = fadd float %34, %37, !dbg !24
  %39 = bitcast float %38 to i32, !dbg !29
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 1, i32 31), !dbg !29
  %41 = bitcast i32 %40 to float, !dbg !29
  %42 = fadd float %38, %41, !dbg !24
  %43 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %42, float 1.600000e+01) #4, !dbg !30
  %44 = fsub float %22, %43, !dbg !31
  %45 = fsub float %23, %43, !dbg !31
  %46 = fmul float %44, %44, !dbg !32
  %47 = fmul float %45, %45, !dbg !32
  %48 = fadd float %46, %47, !dbg !33
  %49 = select i1 %12, float %48, float 0.000000e+00, !dbg !33
  %50 = bitcast float %49 to i32, !dbg !35
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 4, i32 31), !dbg !35
  %52 = bitcast i32 %51 to float, !dbg !35
  %53 = fadd float %49, %52, !dbg !33
  %54 = bitcast float %53 to i32, !dbg !35
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 2, i32 31), !dbg !35
  %56 = bitcast i32 %55 to float, !dbg !35
  %57 = fadd float %53, %56, !dbg !33
  %58 = bitcast float %57 to i32, !dbg !35
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 1, i32 31), !dbg !35
  %60 = bitcast i32 %59 to float, !dbg !35
  %61 = fadd float %57, %60, !dbg !33
  %62 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float 1.600000e+01) #4, !dbg !36
  %63 = fadd float %62, 0x3EE4F8B580000000, !dbg !37
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i1 = icmp eq i32 %65, 0, !dbg !38
  br i1 %.not.i1, label %68, label %66, !dbg !38

66:                                               ; preds = %__nv_rsqrtf.exit
  %67 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %63), !dbg !38
  br label %__nv_rsqrtf.exit3, !dbg !38

68:                                               ; preds = %__nv_rsqrtf.exit
  %69 = tail call float @llvm.nvvm.rsqrt.approx.f(float %63), !dbg !38
  br label %__nv_rsqrtf.exit3, !dbg !38

__nv_rsqrtf.exit3:                                ; preds = %66, %68
  %.0.i2 = phi float [ %67, %66 ], [ %69, %68 ], !dbg !38
  %70 = extractvalue { i32, i32 } %28, 1, !dbg !23
  %71 = bitcast i32 %70 to float, !dbg !23
  %72 = extractvalue { i32, i32 } %28, 0, !dbg !23
  %73 = bitcast i32 %72 to float, !dbg !23
  %74 = extractvalue { i32, i32 } %26, 1, !dbg !21
  %75 = bitcast i32 %74 to float, !dbg !21
  %76 = extractvalue { i32, i32 } %26, 0, !dbg !21
  %77 = bitcast i32 %76 to float, !dbg !21
  %78 = fmul float %44, %.0.i2, !dbg !39
  %79 = fmul float %45, %.0.i2, !dbg !39
  %80 = fmul float %78, %77, !dbg !40
  %81 = fmul float %79, %75, !dbg !40
  %82 = fadd float %80, %73, !dbg !41
  %83 = fadd float %81, %71, !dbg !41
  %84 = getelementptr float, ptr addrspace(1) %3, i64 %17, !dbg !42
  %85 = bitcast float %82 to i32, !dbg !43
  %86 = bitcast float %83 to i32, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %85, i32 %86, ptr addrspace(1) %84, i1 %12) #4, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfmj2rybzejtqyrqokrlv3v7bve5q4uqz4q3d4wvonjbrjmqswp5.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu_torch260/fm")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 44, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 34, scope: !7)
!16 = !DILocation(line: 29, column: 39, scope: !7)
!17 = !DILocation(line: 29, column: 36, scope: !7)
!18 = !DILocation(line: 29, column: 30, scope: !7)
!19 = !DILocation(line: 29, column: 45, scope: !7)
!20 = !DILocation(line: 30, column: 31, scope: !7)
!21 = !DILocation(line: 30, column: 36, scope: !7)
!22 = !DILocation(line: 31, column: 31, scope: !7)
!23 = !DILocation(line: 31, column: 36, scope: !7)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/admin/zy429782/miniforge3/envs/torch_preview_0924/lib/python3.10/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!28 = !DILocation(line: 36, column: 24, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 39, column: 19, scope: !7)
!31 = !DILocation(line: 40, column: 19, scope: !7)
!32 = !DILocation(line: 41, column: 20, scope: !7)
!33 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !34)
!34 = !DILocation(line: 44, column: 26, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !34)
!36 = !DILocation(line: 47, column: 20, scope: !7)
!37 = !DILocation(line: 49, column: 20, scope: !7)
!38 = !DILocation(line: 50, column: 28, scope: !7)
!39 = !DILocation(line: 51, column: 20, scope: !7)
!40 = !DILocation(line: 52, column: 20, scope: !7)
!41 = !DILocation(line: 53, column: 20, scope: !7)
!42 = !DILocation(line: 54, column: 25, scope: !7)
!43 = !DILocation(line: 54, column: 47, scope: !7)
!44 = !DILocation(line: 54, column: 4, scope: !7)

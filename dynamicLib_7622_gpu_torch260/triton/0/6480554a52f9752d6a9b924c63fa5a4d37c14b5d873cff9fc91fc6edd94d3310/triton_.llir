; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #4, !dbg !11
  %11 = tail call i32 asm "mov.u32 $0, %nctaid.y;", "=r"() #4, !dbg !12
  %12 = mul i32 %11, %10, !dbg !13
  %13 = add i32 %12, %9, !dbg !14
  %14 = shl i32 %13, 4, !dbg !15
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !16
  %16 = and i32 %15, 31, !dbg !16
  %17 = shl i32 %15, 2, !dbg !16
  %18 = and i32 %17, 12, !dbg !16
  %19 = lshr i32 %15, 5, !dbg !16
  %20 = and i32 %19, 3, !dbg !16
  %21 = or disjoint i32 %14, %18, !dbg !17
  %22 = or disjoint i32 %14, %20, !dbg !17
  %23 = or disjoint i32 %22, 4, !dbg !17
  %24 = or disjoint i32 %22, 8, !dbg !17
  %25 = or disjoint i32 %22, 12, !dbg !17
  %26 = icmp slt i32 %21, %6, !dbg !18
  %27 = icmp slt i32 %22, %6, !dbg !18
  %28 = icmp slt i32 %23, %6, !dbg !18
  %29 = icmp slt i32 %24, %6, !dbg !18
  %30 = icmp slt i32 %25, %6, !dbg !18
  %31 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !19
  %32 = shl i32 %31, 6, !dbg !20
  %33 = lshr i32 %15, 2, !dbg !21
  %34 = and i32 %33, 31, !dbg !21
  %35 = shl i32 %15, 1, !dbg !21
  %36 = and i32 %35, 62, !dbg !21
  %37 = or disjoint i32 %34, %32, !dbg !22
  %38 = or disjoint i32 %37, 32, !dbg !22
  %39 = or disjoint i32 %32, %36, !dbg !22
  %40 = icmp slt i32 %37, 50, !dbg !23
  %41 = icmp slt i32 %38, 50, !dbg !23
  %42 = icmp slt i32 %39, 50, !dbg !23
  %.frozen = freeze i32 %21
  %43 = sdiv i32 %.frozen, 128, !dbg !24
  %44 = sdiv i32 %22, 128, !dbg !24
  %45 = sdiv i32 %23, 128, !dbg !24
  %46 = sdiv i32 %24, 128, !dbg !24
  %47 = sdiv i32 %25, 128, !dbg !24
  %48 = mul i32 %43, 128
  %.decomposed = sub i32 %.frozen, %48
  %.frozen26 = freeze i32 %22
  %49 = sdiv i32 %.frozen26, 16, !dbg !25
  %.frozen28 = freeze i32 %23
  %50 = sdiv i32 %.frozen28, 16, !dbg !25
  %.frozen30 = freeze i32 %24
  %51 = sdiv i32 %.frozen30, 16, !dbg !25
  %.frozen32 = freeze i32 %25
  %52 = sdiv i32 %.frozen32, 16, !dbg !25
  %53 = srem i32 %49, 8, !dbg !26
  %54 = srem i32 %50, 8, !dbg !26
  %55 = srem i32 %51, 8, !dbg !26
  %56 = srem i32 %52, 8, !dbg !26
  %57 = mul i32 %49, 16
  %.decomposed27 = sub i32 %.frozen26, %57
  %58 = mul i32 %50, 16
  %.decomposed29 = sub i32 %.frozen28, %58
  %59 = mul i32 %51, 16
  %.decomposed31 = sub i32 %.frozen30, %59
  %60 = mul i32 %52, 16
  %.decomposed33 = sub i32 %.frozen32, %60
  %61 = shl i32 %37, 7, !dbg !27
  %62 = shl i32 %38, 7, !dbg !27
  %63 = mul i32 %43, 6400, !dbg !28
  %64 = add i32 %63, %.decomposed, !dbg !29
  %65 = add i32 %64, %61, !dbg !30
  %66 = add i32 %64, %62, !dbg !30
  %67 = sext i32 %65 to i64, !dbg !31
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !31
  %69 = sext i32 %66 to i64, !dbg !31
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !31
  %71 = and i1 %40, %26, !dbg !32
  %72 = and i1 %41, %26, !dbg !32
  %73 = and i1 %42, %27, !dbg !32
  %74 = and i1 %28, %42, !dbg !32
  %75 = and i1 %29, %42, !dbg !32
  %76 = and i1 %30, %42, !dbg !32
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 %71) #4, !dbg !33
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !33
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !33
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !33
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !33
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 %72) #4, !dbg !33
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !33
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !33
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !33
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !33
  %87 = lshr i32 %16, 2, !dbg !33
  %88 = shl nuw nsw i32 %20, 3, !dbg !33
  %89 = or disjoint i32 %88, %87, !dbg !33
  %90 = mul nuw nsw i32 %18, 65, !dbg !33
  %91 = add nuw nsw i32 %89, %90, !dbg !33
  %92 = zext nneg i32 %91 to i64, !dbg !33
  %93 = getelementptr float, ptr addrspace(3) @global_smem, i64 %92, !dbg !33
  store i32 %78, ptr addrspace(3) %93, align 4, !dbg !33
  %94 = add nuw nsw i32 %90, 65, !dbg !33
  %95 = add nuw nsw i32 %94, %89, !dbg !33
  %96 = zext nneg i32 %95 to i64, !dbg !33
  %97 = getelementptr float, ptr addrspace(3) @global_smem, i64 %96, !dbg !33
  store i32 %79, ptr addrspace(3) %97, align 4, !dbg !33
  %98 = add nuw nsw i32 %90, 130, !dbg !33
  %99 = add nuw nsw i32 %98, %89, !dbg !33
  %100 = zext nneg i32 %99 to i64, !dbg !33
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i64 %100, !dbg !33
  store i32 %80, ptr addrspace(3) %101, align 4, !dbg !33
  %102 = add nuw nsw i32 %90, 195, !dbg !33
  %103 = add nuw nsw i32 %102, %89, !dbg !33
  %104 = zext nneg i32 %103 to i64, !dbg !33
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i64 %104, !dbg !33
  store i32 %81, ptr addrspace(3) %105, align 4, !dbg !33
  %106 = or disjoint i32 %89, 32, !dbg !33
  %107 = add nuw nsw i32 %106, %90, !dbg !33
  %108 = zext nneg i32 %107 to i64, !dbg !33
  %109 = getelementptr float, ptr addrspace(3) @global_smem, i64 %108, !dbg !33
  store i32 %83, ptr addrspace(3) %109, align 4, !dbg !33
  %110 = add nuw nsw i32 %106, %94, !dbg !33
  %111 = zext nneg i32 %110 to i64, !dbg !33
  %112 = getelementptr float, ptr addrspace(3) @global_smem, i64 %111, !dbg !33
  store i32 %84, ptr addrspace(3) %112, align 4, !dbg !33
  %113 = add nuw nsw i32 %106, %98, !dbg !33
  %114 = zext nneg i32 %113 to i64, !dbg !33
  %115 = getelementptr float, ptr addrspace(3) @global_smem, i64 %114, !dbg !33
  store i32 %85, ptr addrspace(3) %115, align 4, !dbg !33
  %116 = add nuw nsw i32 %106, %102, !dbg !33
  %117 = zext nneg i32 %116 to i64, !dbg !33
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i64 %117, !dbg !33
  store i32 %86, ptr addrspace(3) %118, align 4, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %119 = shl nuw nsw i32 %16, 1, !dbg !33
  %120 = mul nuw nsw i32 %20, 65, !dbg !33
  %121 = add nuw nsw i32 %120, %119, !dbg !33
  %122 = zext nneg i32 %121 to i64, !dbg !33
  %123 = getelementptr float, ptr addrspace(3) @global_smem, i64 %122, !dbg !33
  %124 = load <1 x float>, ptr addrspace(3) %123, align 4, !dbg !33
  %125 = or disjoint i32 %119, 1, !dbg !33
  %126 = add nuw nsw i32 %120, %125, !dbg !33
  %127 = zext nneg i32 %126 to i64, !dbg !33
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i64 %127, !dbg !33
  %129 = load <1 x float>, ptr addrspace(3) %128, align 4, !dbg !33
  %130 = add nuw nsw i32 %120, 260, !dbg !33
  %131 = add nuw nsw i32 %130, %119, !dbg !33
  %132 = zext nneg i32 %131 to i64, !dbg !33
  %133 = getelementptr float, ptr addrspace(3) @global_smem, i64 %132, !dbg !33
  %134 = load <1 x float>, ptr addrspace(3) %133, align 4, !dbg !33
  %135 = add nuw nsw i32 %130, %125, !dbg !33
  %136 = zext nneg i32 %135 to i64, !dbg !33
  %137 = getelementptr float, ptr addrspace(3) @global_smem, i64 %136, !dbg !33
  %138 = load <1 x float>, ptr addrspace(3) %137, align 4, !dbg !33
  %139 = add nuw nsw i32 %120, 520, !dbg !33
  %140 = add nuw nsw i32 %139, %119, !dbg !33
  %141 = zext nneg i32 %140 to i64, !dbg !33
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i64 %141, !dbg !33
  %143 = load <1 x float>, ptr addrspace(3) %142, align 4, !dbg !33
  %144 = add nuw nsw i32 %139, %125, !dbg !33
  %145 = zext nneg i32 %144 to i64, !dbg !33
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i64 %145, !dbg !33
  %147 = load <1 x float>, ptr addrspace(3) %146, align 4, !dbg !33
  %148 = add nuw nsw i32 %120, 780, !dbg !33
  %149 = add nuw nsw i32 %148, %119, !dbg !33
  %150 = zext nneg i32 %149 to i64, !dbg !33
  %151 = getelementptr float, ptr addrspace(3) @global_smem, i64 %150, !dbg !33
  %152 = load <1 x float>, ptr addrspace(3) %151, align 4, !dbg !33
  %153 = add nuw nsw i32 %148, %125, !dbg !33
  %154 = zext nneg i32 %153 to i64, !dbg !33
  %155 = getelementptr float, ptr addrspace(3) @global_smem, i64 %154, !dbg !33
  %156 = load <1 x float>, ptr addrspace(3) %155, align 4, !dbg !33
  %157 = shl i32 %39, 3, !dbg !34
  %158 = or disjoint i32 %157, 8, !dbg !34
  %159 = mul i32 %44, 400, !dbg !35
  %160 = mul i32 %45, 400, !dbg !35
  %161 = mul i32 %46, 400, !dbg !35
  %162 = mul i32 %47, 400, !dbg !35
  %163 = add i32 %159, %53, !dbg !36
  %164 = add i32 %163, %157, !dbg !37
  %165 = add i32 %163, %158, !dbg !37
  %166 = add i32 %160, %54, !dbg !36
  %167 = add i32 %166, %157, !dbg !37
  %168 = add i32 %166, %158, !dbg !37
  %169 = add i32 %161, %55, !dbg !36
  %170 = add i32 %169, %157, !dbg !37
  %171 = add i32 %169, %158, !dbg !37
  %172 = add i32 %162, %56, !dbg !36
  %173 = add i32 %172, %157, !dbg !37
  %174 = add i32 %172, %158, !dbg !37
  %175 = sext i32 %164 to i64, !dbg !38
  %176 = getelementptr float, ptr addrspace(1) %1, i64 %175, !dbg !38
  %177 = sext i32 %165 to i64, !dbg !38
  %178 = getelementptr float, ptr addrspace(1) %1, i64 %177, !dbg !38
  %179 = sext i32 %167 to i64, !dbg !38
  %180 = getelementptr float, ptr addrspace(1) %1, i64 %179, !dbg !38
  %181 = sext i32 %168 to i64, !dbg !38
  %182 = getelementptr float, ptr addrspace(1) %1, i64 %181, !dbg !38
  %183 = sext i32 %170 to i64, !dbg !38
  %184 = getelementptr float, ptr addrspace(1) %1, i64 %183, !dbg !38
  %185 = sext i32 %171 to i64, !dbg !38
  %186 = getelementptr float, ptr addrspace(1) %1, i64 %185, !dbg !38
  %187 = sext i32 %173 to i64, !dbg !38
  %188 = getelementptr float, ptr addrspace(1) %1, i64 %187, !dbg !38
  %189 = sext i32 %174 to i64, !dbg !38
  %190 = getelementptr float, ptr addrspace(1) %1, i64 %189, !dbg !38
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 %73) #4, !dbg !39
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %178, i1 %73) #4, !dbg !39
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 %74) #4, !dbg !39
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 %74) #4, !dbg !39
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 %75) #4, !dbg !39
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 %75) #4, !dbg !39
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 %76) #4, !dbg !39
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %190, i1 %76) #4, !dbg !39
  %199 = getelementptr float, ptr addrspace(1) %2, i64 %175, !dbg !40
  %200 = getelementptr float, ptr addrspace(1) %2, i64 %177, !dbg !40
  %201 = getelementptr float, ptr addrspace(1) %2, i64 %179, !dbg !40
  %202 = getelementptr float, ptr addrspace(1) %2, i64 %181, !dbg !40
  %203 = getelementptr float, ptr addrspace(1) %2, i64 %183, !dbg !40
  %204 = getelementptr float, ptr addrspace(1) %2, i64 %185, !dbg !40
  %205 = getelementptr float, ptr addrspace(1) %2, i64 %187, !dbg !40
  %206 = getelementptr float, ptr addrspace(1) %2, i64 %189, !dbg !40
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %199, i1 %73) #4, !dbg !41
  %208 = bitcast i32 %207 to float, !dbg !41
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 %73) #4, !dbg !41
  %210 = bitcast i32 %209 to float, !dbg !41
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 %74) #4, !dbg !41
  %212 = bitcast i32 %211 to float, !dbg !41
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %202, i1 %74) #4, !dbg !41
  %214 = bitcast i32 %213 to float, !dbg !41
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %203, i1 %75) #4, !dbg !41
  %216 = bitcast i32 %215 to float, !dbg !41
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %204, i1 %75) #4, !dbg !41
  %218 = bitcast i32 %217 to float, !dbg !41
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %205, i1 %76) #4, !dbg !41
  %220 = bitcast i32 %219 to float, !dbg !41
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %206, i1 %76) #4, !dbg !41
  %222 = bitcast i32 %221 to float, !dbg !41
  %223 = sext i32 %.decomposed27 to i64, !dbg !42
  %224 = getelementptr float, ptr addrspace(1) %3, i64 %223, !dbg !42
  %225 = sext i32 %.decomposed29 to i64, !dbg !42
  %226 = getelementptr float, ptr addrspace(1) %3, i64 %225, !dbg !42
  %227 = sext i32 %.decomposed31 to i64, !dbg !42
  %228 = getelementptr float, ptr addrspace(1) %3, i64 %227, !dbg !42
  %229 = sext i32 %.decomposed33 to i64, !dbg !42
  %230 = getelementptr float, ptr addrspace(1) %3, i64 %229, !dbg !42
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %224, i1 %27) #4, !dbg !43
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %224, i1 %27) #4, !dbg !43
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 %28) #4, !dbg !43
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 %28) #4, !dbg !43
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %228, i1 %29) #4, !dbg !43
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %228, i1 %29) #4, !dbg !43
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %230, i1 %30) #4, !dbg !43
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %230, i1 %30) #4, !dbg !43
  %239 = getelementptr float, ptr addrspace(1) %4, i64 %223, !dbg !44
  %240 = getelementptr float, ptr addrspace(1) %4, i64 %225, !dbg !44
  %241 = getelementptr float, ptr addrspace(1) %4, i64 %227, !dbg !44
  %242 = getelementptr float, ptr addrspace(1) %4, i64 %229, !dbg !44
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %239, i1 %27) #4, !dbg !45
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %239, i1 %27) #4, !dbg !45
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 %28) #4, !dbg !45
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 %28) #4, !dbg !45
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %241, i1 %29) #4, !dbg !45
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %241, i1 %29) #4, !dbg !45
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 %30) #4, !dbg !45
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 %30) #4, !dbg !45
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %208, float 1.600000e+01) #4, !dbg !46
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %210, float 1.600000e+01) #4, !dbg !46
  %253 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %212, float 1.600000e+01) #4, !dbg !46
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %214, float 1.600000e+01) #4, !dbg !46
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %216, float 1.600000e+01) #4, !dbg !46
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %218, float 1.600000e+01) #4, !dbg !46
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %220, float 1.600000e+01) #4, !dbg !46
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %222, float 1.600000e+01) #4, !dbg !46
  %259 = fadd float %251, 0x3EE4F8B580000000, !dbg !47
  %260 = fadd float %252, 0x3EE4F8B580000000, !dbg !47
  %261 = fadd float %253, 0x3EE4F8B580000000, !dbg !47
  %262 = fadd float %254, 0x3EE4F8B580000000, !dbg !47
  %263 = fadd float %255, 0x3EE4F8B580000000, !dbg !47
  %264 = fadd float %256, 0x3EE4F8B580000000, !dbg !47
  %265 = fadd float %257, 0x3EE4F8B580000000, !dbg !47
  %266 = fadd float %258, 0x3EE4F8B580000000, !dbg !47
  %267 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !48
  %.not.i = icmp eq i32 %267, 0, !dbg !48
  br i1 %.not.i, label %270, label %268, !dbg !48

268:                                              ; preds = %8
  %269 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %259), !dbg !48
  br label %__nv_rsqrtf.exit, !dbg !48

270:                                              ; preds = %8
  %271 = tail call float @llvm.nvvm.rsqrt.approx.f(float %259), !dbg !48
  br label %__nv_rsqrtf.exit, !dbg !48

__nv_rsqrtf.exit:                                 ; preds = %268, %270
  %.0.i = phi float [ %269, %268 ], [ %271, %270 ], !dbg !48
  %272 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !48
  %.not.i3 = icmp eq i32 %272, 0, !dbg !48
  br i1 %.not.i3, label %275, label %273, !dbg !48

273:                                              ; preds = %__nv_rsqrtf.exit
  %274 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %260), !dbg !48
  br label %__nv_rsqrtf.exit5, !dbg !48

275:                                              ; preds = %__nv_rsqrtf.exit
  %276 = tail call float @llvm.nvvm.rsqrt.approx.f(float %260), !dbg !48
  br label %__nv_rsqrtf.exit5, !dbg !48

__nv_rsqrtf.exit5:                                ; preds = %273, %275
  %.0.i4 = phi float [ %274, %273 ], [ %276, %275 ], !dbg !48
  %277 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !48
  %.not.i6 = icmp eq i32 %277, 0, !dbg !48
  br i1 %.not.i6, label %280, label %278, !dbg !48

278:                                              ; preds = %__nv_rsqrtf.exit5
  %279 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %261), !dbg !48
  br label %__nv_rsqrtf.exit8, !dbg !48

280:                                              ; preds = %__nv_rsqrtf.exit5
  %281 = tail call float @llvm.nvvm.rsqrt.approx.f(float %261), !dbg !48
  br label %__nv_rsqrtf.exit8, !dbg !48

__nv_rsqrtf.exit8:                                ; preds = %278, %280
  %.0.i7 = phi float [ %279, %278 ], [ %281, %280 ], !dbg !48
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !48
  %.not.i9 = icmp eq i32 %282, 0, !dbg !48
  br i1 %.not.i9, label %285, label %283, !dbg !48

283:                                              ; preds = %__nv_rsqrtf.exit8
  %284 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %262), !dbg !48
  br label %__nv_rsqrtf.exit11, !dbg !48

285:                                              ; preds = %__nv_rsqrtf.exit8
  %286 = tail call float @llvm.nvvm.rsqrt.approx.f(float %262), !dbg !48
  br label %__nv_rsqrtf.exit11, !dbg !48

__nv_rsqrtf.exit11:                               ; preds = %283, %285
  %.0.i10 = phi float [ %284, %283 ], [ %286, %285 ], !dbg !48
  %287 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !48
  %.not.i12 = icmp eq i32 %287, 0, !dbg !48
  br i1 %.not.i12, label %290, label %288, !dbg !48

288:                                              ; preds = %__nv_rsqrtf.exit11
  %289 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %263), !dbg !48
  br label %__nv_rsqrtf.exit14, !dbg !48

290:                                              ; preds = %__nv_rsqrtf.exit11
  %291 = tail call float @llvm.nvvm.rsqrt.approx.f(float %263), !dbg !48
  br label %__nv_rsqrtf.exit14, !dbg !48

__nv_rsqrtf.exit14:                               ; preds = %288, %290
  %.0.i13 = phi float [ %289, %288 ], [ %291, %290 ], !dbg !48
  %292 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !48
  %.not.i15 = icmp eq i32 %292, 0, !dbg !48
  br i1 %.not.i15, label %295, label %293, !dbg !48

293:                                              ; preds = %__nv_rsqrtf.exit14
  %294 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %264), !dbg !48
  br label %__nv_rsqrtf.exit17, !dbg !48

295:                                              ; preds = %__nv_rsqrtf.exit14
  %296 = tail call float @llvm.nvvm.rsqrt.approx.f(float %264), !dbg !48
  br label %__nv_rsqrtf.exit17, !dbg !48

__nv_rsqrtf.exit17:                               ; preds = %293, %295
  %.0.i16 = phi float [ %294, %293 ], [ %296, %295 ], !dbg !48
  %297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !48
  %.not.i18 = icmp eq i32 %297, 0, !dbg !48
  br i1 %.not.i18, label %300, label %298, !dbg !48

298:                                              ; preds = %__nv_rsqrtf.exit17
  %299 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %265), !dbg !48
  br label %__nv_rsqrtf.exit20, !dbg !48

300:                                              ; preds = %__nv_rsqrtf.exit17
  %301 = tail call float @llvm.nvvm.rsqrt.approx.f(float %265), !dbg !48
  br label %__nv_rsqrtf.exit20, !dbg !48

__nv_rsqrtf.exit20:                               ; preds = %298, %300
  %.0.i19 = phi float [ %299, %298 ], [ %301, %300 ], !dbg !48
  %302 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !48
  %.not.i21 = icmp eq i32 %302, 0, !dbg !48
  br i1 %.not.i21, label %305, label %303, !dbg !48

303:                                              ; preds = %__nv_rsqrtf.exit20
  %304 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %266), !dbg !48
  br label %__nv_rsqrtf.exit23, !dbg !48

305:                                              ; preds = %__nv_rsqrtf.exit20
  %306 = tail call float @llvm.nvvm.rsqrt.approx.f(float %266), !dbg !48
  br label %__nv_rsqrtf.exit23, !dbg !48

__nv_rsqrtf.exit23:                               ; preds = %303, %305
  %.0.i22 = phi float [ %304, %303 ], [ %306, %305 ], !dbg !48
  %307 = extractelement <1 x float> %156, i64 0, !dbg !33
  %308 = bitcast i32 %198 to float, !dbg !39
  %309 = fsub float %307, %308, !dbg !49
  %310 = extractelement <1 x float> %152, i64 0, !dbg !33
  %311 = bitcast i32 %197 to float, !dbg !39
  %312 = fsub float %310, %311, !dbg !49
  %313 = extractelement <1 x float> %147, i64 0, !dbg !33
  %314 = bitcast i32 %196 to float, !dbg !39
  %315 = fsub float %313, %314, !dbg !49
  %316 = extractelement <1 x float> %143, i64 0, !dbg !33
  %317 = bitcast i32 %195 to float, !dbg !39
  %318 = fsub float %316, %317, !dbg !49
  %319 = extractelement <1 x float> %138, i64 0, !dbg !33
  %320 = bitcast i32 %194 to float, !dbg !39
  %321 = fsub float %319, %320, !dbg !49
  %322 = extractelement <1 x float> %134, i64 0, !dbg !33
  %323 = bitcast i32 %193 to float, !dbg !39
  %324 = fsub float %322, %323, !dbg !49
  %325 = extractelement <1 x float> %129, i64 0, !dbg !33
  %326 = bitcast i32 %192 to float, !dbg !39
  %327 = fsub float %325, %326, !dbg !49
  %328 = extractelement <1 x float> %124, i64 0, !dbg !33
  %329 = bitcast i32 %191 to float, !dbg !39
  %330 = fsub float %328, %329, !dbg !49
  %331 = bitcast i32 %250 to float, !dbg !45
  %332 = bitcast i32 %248 to float, !dbg !45
  %333 = bitcast i32 %246 to float, !dbg !45
  %334 = bitcast i32 %244 to float, !dbg !45
  %335 = bitcast i32 %238 to float, !dbg !43
  %336 = bitcast i32 %236 to float, !dbg !43
  %337 = bitcast i32 %234 to float, !dbg !43
  %338 = bitcast i32 %232 to float, !dbg !43
  %339 = fmul float %330, %.0.i, !dbg !50
  %340 = fmul float %327, %.0.i4, !dbg !50
  %341 = fmul float %324, %.0.i7, !dbg !50
  %342 = fmul float %321, %.0.i10, !dbg !50
  %343 = fmul float %318, %.0.i13, !dbg !50
  %344 = fmul float %315, %.0.i16, !dbg !50
  %345 = fmul float %312, %.0.i19, !dbg !50
  %346 = fmul float %309, %.0.i22, !dbg !50
  %347 = fmul float %339, %338, !dbg !51
  %348 = fmul float %340, %338, !dbg !51
  %349 = fmul float %341, %337, !dbg !51
  %350 = fmul float %342, %337, !dbg !51
  %351 = fmul float %343, %336, !dbg !51
  %352 = fmul float %344, %336, !dbg !51
  %353 = fmul float %345, %335, !dbg !51
  %354 = fmul float %346, %335, !dbg !51
  %355 = fadd float %347, %334, !dbg !52
  %356 = fadd float %348, %334, !dbg !52
  %357 = fadd float %349, %333, !dbg !52
  %358 = fadd float %350, %333, !dbg !52
  %359 = fadd float %351, %332, !dbg !52
  %360 = fadd float %352, %332, !dbg !52
  %361 = fadd float %353, %331, !dbg !52
  %362 = fadd float %354, %331, !dbg !52
  %363 = mul i32 %22, 50, !dbg !53
  %364 = mul i32 %23, 50, !dbg !53
  %365 = mul i32 %24, 50, !dbg !53
  %366 = mul i32 %25, 50, !dbg !53
  %367 = add i32 %363, %39, !dbg !54
  %368 = add i32 %39, %364, !dbg !54
  %369 = add i32 %39, %365, !dbg !54
  %370 = add i32 %39, %366, !dbg !54
  %371 = sext i32 %367 to i64, !dbg !55
  %372 = getelementptr float, ptr addrspace(1) %5, i64 %371, !dbg !55
  %373 = sext i32 %368 to i64, !dbg !55
  %374 = getelementptr float, ptr addrspace(1) %5, i64 %373, !dbg !55
  %375 = sext i32 %369 to i64, !dbg !55
  %376 = getelementptr float, ptr addrspace(1) %5, i64 %375, !dbg !55
  %377 = sext i32 %370 to i64, !dbg !55
  %378 = getelementptr float, ptr addrspace(1) %5, i64 %377, !dbg !55
  %379 = bitcast float %355 to i32, !dbg !56
  %380 = bitcast float %356 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %379, i32 %380, ptr addrspace(1) %372, i1 %73) #4, !dbg !56
  %381 = bitcast float %357 to i32, !dbg !56
  %382 = bitcast float %358 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %381, i32 %382, ptr addrspace(1) %374, i1 %74) #4, !dbg !56
  %383 = bitcast float %359 to i32, !dbg !56
  %384 = bitcast float %360 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %383, i32 %384, ptr addrspace(1) %376, i1 %75) #4, !dbg !56
  %385 = bitcast float %361 to i32, !dbg !56
  %386 = bitcast float %362 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %385, i32 %386, ptr addrspace(1) %378, i1 %76) #4, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cak5b7ifbyysgpn6c4plcw4cu6dwygnrwa7semwtfe7p7vo3ijno.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu_torch260/ak")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 29, scope: !7)
!11 = !DILocation(line: 20, column: 48, scope: !7)
!12 = !DILocation(line: 20, column: 69, scope: !7)
!13 = !DILocation(line: 20, column: 53, scope: !7)
!14 = !DILocation(line: 20, column: 34, scope: !7)
!15 = !DILocation(line: 20, column: 75, scope: !7)
!16 = !DILocation(line: 21, column: 44, scope: !7)
!17 = !DILocation(line: 21, column: 23, scope: !7)
!18 = !DILocation(line: 22, column: 21, scope: !7)
!19 = !DILocation(line: 23, column: 28, scope: !7)
!20 = !DILocation(line: 23, column: 33, scope: !7)
!21 = !DILocation(line: 24, column: 44, scope: !7)
!22 = !DILocation(line: 24, column: 23, scope: !7)
!23 = !DILocation(line: 25, column: 21, scope: !7)
!24 = !DILocation(line: 27, column: 20, scope: !7)
!25 = !DILocation(line: 29, column: 20, scope: !7)
!26 = !DILocation(line: 29, column: 26, scope: !7)
!27 = !DILocation(line: 32, column: 40, scope: !7)
!28 = !DILocation(line: 32, column: 52, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 32, column: 47, scope: !7)
!31 = !DILocation(line: 32, column: 30, scope: !7)
!32 = !DILocation(line: 32, column: 66, scope: !7)
!33 = !DILocation(line: 32, column: 58, scope: !7)
!34 = !DILocation(line: 33, column: 38, scope: !7)
!35 = !DILocation(line: 33, column: 49, scope: !7)
!36 = !DILocation(line: 33, column: 36, scope: !7)
!37 = !DILocation(line: 33, column: 45, scope: !7)
!38 = !DILocation(line: 33, column: 30, scope: !7)
!39 = !DILocation(line: 33, column: 55, scope: !7)
!40 = !DILocation(line: 34, column: 30, scope: !7)
!41 = !DILocation(line: 34, column: 55, scope: !7)
!42 = !DILocation(line: 35, column: 31, scope: !7)
!43 = !DILocation(line: 35, column: 36, scope: !7)
!44 = !DILocation(line: 36, column: 31, scope: !7)
!45 = !DILocation(line: 36, column: 36, scope: !7)
!46 = !DILocation(line: 39, column: 18, scope: !7)
!47 = !DILocation(line: 41, column: 18, scope: !7)
!48 = !DILocation(line: 42, column: 27, scope: !7)
!49 = !DILocation(line: 37, column: 18, scope: !7)
!50 = !DILocation(line: 43, column: 18, scope: !7)
!51 = !DILocation(line: 44, column: 19, scope: !7)
!52 = !DILocation(line: 45, column: 20, scope: !7)
!53 = !DILocation(line: 46, column: 34, scope: !7)
!54 = !DILocation(line: 46, column: 31, scope: !7)
!55 = !DILocation(line: 46, column: 25, scope: !7)
!56 = !DILocation(line: 46, column: 47, scope: !7)
!57 = !DILocation(line: 46, column: 4, scope: !7)

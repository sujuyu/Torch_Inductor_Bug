; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 5, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 31, !dbg !12
  %14 = shl i32 %12, 2, !dbg !12
  %15 = and i32 %14, 28, !dbg !12
  %16 = or disjoint i32 %11, %15, !dbg !13
  %17 = or disjoint i32 %11, %13, !dbg !13
  %18 = icmp slt i32 %16, %7, !dbg !14
  %19 = icmp slt i32 %17, %7, !dbg !14
  %20 = lshr i32 %12, 5, !dbg !15
  %21 = lshr i32 %12, 3, !dbg !15
  %.frozen = freeze i32 %16
  %22 = sdiv i32 %.frozen, 176, !dbg !16
  %.frozen1 = freeze i32 %17
  %23 = sdiv i32 %.frozen1, 176, !dbg !16
  %24 = mul i32 %22, 176
  %.decomposed = sub i32 %.frozen, %24
  %25 = mul i32 %23, 176
  %.decomposed2 = sub i32 %.frozen1, %25
  %26 = sext i32 %22 to i64, !dbg !17
  %27 = getelementptr double, ptr addrspace(1) %0, i64 %26, !dbg !17
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 %18) #3, !dbg !18
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 %18) #3, !dbg !18
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 %18) #3, !dbg !18
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 %18) #3, !dbg !18
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !19
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %18) #3, !dbg !20
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %18) #3, !dbg !20
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %18) #3, !dbg !20
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %18) #3, !dbg !20
  %37 = mul i32 %22, 8800, !dbg !21
  %38 = add i32 %37, %.decomposed, !dbg !22
  %39 = sext i32 %.decomposed to i64, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !23
  %41 = sext i32 %23 to i64, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %5, i64 %41, !dbg !24
  %43 = and i32 %21, 31, !dbg !15
  %44 = or disjoint i32 %43, 32, !dbg !15
  %45 = icmp ult i32 %44, 50, !dbg !25
  %46 = insertelement <4 x i64> poison, i64 %31, i64 0, !dbg !18
  %47 = insertelement <4 x i64> %46, i64 %30, i64 1, !dbg !18
  %48 = insertelement <4 x i64> %47, i64 %29, i64 2, !dbg !18
  %49 = insertelement <4 x i64> %48, i64 %28, i64 3, !dbg !18
  %50 = bitcast <4 x i64> %49 to <4 x double>, !dbg !18
  %51 = mul nuw nsw i32 %43, 176, !dbg !26
  %52 = mul nuw nsw i32 %44, 176, !dbg !26
  %53 = add i32 %38, %51, !dbg !27
  %54 = add i32 %38, %52, !dbg !27
  %55 = sext i32 %53 to i64, !dbg !28
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !28
  %57 = sext i32 %54 to i64, !dbg !28
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !28
  %59 = and i1 %45, %18, !dbg !29
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %56, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !30
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !30
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !30
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !30
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !30
  %65 = bitcast i32 %61 to float, !dbg !30
  %66 = bitcast i32 %62 to float, !dbg !30
  %67 = bitcast i32 %63 to float, !dbg !30
  %68 = bitcast i32 %64 to float, !dbg !30
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 %59, i32 0, i1 %59, i32 0, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #3, !dbg !30
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !30
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !30
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !30
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !30
  %74 = bitcast i32 %70 to float, !dbg !30
  %75 = bitcast i32 %71 to float, !dbg !30
  %76 = bitcast i32 %72 to float, !dbg !30
  %77 = bitcast i32 %73 to float, !dbg !30
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %18) #3, !dbg !31
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !31
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !31
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !31
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !31
  %83 = bitcast i32 %79 to float, !dbg !31
  %84 = bitcast i32 %80 to float, !dbg !31
  %85 = bitcast i32 %81 to float, !dbg !31
  %86 = bitcast i32 %82 to float, !dbg !31
  %87 = getelementptr float, ptr addrspace(1) %4, i64 %55, !dbg !32
  %88 = getelementptr float, ptr addrspace(1) %4, i64 %57, !dbg !32
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %87, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !33
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !33
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !33
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !33
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !33
  %94 = bitcast i32 %90 to float, !dbg !33
  %95 = bitcast i32 %91 to float, !dbg !33
  %96 = bitcast i32 %92 to float, !dbg !33
  %97 = bitcast i32 %93 to float, !dbg !33
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %88, i1 %59, i32 0, i1 %59, i32 0, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #3, !dbg !33
  %99 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !33
  %100 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !33
  %101 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !33
  %102 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !33
  %103 = bitcast i32 %99 to float, !dbg !33
  %104 = bitcast i32 %100 to float, !dbg !33
  %105 = bitcast i32 %101 to float, !dbg !33
  %106 = bitcast i32 %102 to float, !dbg !33
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %19) #3, !dbg !34
  %108 = bitcast i32 %107 to float, !dbg !34
  %109 = fcmp olt <4 x double> %50, <double 5.000000e+01, double 5.000000e+01, double 5.000000e+01, double 5.000000e+01>, !dbg !35
  %110 = fcmp uno <4 x double> %50, zeroinitializer, !dbg !39
  %111 = or <4 x i1> %109, %110, !dbg !40
  %112 = select <4 x i1> %111, <4 x double> %50, <4 x double> <double 5.000000e+01, double 5.000000e+01, double 5.000000e+01, double 5.000000e+01>, !dbg !41
  %113 = shufflevector <4 x double> %112, <4 x double> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !41
  %114 = insertelement <2 x i32> poison, i32 %44, i64 0
  %115 = insertelement <2 x i32> %114, i32 %43, i64 1
  %116 = uitofp nneg <2 x i32> %115 to <2 x double>
  %117 = shufflevector <2 x double> %116, <2 x double> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>
  %118 = fcmp ogt <8 x double> %113, %117, !dbg !42
  %119 = and i32 %33, 2147483647, !dbg !43
  %120 = icmp eq i32 %119, 0, !dbg !43
  %121 = extractelement <8 x i1> %118, i64 7, !dbg !44
  %122 = or i1 %121, %120, !dbg !44
  %123 = extractelement <8 x i1> %118, i64 6, !dbg !44
  %124 = extractelement <8 x i1> %118, i64 5, !dbg !44
  %125 = extractelement <8 x i1> %118, i64 4, !dbg !44
  %126 = extractelement <8 x i1> %118, i64 3, !dbg !44
  %127 = or i1 %126, %120, !dbg !44
  %128 = extractelement <8 x i1> %118, i64 2, !dbg !44
  %129 = extractelement <8 x i1> %118, i64 1, !dbg !44
  %130 = extractelement <8 x i1> %118, i64 0, !dbg !44
  %131 = fadd float %65, %83, !dbg !45
  %132 = fadd float %66, %84, !dbg !45
  %133 = fadd float %67, %85, !dbg !45
  %134 = fadd float %68, %86, !dbg !45
  %135 = fadd float %74, %83, !dbg !45
  %136 = fadd float %75, %84, !dbg !45
  %137 = fadd float %76, %85, !dbg !45
  %138 = fadd float %77, %86, !dbg !45
  %139 = fadd float %131, %94, !dbg !46
  %140 = fadd float %132, %95, !dbg !46
  %141 = fadd float %133, %96, !dbg !46
  %142 = fadd float %134, %97, !dbg !46
  %143 = fadd float %135, %103, !dbg !46
  %144 = fadd float %136, %104, !dbg !46
  %145 = fadd float %137, %105, !dbg !46
  %146 = fadd float %138, %106, !dbg !46
  %147 = select i1 %18, i1 %122, i1 false, !dbg !47
  %148 = select i1 %147, float %139, float 0.000000e+00, !dbg !47
  %149 = select i1 %59, i1 %127, i1 false, !dbg !47
  %150 = select i1 %149, float %143, float 0.000000e+00, !dbg !47
  %151 = fadd float %148, %150, !dbg !48
  %152 = bitcast float %151 to i32, !dbg !53
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 16, i32 31), !dbg !53
  %154 = bitcast i32 %153 to float, !dbg !53
  %155 = fadd float %151, %154, !dbg !48
  %156 = bitcast float %155 to i32, !dbg !53
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 8, i32 31), !dbg !53
  %158 = bitcast i32 %157 to float, !dbg !53
  %159 = fadd float %155, %158, !dbg !48
  %160 = icmp ult i32 %13, 8, !dbg !53
  %161 = and i32 %20, 7, !dbg !53
  %162 = shl nuw nsw i32 %15, 3, !dbg !53
  %163 = or disjoint i32 %162, %161, !dbg !53
  %164 = zext nneg i32 %163 to i64, !dbg !53
  %165 = getelementptr float, ptr addrspace(3) @global_smem, i64 %164, !dbg !53
  %166 = or disjoint i32 %162, 8, !dbg !53
  %167 = or disjoint i32 %166, %161, !dbg !53
  %168 = zext nneg i32 %167 to i64, !dbg !53
  %169 = getelementptr float, ptr addrspace(3) @global_smem, i64 %168, !dbg !53
  %170 = or disjoint i32 %162, 16, !dbg !53
  %171 = or disjoint i32 %170, %161, !dbg !53
  %172 = zext nneg i32 %171 to i64, !dbg !53
  %173 = getelementptr float, ptr addrspace(3) @global_smem, i64 %172, !dbg !53
  %174 = or disjoint i32 %162, 24, !dbg !53
  %175 = or disjoint i32 %174, %161, !dbg !53
  %176 = zext nneg i32 %175 to i64, !dbg !53
  %177 = getelementptr float, ptr addrspace(3) @global_smem, i64 %176, !dbg !53
  %178 = icmp slt i32 %12, 256, !dbg !53
  %179 = sext i32 %12 to i64, !dbg !53
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i64 %179, !dbg !53
  %181 = insertelement <4 x i32> poison, i32 %12, i64 0, !dbg !53
  %182 = insertelement <4 x i32> %181, i32 %36, i64 1, !dbg !53
  %183 = insertelement <4 x i32> %182, i32 %35, i64 2, !dbg !53
  %184 = insertelement <4 x i32> %183, i32 %34, i64 3, !dbg !53
  %185 = and <4 x i32> %184, <i32 7, i32 2147483647, i32 2147483647, i32 2147483647>, !dbg !53
  %186 = icmp eq <4 x i32> %185, zeroinitializer, !dbg !53
  %187 = extractelement <4 x i1> %186, i64 3, !dbg !44
  %188 = or i1 %123, %187, !dbg !44
  %189 = extractelement <4 x i1> %186, i64 2, !dbg !44
  %190 = or i1 %124, %189, !dbg !44
  %191 = extractelement <4 x i1> %186, i64 1, !dbg !44
  %192 = or i1 %125, %191, !dbg !44
  %193 = or i1 %128, %187, !dbg !44
  %194 = or i1 %129, %189, !dbg !44
  %195 = or i1 %130, %191, !dbg !44
  %196 = select i1 %18, i1 %188, i1 false, !dbg !47
  %197 = select i1 %196, float %140, float 0.000000e+00, !dbg !47
  %198 = select i1 %18, i1 %190, i1 false, !dbg !47
  %199 = select i1 %198, float %141, float 0.000000e+00, !dbg !47
  %200 = select i1 %18, i1 %192, i1 false, !dbg !47
  %201 = select i1 %200, float %142, float 0.000000e+00, !dbg !47
  %202 = select i1 %59, i1 %193, i1 false, !dbg !47
  %203 = select i1 %202, float %144, float 0.000000e+00, !dbg !47
  %204 = select i1 %59, i1 %194, i1 false, !dbg !47
  %205 = select i1 %204, float %145, float 0.000000e+00, !dbg !47
  %206 = select i1 %59, i1 %195, i1 false, !dbg !47
  %207 = select i1 %206, float %146, float 0.000000e+00, !dbg !47
  %208 = fadd float %197, %203, !dbg !48
  %209 = fadd float %199, %205, !dbg !48
  %210 = fadd float %201, %207, !dbg !48
  %211 = bitcast float %208 to i32, !dbg !53
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 16, i32 31), !dbg !53
  %213 = bitcast i32 %212 to float, !dbg !53
  %214 = fadd float %208, %213, !dbg !48
  %215 = bitcast float %214 to i32, !dbg !53
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 8, i32 31), !dbg !53
  %217 = bitcast i32 %216 to float, !dbg !53
  %218 = fadd float %214, %217, !dbg !48
  %219 = bitcast float %209 to i32, !dbg !53
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 16, i32 31), !dbg !53
  %221 = bitcast i32 %220 to float, !dbg !53
  %222 = fadd float %209, %221, !dbg !48
  %223 = bitcast float %222 to i32, !dbg !53
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 8, i32 31), !dbg !53
  %225 = bitcast i32 %224 to float, !dbg !53
  %226 = fadd float %222, %225, !dbg !48
  %227 = bitcast float %210 to i32, !dbg !53
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 16, i32 31), !dbg !53
  %229 = bitcast i32 %228 to float, !dbg !53
  %230 = fadd float %210, %229, !dbg !48
  %231 = bitcast float %230 to i32, !dbg !53
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 8, i32 31), !dbg !53
  %233 = bitcast i32 %232 to float, !dbg !53
  %234 = fadd float %230, %233, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, float %159, i1 %160) #3, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, float %218, i1 %160) #3, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, float %226, i1 %160) #3, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, float %234, i1 %160) #3, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %235 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %180, i1 %178) #3, !dbg !53
  %236 = bitcast float %235 to i32, !dbg !53
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 4, i32 31), !dbg !53
  %238 = bitcast i32 %237 to float, !dbg !53
  %239 = fadd float %235, %238, !dbg !48
  %240 = bitcast float %239 to i32, !dbg !53
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 2, i32 31), !dbg !53
  %242 = bitcast i32 %241 to float, !dbg !53
  %243 = fadd float %239, %242, !dbg !48
  %244 = bitcast float %243 to i32, !dbg !53
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 1, i32 31), !dbg !53
  %246 = bitcast i32 %245 to float, !dbg !53
  %247 = fadd float %243, %246, !dbg !48
  %248 = extractelement <4 x i1> %186, i64 0, !dbg !53
  %249 = and i1 %178, %248, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, float %247, i1 %249) #3, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %250 = zext nneg i32 %162 to i64, !dbg !53
  %251 = getelementptr float, ptr addrspace(3) @global_smem, i64 %250, !dbg !53
  %252 = load float, ptr addrspace(3) %251, align 16, !dbg !53
  %253 = zext nneg i32 %166 to i64, !dbg !53
  %254 = getelementptr float, ptr addrspace(3) @global_smem, i64 %253, !dbg !53
  %255 = load float, ptr addrspace(3) %254, align 16, !dbg !53
  %256 = zext nneg i32 %170 to i64, !dbg !53
  %257 = getelementptr float, ptr addrspace(3) @global_smem, i64 %256, !dbg !53
  %258 = load float, ptr addrspace(3) %257, align 16, !dbg !53
  %259 = zext nneg i32 %174 to i64, !dbg !53
  %260 = getelementptr float, ptr addrspace(3) @global_smem, i64 %259, !dbg !53
  %261 = load float, ptr addrspace(3) %260, align 16, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %262 = extractelement <4 x i32> %185, i64 0, !dbg !54
  %263 = shl nuw nsw i32 %262, 2, !dbg !54
  %264 = zext nneg i32 %263 to i64, !dbg !54
  %265 = getelementptr float, ptr addrspace(3) @global_smem, i64 %264, !dbg !54
  %266 = insertelement <4 x float> poison, float %252, i64 0, !dbg !54
  %267 = insertelement <4 x float> %266, float %255, i64 1, !dbg !54
  %268 = insertelement <4 x float> %267, float %258, i64 2, !dbg !54
  %269 = insertelement <4 x float> %268, float %261, i64 3, !dbg !54
  store <4 x float> %269, ptr addrspace(3) %265, align 16, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %270 = zext nneg i32 %13 to i64, !dbg !54
  %271 = getelementptr float, ptr addrspace(3) @global_smem, i64 %270, !dbg !54
  %272 = load float, ptr addrspace(3) %271, align 4, !dbg !54
  %273 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %108) #3, !dbg !55
  %274 = fmul float %272, %273, !dbg !54
  %275 = mul i32 %23, 1872, !dbg !56
  %276 = add i32 %275, %.decomposed2, !dbg !57
  %277 = sext i32 %276 to i64, !dbg !58
  %278 = getelementptr float, ptr addrspace(1) %6, i64 %277, !dbg !58
  %279 = icmp eq i32 %161, 0, !dbg !59
  %280 = bitcast float %274 to i32, !dbg !59
  %281 = and i1 %279, %19, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %280, ptr addrspace(1) %278, i1 %281) #3, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci2xsuz5hmbhdp6op2nnf4sykpv2zmuz6hsmprxn4ecqa27pj3gh.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu_torch260/i2")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 44, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 34, scope: !7)
!16 = !DILocation(line: 27, column: 20, scope: !7)
!17 = !DILocation(line: 31, column: 30, scope: !7)
!18 = !DILocation(line: 31, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 53, scope: !7)
!22 = !DILocation(line: 33, column: 37, scope: !7)
!23 = !DILocation(line: 34, column: 31, scope: !7)
!24 = !DILocation(line: 36, column: 31, scope: !7)
!25 = !DILocation(line: 26, column: 21, scope: !7)
!26 = !DILocation(line: 33, column: 41, scope: !7)
!27 = !DILocation(line: 33, column: 48, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 67, scope: !7)
!30 = !DILocation(line: 33, column: 59, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 59, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 74, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/admin/zy429782/miniforge3/envs/torch_preview_0924/lib/python3.10/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 38, column: 40, scope: !7)
!39 = !DILocation(line: 76, column: 21, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 76, column: 16, scope: !36, inlinedAt: !38)
!41 = !DILocation(line: 77, column: 29, scope: !36, inlinedAt: !38)
!42 = !DILocation(line: 41, column: 18, scope: !7)
!43 = !DILocation(line: 43, column: 19, scope: !7)
!44 = !DILocation(line: 44, column: 18, scope: !7)
!45 = !DILocation(line: 45, column: 20, scope: !7)
!46 = !DILocation(line: 46, column: 20, scope: !7)
!47 = !DILocation(line: 49, column: 43, scope: !7)
!48 = !DILocation(line: 256, column: 15, scope: !49, inlinedAt: !52)
!49 = distinct !DILexicalBlockFile(scope: !51, file: !50, discriminator: 0)
!50 = !DIFile(filename: "standard.py", directory: "/home/admin/zy429782/miniforge3/envs/torch_preview_0924/lib/python3.10/site-packages/triton/language")
!51 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!52 = !DILocation(line: 50, column: 26, scope: !7)
!53 = !DILocation(line: 267, column: 36, scope: !51, inlinedAt: !52)
!54 = !DILocation(line: 53, column: 20, scope: !7)
!55 = !DILocation(line: 52, column: 20, scope: !7)
!56 = !DILocation(line: 54, column: 36, scope: !7)
!57 = !DILocation(line: 54, column: 31, scope: !7)
!58 = !DILocation(line: 54, column: 25, scope: !7)
!59 = !DILocation(line: 54, column: 49, scope: !7)
!60 = !DILocation(line: 54, column: 4, scope: !7)

; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 512, !dbg !13
  %12 = icmp slt i32 %10, %3, !dbg !14
  %13 = icmp slt i32 %11, %3, !dbg !14
  %14 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !15
  %15 = insertelement <2 x i32> %14, i32 %10, i64 1, !dbg !15
  %16 = sdiv <2 x i32> %15, <i32 176, i32 176>, !dbg !15
  %17 = sdiv i32 %10, 8800, !dbg !16
  %18 = sdiv i32 %11, 8800, !dbg !16
  %19 = sext i32 %17 to i64, !dbg !17
  %20 = getelementptr double, ptr addrspace(1) %0, i64 %19, !dbg !17
  %21 = sext i32 %18 to i64, !dbg !17
  %22 = getelementptr double, ptr addrspace(1) %0, i64 %21, !dbg !17
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %12) #1, !dbg !18
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %12) #1, !dbg !18
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %12) #1, !dbg !18
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %12) #1, !dbg !18
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 %13) #1, !dbg !18
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 %13) #1, !dbg !18
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 %13) #1, !dbg !18
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 %13) #1, !dbg !18
  %31 = insertelement <8 x i64> poison, i64 %30, i64 0, !dbg !18
  %32 = insertelement <8 x i64> %31, i64 %29, i64 1, !dbg !18
  %33 = insertelement <8 x i64> %32, i64 %28, i64 2, !dbg !18
  %34 = insertelement <8 x i64> %33, i64 %27, i64 3, !dbg !18
  %35 = insertelement <8 x i64> %34, i64 %26, i64 4, !dbg !18
  %36 = insertelement <8 x i64> %35, i64 %25, i64 5, !dbg !18
  %37 = insertelement <8 x i64> %36, i64 %24, i64 6, !dbg !18
  %38 = insertelement <8 x i64> %37, i64 %23, i64 7, !dbg !18
  %39 = bitcast <8 x i64> %38 to <8 x double>, !dbg !18
  %40 = sext i32 %10 to i64, !dbg !19
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !19
  %42 = sext i32 %11 to i64, !dbg !19
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !19
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %12) #1, !dbg !20
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !20
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !20
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !20
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !20
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %13) #1, !dbg !20
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !20
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !20
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !20
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !20
  %54 = fcmp olt <8 x double> %39, <double 5.000000e+01, double 5.000000e+01, double 5.000000e+01, double 5.000000e+01, double 5.000000e+01, double 5.000000e+01, double 5.000000e+01, double 5.000000e+01>, !dbg !21
  %55 = fcmp uno <8 x double> %39, zeroinitializer, !dbg !25
  %56 = or <8 x i1> %54, %55, !dbg !26
  %57 = select <8 x i1> %56, <8 x double> %39, <8 x double> <double 5.000000e+01, double 5.000000e+01, double 5.000000e+01, double 5.000000e+01, double 5.000000e+01, double 5.000000e+01, double 5.000000e+01, double 5.000000e+01>, !dbg !27
  %58 = srem <2 x i32> %16, <i32 50, i32 50>, !dbg !28
  %59 = sitofp <2 x i32> %58 to <2 x double>, !dbg !29
  %60 = shufflevector <2 x double> %59, <2 x double> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !29
  %61 = fcmp ogt <8 x double> %57, %60, !dbg !30
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !31
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !31
  %64 = extractelement <8 x i1> %61, i64 7, !dbg !32
  %65 = select i1 %64, i32 %45, i32 0, !dbg !32
  %66 = extractelement <8 x i1> %61, i64 6, !dbg !32
  %67 = select i1 %66, i32 %46, i32 0, !dbg !32
  %68 = extractelement <8 x i1> %61, i64 5, !dbg !32
  %69 = select i1 %68, i32 %47, i32 0, !dbg !32
  %70 = extractelement <8 x i1> %61, i64 4, !dbg !32
  %71 = select i1 %70, i32 %48, i32 0, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %65, i32 %67, i32 %69, i32 %71, ptr addrspace(1) %62, i1 %12) #1, !dbg !32
  %72 = extractelement <8 x i1> %61, i64 3, !dbg !32
  %73 = select i1 %72, i32 %50, i32 0, !dbg !32
  %74 = extractelement <8 x i1> %61, i64 2, !dbg !32
  %75 = select i1 %74, i32 %51, i32 0, !dbg !32
  %76 = extractelement <8 x i1> %61, i64 1, !dbg !32
  %77 = select i1 %76, i32 %52, i32 0, !dbg !32
  %78 = extractelement <8 x i1> %61, i64 0, !dbg !32
  %79 = select i1 %78, i32 %53, i32 0, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %73, i32 %75, i32 %77, i32 %79, ptr addrspace(1) %63, i1 %13) #1, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4klftg74xd22dfcegyz4qzniaxfxdul5ismk3ac6mjhtv3j27rh.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu_torch260/4k")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 19, column: 28, scope: !7)
!11 = !DILocation(line: 19, column: 33, scope: !7)
!12 = !DILocation(line: 20, column: 36, scope: !7)
!13 = !DILocation(line: 20, column: 23, scope: !7)
!14 = !DILocation(line: 21, column: 21, scope: !7)
!15 = !DILocation(line: 22, column: 20, scope: !7)
!16 = !DILocation(line: 24, column: 37, scope: !7)
!17 = !DILocation(line: 24, column: 31, scope: !7)
!18 = !DILocation(line: 24, column: 43, scope: !7)
!19 = !DILocation(line: 25, column: 30, scope: !7)
!20 = !DILocation(line: 25, column: 35, scope: !7)
!21 = !DILocation(line: 74, column: 15, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/home/admin/zy429782/miniforge3/envs/torch_preview_0924/lib/python3.10/site-packages/torch/_inductor/runtime")
!24 = !DILocation(line: 27, column: 40, scope: !7)
!25 = !DILocation(line: 76, column: 21, scope: !22, inlinedAt: !24)
!26 = !DILocation(line: 76, column: 16, scope: !22, inlinedAt: !24)
!27 = !DILocation(line: 77, column: 29, scope: !22, inlinedAt: !24)
!28 = !DILocation(line: 28, column: 25, scope: !7)
!29 = !DILocation(line: 29, column: 19, scope: !7)
!30 = !DILocation(line: 30, column: 18, scope: !7)
!31 = !DILocation(line: 33, column: 25, scope: !7)
!32 = !DILocation(line: 33, column: 36, scope: !7)
!33 = !DILocation(line: 33, column: 4, scope: !7)

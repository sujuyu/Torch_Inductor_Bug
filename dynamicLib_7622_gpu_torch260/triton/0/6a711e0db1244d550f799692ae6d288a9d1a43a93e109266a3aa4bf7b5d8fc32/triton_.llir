; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 5, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 31, !dbg !12
  %14 = shl i32 %12, 2, !dbg !12
  %15 = and i32 %14, 28, !dbg !12
  %16 = or disjoint i32 %15, 1, !dbg !12
  %17 = or disjoint i32 %15, 2, !dbg !12
  %18 = or disjoint i32 %15, 3, !dbg !12
  %19 = or disjoint i32 %11, %15, !dbg !13
  %20 = or disjoint i32 %11, %16, !dbg !13
  %21 = or disjoint i32 %11, %17, !dbg !13
  %22 = or disjoint i32 %11, %18, !dbg !13
  %23 = or disjoint i32 %11, %13, !dbg !13
  %24 = icmp slt i32 %19, %7, !dbg !14
  %25 = icmp slt i32 %20, %7, !dbg !14
  %26 = icmp slt i32 %21, %7, !dbg !14
  %27 = icmp slt i32 %22, %7, !dbg !14
  %28 = icmp slt i32 %23, %7, !dbg !14
  %29 = lshr i32 %12, 5, !dbg !15
  %30 = lshr i32 %12, 3, !dbg !15
  %.frozen = freeze i32 %19
  %31 = sdiv i32 %.frozen, 172, !dbg !16
  %.frozen1 = freeze i32 %23
  %32 = sdiv i32 %.frozen1, 172, !dbg !16
  %33 = mul i32 %31, 172
  %.decomposed = sub i32 %.frozen, %33
  %34 = srem i32 %20, 172, !dbg !17
  %35 = srem i32 %21, 172, !dbg !17
  %36 = srem i32 %22, 172, !dbg !17
  %37 = mul i32 %32, 172
  %.decomposed2 = sub i32 %.frozen1, %37
  %38 = sext i32 %31 to i64, !dbg !18
  %39 = getelementptr double, ptr addrspace(1) %0, i64 %38, !dbg !18
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 %24) #3, !dbg !19
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 %25) #3, !dbg !19
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 %26) #3, !dbg !19
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 %27) #3, !dbg !19
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !20
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %24) #3, !dbg !21
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %25) #3, !dbg !21
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %26) #3, !dbg !21
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %27) #3, !dbg !21
  %49 = mul i32 %31, 8600, !dbg !22
  %50 = sext i32 %.decomposed to i64, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !23
  %52 = sext i32 %34 to i64, !dbg !23
  %53 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !23
  %54 = sext i32 %35 to i64, !dbg !23
  %55 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !23
  %56 = sext i32 %36 to i64, !dbg !23
  %57 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !23
  %58 = sext i32 %32 to i64, !dbg !24
  %59 = getelementptr float, ptr addrspace(1) %5, i64 %58, !dbg !24
  %60 = and i32 %30, 31, !dbg !15
  %61 = or disjoint i32 %60, 32, !dbg !15
  %62 = icmp ult i32 %61, 50, !dbg !25
  %63 = insertelement <4 x i64> poison, i64 %43, i64 0, !dbg !19
  %64 = insertelement <4 x i64> %63, i64 %42, i64 1, !dbg !19
  %65 = insertelement <4 x i64> %64, i64 %41, i64 2, !dbg !19
  %66 = insertelement <4 x i64> %65, i64 %40, i64 3, !dbg !19
  %67 = bitcast <4 x i64> %66 to <4 x double>, !dbg !19
  %68 = mul nuw nsw i32 %60, 172, !dbg !26
  %69 = mul nuw nsw i32 %61, 172, !dbg !26
  %70 = add i32 %49, %68, !dbg !27
  %71 = add i32 %70, %.decomposed, !dbg !28
  %72 = add i32 %70, %34, !dbg !28
  %73 = add i32 %70, %35, !dbg !28
  %74 = add i32 %70, %36, !dbg !28
  %75 = add i32 %49, %69, !dbg !27
  %76 = add i32 %75, %.decomposed, !dbg !28
  %77 = add i32 %75, %34, !dbg !28
  %78 = add i32 %75, %35, !dbg !28
  %79 = add i32 %75, %36, !dbg !28
  %80 = sext i32 %71 to i64, !dbg !29
  %81 = getelementptr float, ptr addrspace(1) %2, i64 %80, !dbg !29
  %82 = sext i32 %72 to i64, !dbg !29
  %83 = getelementptr float, ptr addrspace(1) %2, i64 %82, !dbg !29
  %84 = sext i32 %73 to i64, !dbg !29
  %85 = getelementptr float, ptr addrspace(1) %2, i64 %84, !dbg !29
  %86 = sext i32 %74 to i64, !dbg !29
  %87 = getelementptr float, ptr addrspace(1) %2, i64 %86, !dbg !29
  %88 = sext i32 %76 to i64, !dbg !29
  %89 = getelementptr float, ptr addrspace(1) %2, i64 %88, !dbg !29
  %90 = sext i32 %77 to i64, !dbg !29
  %91 = getelementptr float, ptr addrspace(1) %2, i64 %90, !dbg !29
  %92 = sext i32 %78 to i64, !dbg !29
  %93 = getelementptr float, ptr addrspace(1) %2, i64 %92, !dbg !29
  %94 = sext i32 %79 to i64, !dbg !29
  %95 = getelementptr float, ptr addrspace(1) %2, i64 %94, !dbg !29
  %96 = and i1 %62, %24, !dbg !30
  %97 = and i1 %62, %25, !dbg !30
  %98 = and i1 %62, %26, !dbg !30
  %99 = and i1 %62, %27, !dbg !30
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %24, i32 0, i1 %24) #3, !dbg !31
  %101 = bitcast i32 %100 to float, !dbg !31
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %25, i32 0, i1 %25) #3, !dbg !31
  %103 = bitcast i32 %102 to float, !dbg !31
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %26, i32 0, i1 %26) #3, !dbg !31
  %105 = bitcast i32 %104 to float, !dbg !31
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %27, i32 0, i1 %27) #3, !dbg !31
  %107 = bitcast i32 %106 to float, !dbg !31
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %96, i32 0, i1 %96) #3, !dbg !31
  %109 = bitcast i32 %108 to float, !dbg !31
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %97, i32 0, i1 %97) #3, !dbg !31
  %111 = bitcast i32 %110 to float, !dbg !31
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %98, i32 0, i1 %98) #3, !dbg !31
  %113 = bitcast i32 %112 to float, !dbg !31
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %99, i32 0, i1 %99) #3, !dbg !31
  %115 = bitcast i32 %114 to float, !dbg !31
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %24) #3, !dbg !32
  %117 = bitcast i32 %116 to float, !dbg !32
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %25) #3, !dbg !32
  %119 = bitcast i32 %118 to float, !dbg !32
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %26) #3, !dbg !32
  %121 = bitcast i32 %120 to float, !dbg !32
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %27) #3, !dbg !32
  %123 = bitcast i32 %122 to float, !dbg !32
  %124 = getelementptr float, ptr addrspace(1) %4, i64 %80, !dbg !33
  %125 = getelementptr float, ptr addrspace(1) %4, i64 %82, !dbg !33
  %126 = getelementptr float, ptr addrspace(1) %4, i64 %84, !dbg !33
  %127 = getelementptr float, ptr addrspace(1) %4, i64 %86, !dbg !33
  %128 = getelementptr float, ptr addrspace(1) %4, i64 %88, !dbg !33
  %129 = getelementptr float, ptr addrspace(1) %4, i64 %90, !dbg !33
  %130 = getelementptr float, ptr addrspace(1) %4, i64 %92, !dbg !33
  %131 = getelementptr float, ptr addrspace(1) %4, i64 %94, !dbg !33
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %124, i1 %24, i32 0, i1 %24) #3, !dbg !34
  %133 = bitcast i32 %132 to float, !dbg !34
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %125, i1 %25, i32 0, i1 %25) #3, !dbg !34
  %135 = bitcast i32 %134 to float, !dbg !34
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %26, i32 0, i1 %26) #3, !dbg !34
  %137 = bitcast i32 %136 to float, !dbg !34
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %127, i1 %27, i32 0, i1 %27) #3, !dbg !34
  %139 = bitcast i32 %138 to float, !dbg !34
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %96, i32 0, i1 %96) #3, !dbg !34
  %141 = bitcast i32 %140 to float, !dbg !34
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %129, i1 %97, i32 0, i1 %97) #3, !dbg !34
  %143 = bitcast i32 %142 to float, !dbg !34
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %98, i32 0, i1 %98) #3, !dbg !34
  %145 = bitcast i32 %144 to float, !dbg !34
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %99, i32 0, i1 %99) #3, !dbg !34
  %147 = bitcast i32 %146 to float, !dbg !34
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %28) #3, !dbg !35
  %149 = bitcast i32 %148 to float, !dbg !35
  %150 = fcmp olt <4 x double> %67, <double 5.000000e+01, double 5.000000e+01, double 5.000000e+01, double 5.000000e+01>, !dbg !36
  %151 = fcmp uno <4 x double> %67, zeroinitializer, !dbg !40
  %152 = or <4 x i1> %150, %151, !dbg !41
  %153 = select <4 x i1> %152, <4 x double> %67, <4 x double> <double 5.000000e+01, double 5.000000e+01, double 5.000000e+01, double 5.000000e+01>, !dbg !42
  %154 = shufflevector <4 x double> %153, <4 x double> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !42
  %155 = insertelement <2 x i32> poison, i32 %61, i64 0
  %156 = insertelement <2 x i32> %155, i32 %60, i64 1
  %157 = uitofp nneg <2 x i32> %156 to <2 x double>
  %158 = shufflevector <2 x double> %157, <2 x double> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>
  %159 = fcmp ogt <8 x double> %154, %158, !dbg !43
  %160 = and i32 %45, 2147483647, !dbg !44
  %161 = icmp eq i32 %160, 0, !dbg !44
  %162 = extractelement <8 x i1> %159, i64 7, !dbg !45
  %163 = or i1 %162, %161, !dbg !45
  %164 = extractelement <8 x i1> %159, i64 6, !dbg !45
  %165 = extractelement <8 x i1> %159, i64 5, !dbg !45
  %166 = extractelement <8 x i1> %159, i64 4, !dbg !45
  %167 = extractelement <8 x i1> %159, i64 3, !dbg !45
  %168 = or i1 %167, %161, !dbg !45
  %169 = extractelement <8 x i1> %159, i64 2, !dbg !45
  %170 = extractelement <8 x i1> %159, i64 1, !dbg !45
  %171 = extractelement <8 x i1> %159, i64 0, !dbg !45
  %172 = fadd float %101, %117, !dbg !46
  %173 = fadd float %103, %119, !dbg !46
  %174 = fadd float %105, %121, !dbg !46
  %175 = fadd float %107, %123, !dbg !46
  %176 = fadd float %109, %117, !dbg !46
  %177 = fadd float %111, %119, !dbg !46
  %178 = fadd float %113, %121, !dbg !46
  %179 = fadd float %115, %123, !dbg !46
  %180 = fadd float %172, %133, !dbg !47
  %181 = fadd float %173, %135, !dbg !47
  %182 = fadd float %174, %137, !dbg !47
  %183 = fadd float %175, %139, !dbg !47
  %184 = fadd float %176, %141, !dbg !47
  %185 = fadd float %177, %143, !dbg !47
  %186 = fadd float %178, %145, !dbg !47
  %187 = fadd float %179, %147, !dbg !47
  %188 = select i1 %24, i1 %163, i1 false, !dbg !48
  %189 = select i1 %188, float %180, float 0.000000e+00, !dbg !48
  %190 = select i1 %96, i1 %168, i1 false, !dbg !48
  %191 = select i1 %190, float %184, float 0.000000e+00, !dbg !48
  %192 = fadd float %189, %191, !dbg !49
  %193 = bitcast float %192 to i32, !dbg !54
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 16, i32 31), !dbg !54
  %195 = bitcast i32 %194 to float, !dbg !54
  %196 = fadd float %192, %195, !dbg !49
  %197 = bitcast float %196 to i32, !dbg !54
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 8, i32 31), !dbg !54
  %199 = bitcast i32 %198 to float, !dbg !54
  %200 = fadd float %196, %199, !dbg !49
  %201 = icmp ult i32 %13, 8, !dbg !54
  %202 = and i32 %29, 7, !dbg !54
  %203 = shl nuw nsw i32 %15, 3, !dbg !54
  %204 = or disjoint i32 %203, %202, !dbg !54
  %205 = zext nneg i32 %204 to i64, !dbg !54
  %206 = getelementptr float, ptr addrspace(3) @global_smem, i64 %205, !dbg !54
  %207 = shl nuw nsw i32 %16, 3, !dbg !54
  %208 = or disjoint i32 %207, %202, !dbg !54
  %209 = zext nneg i32 %208 to i64, !dbg !54
  %210 = getelementptr float, ptr addrspace(3) @global_smem, i64 %209, !dbg !54
  %211 = shl nuw nsw i32 %17, 3, !dbg !54
  %212 = or disjoint i32 %211, %202, !dbg !54
  %213 = zext nneg i32 %212 to i64, !dbg !54
  %214 = getelementptr float, ptr addrspace(3) @global_smem, i64 %213, !dbg !54
  %215 = shl nuw nsw i32 %18, 3, !dbg !54
  %216 = or disjoint i32 %215, %202, !dbg !54
  %217 = zext nneg i32 %216 to i64, !dbg !54
  %218 = getelementptr float, ptr addrspace(3) @global_smem, i64 %217, !dbg !54
  %219 = icmp slt i32 %12, 256, !dbg !54
  %220 = sext i32 %12 to i64, !dbg !54
  %221 = getelementptr float, ptr addrspace(3) @global_smem, i64 %220, !dbg !54
  %222 = insertelement <4 x i32> poison, i32 %12, i64 0, !dbg !54
  %223 = insertelement <4 x i32> %222, i32 %48, i64 1, !dbg !54
  %224 = insertelement <4 x i32> %223, i32 %47, i64 2, !dbg !54
  %225 = insertelement <4 x i32> %224, i32 %46, i64 3, !dbg !54
  %226 = and <4 x i32> %225, <i32 7, i32 2147483647, i32 2147483647, i32 2147483647>, !dbg !54
  %227 = icmp eq <4 x i32> %226, zeroinitializer, !dbg !54
  %228 = extractelement <4 x i1> %227, i64 3, !dbg !45
  %229 = or i1 %164, %228, !dbg !45
  %230 = extractelement <4 x i1> %227, i64 2, !dbg !45
  %231 = or i1 %165, %230, !dbg !45
  %232 = extractelement <4 x i1> %227, i64 1, !dbg !45
  %233 = or i1 %166, %232, !dbg !45
  %234 = or i1 %169, %228, !dbg !45
  %235 = or i1 %170, %230, !dbg !45
  %236 = or i1 %171, %232, !dbg !45
  %237 = select i1 %25, i1 %229, i1 false, !dbg !48
  %238 = select i1 %237, float %181, float 0.000000e+00, !dbg !48
  %239 = select i1 %26, i1 %231, i1 false, !dbg !48
  %240 = select i1 %239, float %182, float 0.000000e+00, !dbg !48
  %241 = select i1 %27, i1 %233, i1 false, !dbg !48
  %242 = select i1 %241, float %183, float 0.000000e+00, !dbg !48
  %243 = select i1 %97, i1 %234, i1 false, !dbg !48
  %244 = select i1 %243, float %185, float 0.000000e+00, !dbg !48
  %245 = select i1 %98, i1 %235, i1 false, !dbg !48
  %246 = select i1 %245, float %186, float 0.000000e+00, !dbg !48
  %247 = select i1 %99, i1 %236, i1 false, !dbg !48
  %248 = select i1 %247, float %187, float 0.000000e+00, !dbg !48
  %249 = fadd float %238, %244, !dbg !49
  %250 = fadd float %240, %246, !dbg !49
  %251 = fadd float %242, %248, !dbg !49
  %252 = bitcast float %249 to i32, !dbg !54
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 16, i32 31), !dbg !54
  %254 = bitcast i32 %253 to float, !dbg !54
  %255 = fadd float %249, %254, !dbg !49
  %256 = bitcast float %255 to i32, !dbg !54
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 8, i32 31), !dbg !54
  %258 = bitcast i32 %257 to float, !dbg !54
  %259 = fadd float %255, %258, !dbg !49
  %260 = bitcast float %250 to i32, !dbg !54
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 16, i32 31), !dbg !54
  %262 = bitcast i32 %261 to float, !dbg !54
  %263 = fadd float %250, %262, !dbg !49
  %264 = bitcast float %263 to i32, !dbg !54
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 8, i32 31), !dbg !54
  %266 = bitcast i32 %265 to float, !dbg !54
  %267 = fadd float %263, %266, !dbg !49
  %268 = bitcast float %251 to i32, !dbg !54
  %269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %268, i32 16, i32 31), !dbg !54
  %270 = bitcast i32 %269 to float, !dbg !54
  %271 = fadd float %251, %270, !dbg !49
  %272 = bitcast float %271 to i32, !dbg !54
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 8, i32 31), !dbg !54
  %274 = bitcast i32 %273 to float, !dbg !54
  %275 = fadd float %271, %274, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %206, float %200, i1 %201) #3, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, float %259, i1 %201) #3, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, float %267, i1 %201) #3, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, float %275, i1 %201) #3, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %276 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %221, i1 %219) #3, !dbg !54
  %277 = bitcast float %276 to i32, !dbg !54
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 4, i32 31), !dbg !54
  %279 = bitcast i32 %278 to float, !dbg !54
  %280 = fadd float %276, %279, !dbg !49
  %281 = bitcast float %280 to i32, !dbg !54
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 2, i32 31), !dbg !54
  %283 = bitcast i32 %282 to float, !dbg !54
  %284 = fadd float %280, %283, !dbg !49
  %285 = bitcast float %284 to i32, !dbg !54
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 1, i32 31), !dbg !54
  %287 = bitcast i32 %286 to float, !dbg !54
  %288 = fadd float %284, %287, !dbg !49
  %289 = extractelement <4 x i1> %227, i64 0, !dbg !54
  %290 = and i1 %219, %289, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %221, float %288, i1 %290) #3, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %291 = zext nneg i32 %203 to i64, !dbg !54
  %292 = getelementptr float, ptr addrspace(3) @global_smem, i64 %291, !dbg !54
  %293 = load float, ptr addrspace(3) %292, align 16, !dbg !54
  %294 = zext nneg i32 %207 to i64, !dbg !54
  %295 = getelementptr float, ptr addrspace(3) @global_smem, i64 %294, !dbg !54
  %296 = load float, ptr addrspace(3) %295, align 16, !dbg !54
  %297 = zext nneg i32 %211 to i64, !dbg !54
  %298 = getelementptr float, ptr addrspace(3) @global_smem, i64 %297, !dbg !54
  %299 = load float, ptr addrspace(3) %298, align 16, !dbg !54
  %300 = zext nneg i32 %215 to i64, !dbg !54
  %301 = getelementptr float, ptr addrspace(3) @global_smem, i64 %300, !dbg !54
  %302 = load float, ptr addrspace(3) %301, align 16, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %303 = extractelement <4 x i32> %226, i64 0, !dbg !55
  %304 = shl nuw nsw i32 %303, 2, !dbg !55
  %305 = zext nneg i32 %304 to i64, !dbg !55
  %306 = getelementptr float, ptr addrspace(3) @global_smem, i64 %305, !dbg !55
  %307 = insertelement <4 x float> poison, float %293, i64 0, !dbg !55
  %308 = insertelement <4 x float> %307, float %296, i64 1, !dbg !55
  %309 = insertelement <4 x float> %308, float %299, i64 2, !dbg !55
  %310 = insertelement <4 x float> %309, float %302, i64 3, !dbg !55
  store <4 x float> %310, ptr addrspace(3) %306, align 16, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %311 = zext nneg i32 %13 to i64, !dbg !55
  %312 = getelementptr float, ptr addrspace(3) @global_smem, i64 %311, !dbg !55
  %313 = load float, ptr addrspace(3) %312, align 4, !dbg !55
  %314 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %149) #3, !dbg !56
  %315 = fmul float %313, %314, !dbg !55
  %316 = mul i32 %32, 1872, !dbg !57
  %317 = add i32 %316, %.decomposed2, !dbg !58
  %318 = sext i32 %317 to i64, !dbg !59
  %319 = getelementptr float, ptr addrspace(1) %6, i64 %318, !dbg !59
  %320 = icmp eq i32 %202, 0, !dbg !60
  %321 = bitcast float %315 to i32, !dbg !60
  %322 = and i1 %320, %28, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %321, ptr addrspace(1) %319, i1 %322) #3, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr2bzfsu7zlnmu74s6vf5fnysuwuhxgpcom7tsaz4267anppe7np.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu_torch260/r2")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 44, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 34, scope: !7)
!16 = !DILocation(line: 27, column: 20, scope: !7)
!17 = !DILocation(line: 29, column: 18, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 33, column: 53, scope: !7)
!23 = !DILocation(line: 34, column: 31, scope: !7)
!24 = !DILocation(line: 36, column: 31, scope: !7)
!25 = !DILocation(line: 26, column: 21, scope: !7)
!26 = !DILocation(line: 33, column: 41, scope: !7)
!27 = !DILocation(line: 33, column: 37, scope: !7)
!28 = !DILocation(line: 33, column: 48, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 67, scope: !7)
!31 = !DILocation(line: 33, column: 59, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 59, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 74, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/admin/zy429782/miniforge3/envs/torch_preview_0924/lib/python3.10/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 38, column: 40, scope: !7)
!40 = !DILocation(line: 76, column: 21, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 76, column: 16, scope: !37, inlinedAt: !39)
!42 = !DILocation(line: 77, column: 29, scope: !37, inlinedAt: !39)
!43 = !DILocation(line: 41, column: 18, scope: !7)
!44 = !DILocation(line: 43, column: 19, scope: !7)
!45 = !DILocation(line: 44, column: 18, scope: !7)
!46 = !DILocation(line: 45, column: 20, scope: !7)
!47 = !DILocation(line: 46, column: 20, scope: !7)
!48 = !DILocation(line: 49, column: 43, scope: !7)
!49 = !DILocation(line: 256, column: 15, scope: !50, inlinedAt: !53)
!50 = distinct !DILexicalBlockFile(scope: !52, file: !51, discriminator: 0)
!51 = !DIFile(filename: "standard.py", directory: "/home/admin/zy429782/miniforge3/envs/torch_preview_0924/lib/python3.10/site-packages/triton/language")
!52 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!53 = !DILocation(line: 50, column: 26, scope: !7)
!54 = !DILocation(line: 267, column: 36, scope: !52, inlinedAt: !53)
!55 = !DILocation(line: 53, column: 20, scope: !7)
!56 = !DILocation(line: 52, column: 20, scope: !7)
!57 = !DILocation(line: 54, column: 36, scope: !7)
!58 = !DILocation(line: 54, column: 31, scope: !7)
!59 = !DILocation(line: 54, column: 25, scope: !7)
!60 = !DILocation(line: 54, column: 49, scope: !7)
!61 = !DILocation(line: 54, column: 4, scope: !7)

; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #4, !dbg !11
  %11 = tail call i32 asm "mov.u32 $0, %nctaid.y;", "=r"() #4, !dbg !12
  %12 = mul i32 %11, %10, !dbg !13
  %13 = add i32 %12, %9, !dbg !14
  %14 = shl i32 %13, 6, !dbg !15
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !16
  %16 = and i32 %15, 31, !dbg !16
  %17 = shl i32 %15, 2, !dbg !16
  %18 = and i32 %17, 60, !dbg !16
  %19 = lshr i32 %15, 5, !dbg !16
  %20 = and i32 %19, 7, !dbg !16
  %21 = or disjoint i32 %14, %18, !dbg !17
  %22 = or disjoint i32 %14, %20, !dbg !17
  %23 = or disjoint i32 %22, 8, !dbg !17
  %24 = or disjoint i32 %22, 16, !dbg !17
  %25 = or disjoint i32 %22, 24, !dbg !17
  %26 = or disjoint i32 %22, 32, !dbg !17
  %27 = or disjoint i32 %22, 40, !dbg !17
  %28 = or disjoint i32 %22, 48, !dbg !17
  %29 = or disjoint i32 %22, 56, !dbg !17
  %30 = icmp slt i32 %21, %6, !dbg !18
  %31 = icmp slt i32 %22, %6, !dbg !18
  %32 = icmp slt i32 %23, %6, !dbg !18
  %33 = icmp slt i32 %24, %6, !dbg !18
  %34 = icmp slt i32 %25, %6, !dbg !18
  %35 = icmp slt i32 %26, %6, !dbg !18
  %36 = icmp slt i32 %27, %6, !dbg !18
  %37 = icmp slt i32 %28, %6, !dbg !18
  %38 = icmp slt i32 %29, %6, !dbg !18
  %39 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !19
  %40 = shl i32 %39, 6, !dbg !20
  %41 = lshr i32 %15, 4, !dbg !21
  %42 = and i32 %41, 15, !dbg !21
  %43 = shl i32 %15, 1, !dbg !21
  %44 = and i32 %43, 62, !dbg !21
  %45 = or disjoint i32 %40, %42, !dbg !22
  %46 = or disjoint i32 %45, 16, !dbg !22
  %47 = or disjoint i32 %45, 32, !dbg !22
  %48 = or disjoint i32 %45, 48, !dbg !22
  %49 = or disjoint i32 %40, %44, !dbg !22
  %50 = icmp slt i32 %45, 50, !dbg !23
  %51 = icmp slt i32 %46, 50, !dbg !23
  %52 = icmp slt i32 %47, 50, !dbg !23
  %53 = icmp slt i32 %48, 50, !dbg !23
  %54 = icmp slt i32 %49, 50, !dbg !23
  %.frozen = freeze i32 %21
  %55 = sdiv i32 %.frozen, 128, !dbg !24
  %56 = sdiv i32 %22, 128, !dbg !24
  %57 = sdiv i32 %23, 128, !dbg !24
  %58 = sdiv i32 %24, 128, !dbg !24
  %59 = sdiv i32 %25, 128, !dbg !24
  %60 = sdiv i32 %26, 128, !dbg !24
  %61 = sdiv i32 %27, 128, !dbg !24
  %62 = sdiv i32 %28, 128, !dbg !24
  %63 = sdiv i32 %29, 128, !dbg !24
  %64 = mul i32 %55, 128
  %.decomposed = sub i32 %.frozen, %64
  %.frozen49 = freeze i32 %22
  %65 = sdiv i32 %.frozen49, 16, !dbg !25
  %.frozen51 = freeze i32 %23
  %66 = sdiv i32 %.frozen51, 16, !dbg !25
  %67 = sdiv i32 %24, 16, !dbg !25
  %.frozen53 = freeze i32 %25
  %68 = sdiv i32 %.frozen53, 16, !dbg !25
  %69 = sdiv i32 %26, 16, !dbg !25
  %.frozen55 = freeze i32 %27
  %70 = sdiv i32 %.frozen55, 16, !dbg !25
  %71 = sdiv i32 %28, 16, !dbg !25
  %.frozen57 = freeze i32 %29
  %72 = sdiv i32 %.frozen57, 16, !dbg !25
  %73 = srem i32 %65, 8, !dbg !26
  %74 = srem i32 %66, 8, !dbg !26
  %75 = srem i32 %67, 8, !dbg !26
  %76 = srem i32 %68, 8, !dbg !26
  %77 = srem i32 %69, 8, !dbg !26
  %78 = srem i32 %70, 8, !dbg !26
  %79 = srem i32 %71, 8, !dbg !26
  %80 = srem i32 %72, 8, !dbg !26
  %81 = mul i32 %65, 16
  %.decomposed50 = sub i32 %.frozen49, %81
  %82 = mul i32 %66, 16
  %.decomposed52 = sub i32 %.frozen51, %82
  %83 = mul i32 %68, 16
  %.decomposed54 = sub i32 %.frozen53, %83
  %84 = mul i32 %70, 16
  %.decomposed56 = sub i32 %.frozen55, %84
  %85 = mul i32 %72, 16
  %.decomposed58 = sub i32 %.frozen57, %85
  %86 = shl i32 %45, 7, !dbg !27
  %87 = shl i32 %46, 7, !dbg !27
  %88 = shl i32 %47, 7, !dbg !27
  %89 = shl i32 %48, 7, !dbg !27
  %90 = mul i32 %55, 6400, !dbg !28
  %91 = add i32 %90, %.decomposed, !dbg !29
  %92 = add i32 %91, %86, !dbg !30
  %93 = add i32 %91, %87, !dbg !30
  %94 = add i32 %91, %88, !dbg !30
  %95 = add i32 %91, %89, !dbg !30
  %96 = sext i32 %92 to i64, !dbg !31
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !31
  %98 = sext i32 %93 to i64, !dbg !31
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !31
  %100 = sext i32 %94 to i64, !dbg !31
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !31
  %102 = sext i32 %95 to i64, !dbg !31
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !31
  %104 = and i1 %50, %30, !dbg !32
  %105 = and i1 %51, %30, !dbg !32
  %106 = and i1 %52, %30, !dbg !32
  %107 = and i1 %53, %30, !dbg !32
  %108 = and i1 %54, %31, !dbg !32
  %109 = and i1 %32, %54, !dbg !32
  %110 = and i1 %33, %54, !dbg !32
  %111 = and i1 %34, %54, !dbg !32
  %112 = and i1 %35, %54, !dbg !32
  %113 = and i1 %36, %54, !dbg !32
  %114 = and i1 %37, %54, !dbg !32
  %115 = and i1 %38, %54, !dbg !32
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %97, i1 %104) #4, !dbg !33
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !33
  %118 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !33
  %119 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !33
  %120 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !33
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %99, i1 %105) #4, !dbg !33
  %122 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !33
  %123 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !33
  %124 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !33
  %125 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !33
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 %106) #4, !dbg !33
  %127 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !33
  %128 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !33
  %129 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !33
  %130 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !33
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %103, i1 %107) #4, !dbg !33
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !33
  %133 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !33
  %134 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !33
  %135 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !33
  %136 = lshr i32 %16, 4, !dbg !33
  %137 = shl nuw nsw i32 %20, 1, !dbg !33
  %138 = or disjoint i32 %137, %136, !dbg !33
  %139 = mul nuw nsw i32 %18, 65, !dbg !33
  %140 = add nuw nsw i32 %138, %139, !dbg !33
  %141 = zext nneg i32 %140 to i64, !dbg !33
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i64 %141, !dbg !33
  store i32 %117, ptr addrspace(3) %142, align 4, !dbg !33
  %143 = add nuw nsw i32 %139, 65, !dbg !33
  %144 = add nuw nsw i32 %143, %138, !dbg !33
  %145 = zext nneg i32 %144 to i64, !dbg !33
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i64 %145, !dbg !33
  store i32 %118, ptr addrspace(3) %146, align 4, !dbg !33
  %147 = add nuw nsw i32 %139, 130, !dbg !33
  %148 = add nuw nsw i32 %147, %138, !dbg !33
  %149 = zext nneg i32 %148 to i64, !dbg !33
  %150 = getelementptr float, ptr addrspace(3) @global_smem, i64 %149, !dbg !33
  store i32 %119, ptr addrspace(3) %150, align 4, !dbg !33
  %151 = add nuw nsw i32 %139, 195, !dbg !33
  %152 = add nuw nsw i32 %151, %138, !dbg !33
  %153 = zext nneg i32 %152 to i64, !dbg !33
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i64 %153, !dbg !33
  store i32 %120, ptr addrspace(3) %154, align 4, !dbg !33
  %155 = or disjoint i32 %138, 16, !dbg !33
  %156 = add nuw nsw i32 %155, %139, !dbg !33
  %157 = zext nneg i32 %156 to i64, !dbg !33
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i64 %157, !dbg !33
  store i32 %122, ptr addrspace(3) %158, align 4, !dbg !33
  %159 = add nuw nsw i32 %155, %143, !dbg !33
  %160 = zext nneg i32 %159 to i64, !dbg !33
  %161 = getelementptr float, ptr addrspace(3) @global_smem, i64 %160, !dbg !33
  store i32 %123, ptr addrspace(3) %161, align 4, !dbg !33
  %162 = add nuw nsw i32 %155, %147, !dbg !33
  %163 = zext nneg i32 %162 to i64, !dbg !33
  %164 = getelementptr float, ptr addrspace(3) @global_smem, i64 %163, !dbg !33
  store i32 %124, ptr addrspace(3) %164, align 4, !dbg !33
  %165 = add nuw nsw i32 %155, %151, !dbg !33
  %166 = zext nneg i32 %165 to i64, !dbg !33
  %167 = getelementptr float, ptr addrspace(3) @global_smem, i64 %166, !dbg !33
  store i32 %125, ptr addrspace(3) %167, align 4, !dbg !33
  %168 = or disjoint i32 %138, 32, !dbg !33
  %169 = add nuw nsw i32 %168, %139, !dbg !33
  %170 = zext nneg i32 %169 to i64, !dbg !33
  %171 = getelementptr float, ptr addrspace(3) @global_smem, i64 %170, !dbg !33
  store i32 %127, ptr addrspace(3) %171, align 4, !dbg !33
  %172 = add nuw nsw i32 %168, %143, !dbg !33
  %173 = zext nneg i32 %172 to i64, !dbg !33
  %174 = getelementptr float, ptr addrspace(3) @global_smem, i64 %173, !dbg !33
  store i32 %128, ptr addrspace(3) %174, align 4, !dbg !33
  %175 = add nuw nsw i32 %168, %147, !dbg !33
  %176 = zext nneg i32 %175 to i64, !dbg !33
  %177 = getelementptr float, ptr addrspace(3) @global_smem, i64 %176, !dbg !33
  store i32 %129, ptr addrspace(3) %177, align 4, !dbg !33
  %178 = add nuw nsw i32 %168, %151, !dbg !33
  %179 = zext nneg i32 %178 to i64, !dbg !33
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i64 %179, !dbg !33
  store i32 %130, ptr addrspace(3) %180, align 4, !dbg !33
  %181 = or disjoint i32 %138, 48, !dbg !33
  %182 = add nuw nsw i32 %181, %139, !dbg !33
  %183 = zext nneg i32 %182 to i64, !dbg !33
  %184 = getelementptr float, ptr addrspace(3) @global_smem, i64 %183, !dbg !33
  store i32 %132, ptr addrspace(3) %184, align 4, !dbg !33
  %185 = add nuw nsw i32 %181, %143, !dbg !33
  %186 = zext nneg i32 %185 to i64, !dbg !33
  %187 = getelementptr float, ptr addrspace(3) @global_smem, i64 %186, !dbg !33
  store i32 %133, ptr addrspace(3) %187, align 4, !dbg !33
  %188 = add nuw nsw i32 %181, %147, !dbg !33
  %189 = zext nneg i32 %188 to i64, !dbg !33
  %190 = getelementptr float, ptr addrspace(3) @global_smem, i64 %189, !dbg !33
  store i32 %134, ptr addrspace(3) %190, align 4, !dbg !33
  %191 = add nuw nsw i32 %181, %151, !dbg !33
  %192 = zext nneg i32 %191 to i64, !dbg !33
  %193 = getelementptr float, ptr addrspace(3) @global_smem, i64 %192, !dbg !33
  store i32 %135, ptr addrspace(3) %193, align 4, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %194 = shl nuw nsw i32 %16, 1, !dbg !33
  %195 = mul nuw nsw i32 %20, 65, !dbg !33
  %196 = add nuw nsw i32 %195, %194, !dbg !33
  %197 = zext nneg i32 %196 to i64, !dbg !33
  %198 = getelementptr float, ptr addrspace(3) @global_smem, i64 %197, !dbg !33
  %199 = load <1 x float>, ptr addrspace(3) %198, align 4, !dbg !33
  %200 = or disjoint i32 %194, 1, !dbg !33
  %201 = add nuw nsw i32 %195, %200, !dbg !33
  %202 = zext nneg i32 %201 to i64, !dbg !33
  %203 = getelementptr float, ptr addrspace(3) @global_smem, i64 %202, !dbg !33
  %204 = load <1 x float>, ptr addrspace(3) %203, align 4, !dbg !33
  %205 = add nuw nsw i32 %195, 520, !dbg !33
  %206 = add nuw nsw i32 %205, %194, !dbg !33
  %207 = zext nneg i32 %206 to i64, !dbg !33
  %208 = getelementptr float, ptr addrspace(3) @global_smem, i64 %207, !dbg !33
  %209 = load <1 x float>, ptr addrspace(3) %208, align 4, !dbg !33
  %210 = add nuw nsw i32 %205, %200, !dbg !33
  %211 = zext nneg i32 %210 to i64, !dbg !33
  %212 = getelementptr float, ptr addrspace(3) @global_smem, i64 %211, !dbg !33
  %213 = load <1 x float>, ptr addrspace(3) %212, align 4, !dbg !33
  %214 = add nuw nsw i32 %195, 1040, !dbg !33
  %215 = add nuw nsw i32 %214, %194, !dbg !33
  %216 = zext nneg i32 %215 to i64, !dbg !33
  %217 = getelementptr float, ptr addrspace(3) @global_smem, i64 %216, !dbg !33
  %218 = load <1 x float>, ptr addrspace(3) %217, align 4, !dbg !33
  %219 = add nuw nsw i32 %214, %200, !dbg !33
  %220 = zext nneg i32 %219 to i64, !dbg !33
  %221 = getelementptr float, ptr addrspace(3) @global_smem, i64 %220, !dbg !33
  %222 = load <1 x float>, ptr addrspace(3) %221, align 4, !dbg !33
  %223 = add nuw nsw i32 %195, 1560, !dbg !33
  %224 = add nuw nsw i32 %223, %194, !dbg !33
  %225 = zext nneg i32 %224 to i64, !dbg !33
  %226 = getelementptr float, ptr addrspace(3) @global_smem, i64 %225, !dbg !33
  %227 = load <1 x float>, ptr addrspace(3) %226, align 4, !dbg !33
  %228 = add nuw nsw i32 %223, %200, !dbg !33
  %229 = zext nneg i32 %228 to i64, !dbg !33
  %230 = getelementptr float, ptr addrspace(3) @global_smem, i64 %229, !dbg !33
  %231 = load <1 x float>, ptr addrspace(3) %230, align 4, !dbg !33
  %232 = add nuw nsw i32 %195, 2080, !dbg !33
  %233 = add nuw nsw i32 %232, %194, !dbg !33
  %234 = zext nneg i32 %233 to i64, !dbg !33
  %235 = getelementptr float, ptr addrspace(3) @global_smem, i64 %234, !dbg !33
  %236 = load <1 x float>, ptr addrspace(3) %235, align 4, !dbg !33
  %237 = add nuw nsw i32 %232, %200, !dbg !33
  %238 = zext nneg i32 %237 to i64, !dbg !33
  %239 = getelementptr float, ptr addrspace(3) @global_smem, i64 %238, !dbg !33
  %240 = load <1 x float>, ptr addrspace(3) %239, align 4, !dbg !33
  %241 = add nuw nsw i32 %195, 2600, !dbg !33
  %242 = add nuw nsw i32 %241, %194, !dbg !33
  %243 = zext nneg i32 %242 to i64, !dbg !33
  %244 = getelementptr float, ptr addrspace(3) @global_smem, i64 %243, !dbg !33
  %245 = load <1 x float>, ptr addrspace(3) %244, align 4, !dbg !33
  %246 = add nuw nsw i32 %241, %200, !dbg !33
  %247 = zext nneg i32 %246 to i64, !dbg !33
  %248 = getelementptr float, ptr addrspace(3) @global_smem, i64 %247, !dbg !33
  %249 = load <1 x float>, ptr addrspace(3) %248, align 4, !dbg !33
  %250 = add nuw nsw i32 %195, 3120, !dbg !33
  %251 = add nuw nsw i32 %250, %194, !dbg !33
  %252 = zext nneg i32 %251 to i64, !dbg !33
  %253 = getelementptr float, ptr addrspace(3) @global_smem, i64 %252, !dbg !33
  %254 = load <1 x float>, ptr addrspace(3) %253, align 4, !dbg !33
  %255 = add nuw nsw i32 %250, %200, !dbg !33
  %256 = zext nneg i32 %255 to i64, !dbg !33
  %257 = getelementptr float, ptr addrspace(3) @global_smem, i64 %256, !dbg !33
  %258 = load <1 x float>, ptr addrspace(3) %257, align 4, !dbg !33
  %259 = add nuw nsw i32 %195, 3640, !dbg !33
  %260 = add nuw nsw i32 %259, %194, !dbg !33
  %261 = zext nneg i32 %260 to i64, !dbg !33
  %262 = getelementptr float, ptr addrspace(3) @global_smem, i64 %261, !dbg !33
  %263 = load <1 x float>, ptr addrspace(3) %262, align 4, !dbg !33
  %264 = add nuw nsw i32 %259, %200, !dbg !33
  %265 = zext nneg i32 %264 to i64, !dbg !33
  %266 = getelementptr float, ptr addrspace(3) @global_smem, i64 %265, !dbg !33
  %267 = load <1 x float>, ptr addrspace(3) %266, align 4, !dbg !33
  %268 = shl i32 %49, 3, !dbg !34
  %269 = or disjoint i32 %268, 8, !dbg !34
  %270 = mul i32 %56, 400, !dbg !35
  %271 = mul i32 %57, 400, !dbg !35
  %272 = mul i32 %58, 400, !dbg !35
  %273 = mul i32 %59, 400, !dbg !35
  %274 = mul i32 %60, 400, !dbg !35
  %275 = mul i32 %61, 400, !dbg !35
  %276 = mul i32 %62, 400, !dbg !35
  %277 = mul i32 %63, 400, !dbg !35
  %278 = add i32 %270, %73, !dbg !36
  %279 = add i32 %278, %268, !dbg !37
  %280 = add i32 %278, %269, !dbg !37
  %281 = add i32 %271, %74, !dbg !36
  %282 = add i32 %281, %268, !dbg !37
  %283 = add i32 %281, %269, !dbg !37
  %284 = add i32 %272, %75, !dbg !36
  %285 = add i32 %284, %268, !dbg !37
  %286 = add i32 %284, %269, !dbg !37
  %287 = add i32 %273, %76, !dbg !36
  %288 = add i32 %287, %268, !dbg !37
  %289 = add i32 %287, %269, !dbg !37
  %290 = add i32 %274, %77, !dbg !36
  %291 = add i32 %290, %268, !dbg !37
  %292 = add i32 %290, %269, !dbg !37
  %293 = add i32 %275, %78, !dbg !36
  %294 = add i32 %293, %268, !dbg !37
  %295 = add i32 %293, %269, !dbg !37
  %296 = add i32 %276, %79, !dbg !36
  %297 = add i32 %296, %268, !dbg !37
  %298 = add i32 %296, %269, !dbg !37
  %299 = add i32 %277, %80, !dbg !36
  %300 = add i32 %299, %268, !dbg !37
  %301 = add i32 %299, %269, !dbg !37
  %302 = sext i32 %279 to i64, !dbg !38
  %303 = getelementptr float, ptr addrspace(1) %1, i64 %302, !dbg !38
  %304 = sext i32 %280 to i64, !dbg !38
  %305 = getelementptr float, ptr addrspace(1) %1, i64 %304, !dbg !38
  %306 = sext i32 %282 to i64, !dbg !38
  %307 = getelementptr float, ptr addrspace(1) %1, i64 %306, !dbg !38
  %308 = sext i32 %283 to i64, !dbg !38
  %309 = getelementptr float, ptr addrspace(1) %1, i64 %308, !dbg !38
  %310 = sext i32 %285 to i64, !dbg !38
  %311 = getelementptr float, ptr addrspace(1) %1, i64 %310, !dbg !38
  %312 = sext i32 %286 to i64, !dbg !38
  %313 = getelementptr float, ptr addrspace(1) %1, i64 %312, !dbg !38
  %314 = sext i32 %288 to i64, !dbg !38
  %315 = getelementptr float, ptr addrspace(1) %1, i64 %314, !dbg !38
  %316 = sext i32 %289 to i64, !dbg !38
  %317 = getelementptr float, ptr addrspace(1) %1, i64 %316, !dbg !38
  %318 = sext i32 %291 to i64, !dbg !38
  %319 = getelementptr float, ptr addrspace(1) %1, i64 %318, !dbg !38
  %320 = sext i32 %292 to i64, !dbg !38
  %321 = getelementptr float, ptr addrspace(1) %1, i64 %320, !dbg !38
  %322 = sext i32 %294 to i64, !dbg !38
  %323 = getelementptr float, ptr addrspace(1) %1, i64 %322, !dbg !38
  %324 = sext i32 %295 to i64, !dbg !38
  %325 = getelementptr float, ptr addrspace(1) %1, i64 %324, !dbg !38
  %326 = sext i32 %297 to i64, !dbg !38
  %327 = getelementptr float, ptr addrspace(1) %1, i64 %326, !dbg !38
  %328 = sext i32 %298 to i64, !dbg !38
  %329 = getelementptr float, ptr addrspace(1) %1, i64 %328, !dbg !38
  %330 = sext i32 %300 to i64, !dbg !38
  %331 = getelementptr float, ptr addrspace(1) %1, i64 %330, !dbg !38
  %332 = sext i32 %301 to i64, !dbg !38
  %333 = getelementptr float, ptr addrspace(1) %1, i64 %332, !dbg !38
  %334 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %303, i1 %108) #4, !dbg !39
  %335 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %305, i1 %108) #4, !dbg !39
  %336 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %307, i1 %109) #4, !dbg !39
  %337 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %309, i1 %109) #4, !dbg !39
  %338 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %311, i1 %110) #4, !dbg !39
  %339 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %313, i1 %110) #4, !dbg !39
  %340 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %315, i1 %111) #4, !dbg !39
  %341 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %317, i1 %111) #4, !dbg !39
  %342 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %319, i1 %112) #4, !dbg !39
  %343 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %321, i1 %112) #4, !dbg !39
  %344 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %323, i1 %113) #4, !dbg !39
  %345 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %325, i1 %113) #4, !dbg !39
  %346 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %327, i1 %114) #4, !dbg !39
  %347 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %329, i1 %114) #4, !dbg !39
  %348 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %331, i1 %115) #4, !dbg !39
  %349 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %333, i1 %115) #4, !dbg !39
  %350 = getelementptr float, ptr addrspace(1) %2, i64 %302, !dbg !40
  %351 = getelementptr float, ptr addrspace(1) %2, i64 %304, !dbg !40
  %352 = getelementptr float, ptr addrspace(1) %2, i64 %306, !dbg !40
  %353 = getelementptr float, ptr addrspace(1) %2, i64 %308, !dbg !40
  %354 = getelementptr float, ptr addrspace(1) %2, i64 %310, !dbg !40
  %355 = getelementptr float, ptr addrspace(1) %2, i64 %312, !dbg !40
  %356 = getelementptr float, ptr addrspace(1) %2, i64 %314, !dbg !40
  %357 = getelementptr float, ptr addrspace(1) %2, i64 %316, !dbg !40
  %358 = getelementptr float, ptr addrspace(1) %2, i64 %318, !dbg !40
  %359 = getelementptr float, ptr addrspace(1) %2, i64 %320, !dbg !40
  %360 = getelementptr float, ptr addrspace(1) %2, i64 %322, !dbg !40
  %361 = getelementptr float, ptr addrspace(1) %2, i64 %324, !dbg !40
  %362 = getelementptr float, ptr addrspace(1) %2, i64 %326, !dbg !40
  %363 = getelementptr float, ptr addrspace(1) %2, i64 %328, !dbg !40
  %364 = getelementptr float, ptr addrspace(1) %2, i64 %330, !dbg !40
  %365 = getelementptr float, ptr addrspace(1) %2, i64 %332, !dbg !40
  %366 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %350, i1 %108) #4, !dbg !41
  %367 = bitcast i32 %366 to float, !dbg !41
  %368 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %351, i1 %108) #4, !dbg !41
  %369 = bitcast i32 %368 to float, !dbg !41
  %370 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %352, i1 %109) #4, !dbg !41
  %371 = bitcast i32 %370 to float, !dbg !41
  %372 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %353, i1 %109) #4, !dbg !41
  %373 = bitcast i32 %372 to float, !dbg !41
  %374 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %354, i1 %110) #4, !dbg !41
  %375 = bitcast i32 %374 to float, !dbg !41
  %376 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %355, i1 %110) #4, !dbg !41
  %377 = bitcast i32 %376 to float, !dbg !41
  %378 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %356, i1 %111) #4, !dbg !41
  %379 = bitcast i32 %378 to float, !dbg !41
  %380 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %357, i1 %111) #4, !dbg !41
  %381 = bitcast i32 %380 to float, !dbg !41
  %382 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %358, i1 %112) #4, !dbg !41
  %383 = bitcast i32 %382 to float, !dbg !41
  %384 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %359, i1 %112) #4, !dbg !41
  %385 = bitcast i32 %384 to float, !dbg !41
  %386 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %360, i1 %113) #4, !dbg !41
  %387 = bitcast i32 %386 to float, !dbg !41
  %388 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %361, i1 %113) #4, !dbg !41
  %389 = bitcast i32 %388 to float, !dbg !41
  %390 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %362, i1 %114) #4, !dbg !41
  %391 = bitcast i32 %390 to float, !dbg !41
  %392 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %363, i1 %114) #4, !dbg !41
  %393 = bitcast i32 %392 to float, !dbg !41
  %394 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %364, i1 %115) #4, !dbg !41
  %395 = bitcast i32 %394 to float, !dbg !41
  %396 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %365, i1 %115) #4, !dbg !41
  %397 = bitcast i32 %396 to float, !dbg !41
  %398 = sext i32 %.decomposed50 to i64, !dbg !42
  %399 = getelementptr float, ptr addrspace(1) %3, i64 %398, !dbg !42
  %400 = sext i32 %.decomposed52 to i64, !dbg !42
  %401 = getelementptr float, ptr addrspace(1) %3, i64 %400, !dbg !42
  %402 = sext i32 %.decomposed54 to i64, !dbg !42
  %403 = getelementptr float, ptr addrspace(1) %3, i64 %402, !dbg !42
  %404 = sext i32 %.decomposed56 to i64, !dbg !42
  %405 = getelementptr float, ptr addrspace(1) %3, i64 %404, !dbg !42
  %406 = sext i32 %.decomposed58 to i64, !dbg !42
  %407 = getelementptr float, ptr addrspace(1) %3, i64 %406, !dbg !42
  %408 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %399, i1 %31) #4, !dbg !43
  %409 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %399, i1 %31) #4, !dbg !43
  %410 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %401, i1 %32) #4, !dbg !43
  %411 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %401, i1 %32) #4, !dbg !43
  %412 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %399, i1 %33) #4, !dbg !43
  %413 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %399, i1 %33) #4, !dbg !43
  %414 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %403, i1 %34) #4, !dbg !43
  %415 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %403, i1 %34) #4, !dbg !43
  %416 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %399, i1 %35) #4, !dbg !43
  %417 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %399, i1 %35) #4, !dbg !43
  %418 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %405, i1 %36) #4, !dbg !43
  %419 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %405, i1 %36) #4, !dbg !43
  %420 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %399, i1 %37) #4, !dbg !43
  %421 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %399, i1 %37) #4, !dbg !43
  %422 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %407, i1 %38) #4, !dbg !43
  %423 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %407, i1 %38) #4, !dbg !43
  %424 = getelementptr float, ptr addrspace(1) %4, i64 %398, !dbg !44
  %425 = getelementptr float, ptr addrspace(1) %4, i64 %400, !dbg !44
  %426 = getelementptr float, ptr addrspace(1) %4, i64 %402, !dbg !44
  %427 = getelementptr float, ptr addrspace(1) %4, i64 %404, !dbg !44
  %428 = getelementptr float, ptr addrspace(1) %4, i64 %406, !dbg !44
  %429 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %424, i1 %31) #4, !dbg !45
  %430 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %424, i1 %31) #4, !dbg !45
  %431 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %425, i1 %32) #4, !dbg !45
  %432 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %425, i1 %32) #4, !dbg !45
  %433 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %424, i1 %33) #4, !dbg !45
  %434 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %424, i1 %33) #4, !dbg !45
  %435 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %426, i1 %34) #4, !dbg !45
  %436 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %426, i1 %34) #4, !dbg !45
  %437 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %424, i1 %35) #4, !dbg !45
  %438 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %424, i1 %35) #4, !dbg !45
  %439 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %427, i1 %36) #4, !dbg !45
  %440 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %427, i1 %36) #4, !dbg !45
  %441 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %424, i1 %37) #4, !dbg !45
  %442 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %424, i1 %37) #4, !dbg !45
  %443 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %428, i1 %38) #4, !dbg !45
  %444 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %428, i1 %38) #4, !dbg !45
  %445 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %367, float 1.600000e+01) #4, !dbg !46
  %446 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %369, float 1.600000e+01) #4, !dbg !46
  %447 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %371, float 1.600000e+01) #4, !dbg !46
  %448 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %373, float 1.600000e+01) #4, !dbg !46
  %449 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %375, float 1.600000e+01) #4, !dbg !46
  %450 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %377, float 1.600000e+01) #4, !dbg !46
  %451 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %379, float 1.600000e+01) #4, !dbg !46
  %452 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %381, float 1.600000e+01) #4, !dbg !46
  %453 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %383, float 1.600000e+01) #4, !dbg !46
  %454 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %385, float 1.600000e+01) #4, !dbg !46
  %455 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %387, float 1.600000e+01) #4, !dbg !46
  %456 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %389, float 1.600000e+01) #4, !dbg !46
  %457 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %391, float 1.600000e+01) #4, !dbg !46
  %458 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %393, float 1.600000e+01) #4, !dbg !46
  %459 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %395, float 1.600000e+01) #4, !dbg !46
  %460 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %397, float 1.600000e+01) #4, !dbg !46
  %461 = fadd float %445, 0x3EE4F8B580000000, !dbg !47
  %462 = fadd float %446, 0x3EE4F8B580000000, !dbg !47
  %463 = fadd float %447, 0x3EE4F8B580000000, !dbg !47
  %464 = fadd float %448, 0x3EE4F8B580000000, !dbg !47
  %465 = fadd float %449, 0x3EE4F8B580000000, !dbg !47
  %466 = fadd float %450, 0x3EE4F8B580000000, !dbg !47
  %467 = fadd float %451, 0x3EE4F8B580000000, !dbg !47
  %468 = fadd float %452, 0x3EE4F8B580000000, !dbg !47
  %469 = fadd float %453, 0x3EE4F8B580000000, !dbg !47
  %470 = fadd float %454, 0x3EE4F8B580000000, !dbg !47
  %471 = fadd float %455, 0x3EE4F8B580000000, !dbg !47
  %472 = fadd float %456, 0x3EE4F8B580000000, !dbg !47
  %473 = fadd float %457, 0x3EE4F8B580000000, !dbg !47
  %474 = fadd float %458, 0x3EE4F8B580000000, !dbg !47
  %475 = fadd float %459, 0x3EE4F8B580000000, !dbg !47
  %476 = fadd float %460, 0x3EE4F8B580000000, !dbg !47
  %477 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !48
  %.not.i = icmp eq i32 %477, 0, !dbg !48
  br i1 %.not.i, label %480, label %478, !dbg !48

478:                                              ; preds = %8
  %479 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %461), !dbg !48
  br label %__nv_rsqrtf.exit, !dbg !48

480:                                              ; preds = %8
  %481 = tail call float @llvm.nvvm.rsqrt.approx.f(float %461), !dbg !48
  br label %__nv_rsqrtf.exit, !dbg !48

__nv_rsqrtf.exit:                                 ; preds = %478, %480
  %.0.i = phi float [ %479, %478 ], [ %481, %480 ], !dbg !48
  %482 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !48
  %.not.i3 = icmp eq i32 %482, 0, !dbg !48
  br i1 %.not.i3, label %485, label %483, !dbg !48

483:                                              ; preds = %__nv_rsqrtf.exit
  %484 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %462), !dbg !48
  br label %__nv_rsqrtf.exit5, !dbg !48

485:                                              ; preds = %__nv_rsqrtf.exit
  %486 = tail call float @llvm.nvvm.rsqrt.approx.f(float %462), !dbg !48
  br label %__nv_rsqrtf.exit5, !dbg !48

__nv_rsqrtf.exit5:                                ; preds = %483, %485
  %.0.i4 = phi float [ %484, %483 ], [ %486, %485 ], !dbg !48
  %487 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !48
  %.not.i6 = icmp eq i32 %487, 0, !dbg !48
  br i1 %.not.i6, label %490, label %488, !dbg !48

488:                                              ; preds = %__nv_rsqrtf.exit5
  %489 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %463), !dbg !48
  br label %__nv_rsqrtf.exit8, !dbg !48

490:                                              ; preds = %__nv_rsqrtf.exit5
  %491 = tail call float @llvm.nvvm.rsqrt.approx.f(float %463), !dbg !48
  br label %__nv_rsqrtf.exit8, !dbg !48

__nv_rsqrtf.exit8:                                ; preds = %488, %490
  %.0.i7 = phi float [ %489, %488 ], [ %491, %490 ], !dbg !48
  %492 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !48
  %.not.i9 = icmp eq i32 %492, 0, !dbg !48
  br i1 %.not.i9, label %495, label %493, !dbg !48

493:                                              ; preds = %__nv_rsqrtf.exit8
  %494 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %464), !dbg !48
  br label %__nv_rsqrtf.exit11, !dbg !48

495:                                              ; preds = %__nv_rsqrtf.exit8
  %496 = tail call float @llvm.nvvm.rsqrt.approx.f(float %464), !dbg !48
  br label %__nv_rsqrtf.exit11, !dbg !48

__nv_rsqrtf.exit11:                               ; preds = %493, %495
  %.0.i10 = phi float [ %494, %493 ], [ %496, %495 ], !dbg !48
  %497 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !48
  %.not.i12 = icmp eq i32 %497, 0, !dbg !48
  br i1 %.not.i12, label %500, label %498, !dbg !48

498:                                              ; preds = %__nv_rsqrtf.exit11
  %499 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %465), !dbg !48
  br label %__nv_rsqrtf.exit14, !dbg !48

500:                                              ; preds = %__nv_rsqrtf.exit11
  %501 = tail call float @llvm.nvvm.rsqrt.approx.f(float %465), !dbg !48
  br label %__nv_rsqrtf.exit14, !dbg !48

__nv_rsqrtf.exit14:                               ; preds = %498, %500
  %.0.i13 = phi float [ %499, %498 ], [ %501, %500 ], !dbg !48
  %502 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !48
  %.not.i15 = icmp eq i32 %502, 0, !dbg !48
  br i1 %.not.i15, label %505, label %503, !dbg !48

503:                                              ; preds = %__nv_rsqrtf.exit14
  %504 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %466), !dbg !48
  br label %__nv_rsqrtf.exit17, !dbg !48

505:                                              ; preds = %__nv_rsqrtf.exit14
  %506 = tail call float @llvm.nvvm.rsqrt.approx.f(float %466), !dbg !48
  br label %__nv_rsqrtf.exit17, !dbg !48

__nv_rsqrtf.exit17:                               ; preds = %503, %505
  %.0.i16 = phi float [ %504, %503 ], [ %506, %505 ], !dbg !48
  %507 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !48
  %.not.i18 = icmp eq i32 %507, 0, !dbg !48
  br i1 %.not.i18, label %510, label %508, !dbg !48

508:                                              ; preds = %__nv_rsqrtf.exit17
  %509 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %467), !dbg !48
  br label %__nv_rsqrtf.exit20, !dbg !48

510:                                              ; preds = %__nv_rsqrtf.exit17
  %511 = tail call float @llvm.nvvm.rsqrt.approx.f(float %467), !dbg !48
  br label %__nv_rsqrtf.exit20, !dbg !48

__nv_rsqrtf.exit20:                               ; preds = %508, %510
  %.0.i19 = phi float [ %509, %508 ], [ %511, %510 ], !dbg !48
  %512 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !48
  %.not.i21 = icmp eq i32 %512, 0, !dbg !48
  br i1 %.not.i21, label %515, label %513, !dbg !48

513:                                              ; preds = %__nv_rsqrtf.exit20
  %514 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %468), !dbg !48
  br label %__nv_rsqrtf.exit23, !dbg !48

515:                                              ; preds = %__nv_rsqrtf.exit20
  %516 = tail call float @llvm.nvvm.rsqrt.approx.f(float %468), !dbg !48
  br label %__nv_rsqrtf.exit23, !dbg !48

__nv_rsqrtf.exit23:                               ; preds = %513, %515
  %.0.i22 = phi float [ %514, %513 ], [ %516, %515 ], !dbg !48
  %517 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !48
  %.not.i24 = icmp eq i32 %517, 0, !dbg !48
  br i1 %.not.i24, label %520, label %518, !dbg !48

518:                                              ; preds = %__nv_rsqrtf.exit23
  %519 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %469), !dbg !48
  br label %__nv_rsqrtf.exit26, !dbg !48

520:                                              ; preds = %__nv_rsqrtf.exit23
  %521 = tail call float @llvm.nvvm.rsqrt.approx.f(float %469), !dbg !48
  br label %__nv_rsqrtf.exit26, !dbg !48

__nv_rsqrtf.exit26:                               ; preds = %518, %520
  %.0.i25 = phi float [ %519, %518 ], [ %521, %520 ], !dbg !48
  %522 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !48
  %.not.i27 = icmp eq i32 %522, 0, !dbg !48
  br i1 %.not.i27, label %525, label %523, !dbg !48

523:                                              ; preds = %__nv_rsqrtf.exit26
  %524 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %470), !dbg !48
  br label %__nv_rsqrtf.exit29, !dbg !48

525:                                              ; preds = %__nv_rsqrtf.exit26
  %526 = tail call float @llvm.nvvm.rsqrt.approx.f(float %470), !dbg !48
  br label %__nv_rsqrtf.exit29, !dbg !48

__nv_rsqrtf.exit29:                               ; preds = %523, %525
  %.0.i28 = phi float [ %524, %523 ], [ %526, %525 ], !dbg !48
  %527 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !48
  %.not.i30 = icmp eq i32 %527, 0, !dbg !48
  br i1 %.not.i30, label %530, label %528, !dbg !48

528:                                              ; preds = %__nv_rsqrtf.exit29
  %529 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %471), !dbg !48
  br label %__nv_rsqrtf.exit32, !dbg !48

530:                                              ; preds = %__nv_rsqrtf.exit29
  %531 = tail call float @llvm.nvvm.rsqrt.approx.f(float %471), !dbg !48
  br label %__nv_rsqrtf.exit32, !dbg !48

__nv_rsqrtf.exit32:                               ; preds = %528, %530
  %.0.i31 = phi float [ %529, %528 ], [ %531, %530 ], !dbg !48
  %532 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !48
  %.not.i33 = icmp eq i32 %532, 0, !dbg !48
  br i1 %.not.i33, label %535, label %533, !dbg !48

533:                                              ; preds = %__nv_rsqrtf.exit32
  %534 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %472), !dbg !48
  br label %__nv_rsqrtf.exit35, !dbg !48

535:                                              ; preds = %__nv_rsqrtf.exit32
  %536 = tail call float @llvm.nvvm.rsqrt.approx.f(float %472), !dbg !48
  br label %__nv_rsqrtf.exit35, !dbg !48

__nv_rsqrtf.exit35:                               ; preds = %533, %535
  %.0.i34 = phi float [ %534, %533 ], [ %536, %535 ], !dbg !48
  %537 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !48
  %.not.i36 = icmp eq i32 %537, 0, !dbg !48
  br i1 %.not.i36, label %540, label %538, !dbg !48

538:                                              ; preds = %__nv_rsqrtf.exit35
  %539 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %473), !dbg !48
  br label %__nv_rsqrtf.exit38, !dbg !48

540:                                              ; preds = %__nv_rsqrtf.exit35
  %541 = tail call float @llvm.nvvm.rsqrt.approx.f(float %473), !dbg !48
  br label %__nv_rsqrtf.exit38, !dbg !48

__nv_rsqrtf.exit38:                               ; preds = %538, %540
  %.0.i37 = phi float [ %539, %538 ], [ %541, %540 ], !dbg !48
  %542 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !48
  %.not.i39 = icmp eq i32 %542, 0, !dbg !48
  br i1 %.not.i39, label %545, label %543, !dbg !48

543:                                              ; preds = %__nv_rsqrtf.exit38
  %544 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %474), !dbg !48
  br label %__nv_rsqrtf.exit41, !dbg !48

545:                                              ; preds = %__nv_rsqrtf.exit38
  %546 = tail call float @llvm.nvvm.rsqrt.approx.f(float %474), !dbg !48
  br label %__nv_rsqrtf.exit41, !dbg !48

__nv_rsqrtf.exit41:                               ; preds = %543, %545
  %.0.i40 = phi float [ %544, %543 ], [ %546, %545 ], !dbg !48
  %547 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !48
  %.not.i42 = icmp eq i32 %547, 0, !dbg !48
  br i1 %.not.i42, label %550, label %548, !dbg !48

548:                                              ; preds = %__nv_rsqrtf.exit41
  %549 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %475), !dbg !48
  br label %__nv_rsqrtf.exit44, !dbg !48

550:                                              ; preds = %__nv_rsqrtf.exit41
  %551 = tail call float @llvm.nvvm.rsqrt.approx.f(float %475), !dbg !48
  br label %__nv_rsqrtf.exit44, !dbg !48

__nv_rsqrtf.exit44:                               ; preds = %548, %550
  %.0.i43 = phi float [ %549, %548 ], [ %551, %550 ], !dbg !48
  %552 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !48
  %.not.i45 = icmp eq i32 %552, 0, !dbg !48
  br i1 %.not.i45, label %555, label %553, !dbg !48

553:                                              ; preds = %__nv_rsqrtf.exit44
  %554 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %476), !dbg !48
  br label %__nv_rsqrtf.exit47, !dbg !48

555:                                              ; preds = %__nv_rsqrtf.exit44
  %556 = tail call float @llvm.nvvm.rsqrt.approx.f(float %476), !dbg !48
  br label %__nv_rsqrtf.exit47, !dbg !48

__nv_rsqrtf.exit47:                               ; preds = %553, %555
  %.0.i46 = phi float [ %554, %553 ], [ %556, %555 ], !dbg !48
  %557 = extractelement <1 x float> %267, i64 0, !dbg !33
  %558 = bitcast i32 %349 to float, !dbg !39
  %559 = fsub float %557, %558, !dbg !49
  %560 = extractelement <1 x float> %263, i64 0, !dbg !33
  %561 = bitcast i32 %348 to float, !dbg !39
  %562 = fsub float %560, %561, !dbg !49
  %563 = extractelement <1 x float> %258, i64 0, !dbg !33
  %564 = bitcast i32 %347 to float, !dbg !39
  %565 = fsub float %563, %564, !dbg !49
  %566 = extractelement <1 x float> %254, i64 0, !dbg !33
  %567 = bitcast i32 %346 to float, !dbg !39
  %568 = fsub float %566, %567, !dbg !49
  %569 = extractelement <1 x float> %249, i64 0, !dbg !33
  %570 = bitcast i32 %345 to float, !dbg !39
  %571 = fsub float %569, %570, !dbg !49
  %572 = extractelement <1 x float> %245, i64 0, !dbg !33
  %573 = bitcast i32 %344 to float, !dbg !39
  %574 = fsub float %572, %573, !dbg !49
  %575 = extractelement <1 x float> %240, i64 0, !dbg !33
  %576 = bitcast i32 %343 to float, !dbg !39
  %577 = fsub float %575, %576, !dbg !49
  %578 = extractelement <1 x float> %236, i64 0, !dbg !33
  %579 = bitcast i32 %342 to float, !dbg !39
  %580 = fsub float %578, %579, !dbg !49
  %581 = extractelement <1 x float> %231, i64 0, !dbg !33
  %582 = bitcast i32 %341 to float, !dbg !39
  %583 = fsub float %581, %582, !dbg !49
  %584 = extractelement <1 x float> %227, i64 0, !dbg !33
  %585 = bitcast i32 %340 to float, !dbg !39
  %586 = fsub float %584, %585, !dbg !49
  %587 = extractelement <1 x float> %222, i64 0, !dbg !33
  %588 = bitcast i32 %339 to float, !dbg !39
  %589 = fsub float %587, %588, !dbg !49
  %590 = extractelement <1 x float> %218, i64 0, !dbg !33
  %591 = bitcast i32 %338 to float, !dbg !39
  %592 = fsub float %590, %591, !dbg !49
  %593 = extractelement <1 x float> %213, i64 0, !dbg !33
  %594 = bitcast i32 %337 to float, !dbg !39
  %595 = fsub float %593, %594, !dbg !49
  %596 = extractelement <1 x float> %209, i64 0, !dbg !33
  %597 = bitcast i32 %336 to float, !dbg !39
  %598 = fsub float %596, %597, !dbg !49
  %599 = extractelement <1 x float> %204, i64 0, !dbg !33
  %600 = bitcast i32 %335 to float, !dbg !39
  %601 = fsub float %599, %600, !dbg !49
  %602 = extractelement <1 x float> %199, i64 0, !dbg !33
  %603 = bitcast i32 %334 to float, !dbg !39
  %604 = fsub float %602, %603, !dbg !49
  %605 = bitcast i32 %444 to float, !dbg !45
  %606 = bitcast i32 %442 to float, !dbg !45
  %607 = bitcast i32 %440 to float, !dbg !45
  %608 = bitcast i32 %438 to float, !dbg !45
  %609 = bitcast i32 %436 to float, !dbg !45
  %610 = bitcast i32 %434 to float, !dbg !45
  %611 = bitcast i32 %432 to float, !dbg !45
  %612 = bitcast i32 %430 to float, !dbg !45
  %613 = bitcast i32 %423 to float, !dbg !43
  %614 = bitcast i32 %421 to float, !dbg !43
  %615 = bitcast i32 %419 to float, !dbg !43
  %616 = bitcast i32 %417 to float, !dbg !43
  %617 = bitcast i32 %415 to float, !dbg !43
  %618 = bitcast i32 %413 to float, !dbg !43
  %619 = bitcast i32 %411 to float, !dbg !43
  %620 = bitcast i32 %409 to float, !dbg !43
  %621 = fmul float %604, %.0.i, !dbg !50
  %622 = fmul float %601, %.0.i4, !dbg !50
  %623 = fmul float %598, %.0.i7, !dbg !50
  %624 = fmul float %595, %.0.i10, !dbg !50
  %625 = fmul float %592, %.0.i13, !dbg !50
  %626 = fmul float %589, %.0.i16, !dbg !50
  %627 = fmul float %586, %.0.i19, !dbg !50
  %628 = fmul float %583, %.0.i22, !dbg !50
  %629 = fmul float %580, %.0.i25, !dbg !50
  %630 = fmul float %577, %.0.i28, !dbg !50
  %631 = fmul float %574, %.0.i31, !dbg !50
  %632 = fmul float %571, %.0.i34, !dbg !50
  %633 = fmul float %568, %.0.i37, !dbg !50
  %634 = fmul float %565, %.0.i40, !dbg !50
  %635 = fmul float %562, %.0.i43, !dbg !50
  %636 = fmul float %559, %.0.i46, !dbg !50
  %637 = fmul float %621, %620, !dbg !51
  %638 = fmul float %622, %620, !dbg !51
  %639 = fmul float %623, %619, !dbg !51
  %640 = fmul float %624, %619, !dbg !51
  %641 = fmul float %625, %618, !dbg !51
  %642 = fmul float %626, %618, !dbg !51
  %643 = fmul float %627, %617, !dbg !51
  %644 = fmul float %628, %617, !dbg !51
  %645 = fmul float %629, %616, !dbg !51
  %646 = fmul float %630, %616, !dbg !51
  %647 = fmul float %631, %615, !dbg !51
  %648 = fmul float %632, %615, !dbg !51
  %649 = fmul float %633, %614, !dbg !51
  %650 = fmul float %634, %614, !dbg !51
  %651 = fmul float %635, %613, !dbg !51
  %652 = fmul float %636, %613, !dbg !51
  %653 = fadd float %637, %612, !dbg !52
  %654 = fadd float %638, %612, !dbg !52
  %655 = fadd float %639, %611, !dbg !52
  %656 = fadd float %640, %611, !dbg !52
  %657 = fadd float %641, %610, !dbg !52
  %658 = fadd float %642, %610, !dbg !52
  %659 = fadd float %643, %609, !dbg !52
  %660 = fadd float %644, %609, !dbg !52
  %661 = fadd float %645, %608, !dbg !52
  %662 = fadd float %646, %608, !dbg !52
  %663 = fadd float %647, %607, !dbg !52
  %664 = fadd float %648, %607, !dbg !52
  %665 = fadd float %649, %606, !dbg !52
  %666 = fadd float %650, %606, !dbg !52
  %667 = fadd float %651, %605, !dbg !52
  %668 = fadd float %652, %605, !dbg !52
  %669 = mul i32 %22, 50, !dbg !53
  %670 = mul i32 %23, 50, !dbg !53
  %671 = mul i32 %24, 50, !dbg !53
  %672 = mul i32 %25, 50, !dbg !53
  %673 = mul i32 %26, 50, !dbg !53
  %674 = mul i32 %27, 50, !dbg !53
  %675 = mul i32 %28, 50, !dbg !53
  %676 = mul i32 %29, 50, !dbg !53
  %677 = add i32 %669, %49, !dbg !54
  %678 = add i32 %49, %670, !dbg !54
  %679 = add i32 %49, %671, !dbg !54
  %680 = add i32 %49, %672, !dbg !54
  %681 = add i32 %49, %673, !dbg !54
  %682 = add i32 %49, %674, !dbg !54
  %683 = add i32 %49, %675, !dbg !54
  %684 = add i32 %49, %676, !dbg !54
  %685 = sext i32 %677 to i64, !dbg !55
  %686 = getelementptr float, ptr addrspace(1) %5, i64 %685, !dbg !55
  %687 = sext i32 %678 to i64, !dbg !55
  %688 = getelementptr float, ptr addrspace(1) %5, i64 %687, !dbg !55
  %689 = sext i32 %679 to i64, !dbg !55
  %690 = getelementptr float, ptr addrspace(1) %5, i64 %689, !dbg !55
  %691 = sext i32 %680 to i64, !dbg !55
  %692 = getelementptr float, ptr addrspace(1) %5, i64 %691, !dbg !55
  %693 = sext i32 %681 to i64, !dbg !55
  %694 = getelementptr float, ptr addrspace(1) %5, i64 %693, !dbg !55
  %695 = sext i32 %682 to i64, !dbg !55
  %696 = getelementptr float, ptr addrspace(1) %5, i64 %695, !dbg !55
  %697 = sext i32 %683 to i64, !dbg !55
  %698 = getelementptr float, ptr addrspace(1) %5, i64 %697, !dbg !55
  %699 = sext i32 %684 to i64, !dbg !55
  %700 = getelementptr float, ptr addrspace(1) %5, i64 %699, !dbg !55
  %701 = bitcast float %653 to i32, !dbg !56
  %702 = bitcast float %654 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %701, i32 %702, ptr addrspace(1) %686, i1 %108) #4, !dbg !56
  %703 = bitcast float %655 to i32, !dbg !56
  %704 = bitcast float %656 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %703, i32 %704, ptr addrspace(1) %688, i1 %109) #4, !dbg !56
  %705 = bitcast float %657 to i32, !dbg !56
  %706 = bitcast float %658 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %705, i32 %706, ptr addrspace(1) %690, i1 %110) #4, !dbg !56
  %707 = bitcast float %659 to i32, !dbg !56
  %708 = bitcast float %660 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %707, i32 %708, ptr addrspace(1) %692, i1 %111) #4, !dbg !56
  %709 = bitcast float %661 to i32, !dbg !56
  %710 = bitcast float %662 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %709, i32 %710, ptr addrspace(1) %694, i1 %112) #4, !dbg !56
  %711 = bitcast float %663 to i32, !dbg !56
  %712 = bitcast float %664 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %711, i32 %712, ptr addrspace(1) %696, i1 %113) #4, !dbg !56
  %713 = bitcast float %665 to i32, !dbg !56
  %714 = bitcast float %666 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %713, i32 %714, ptr addrspace(1) %698, i1 %114) #4, !dbg !56
  %715 = bitcast float %667 to i32, !dbg !56
  %716 = bitcast float %668 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %715, i32 %716, ptr addrspace(1) %700, i1 %115) #4, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cak5b7ifbyysgpn6c4plcw4cu6dwygnrwa7semwtfe7p7vo3ijno.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu_torch260/ak")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 29, scope: !7)
!11 = !DILocation(line: 20, column: 48, scope: !7)
!12 = !DILocation(line: 20, column: 69, scope: !7)
!13 = !DILocation(line: 20, column: 53, scope: !7)
!14 = !DILocation(line: 20, column: 34, scope: !7)
!15 = !DILocation(line: 20, column: 75, scope: !7)
!16 = !DILocation(line: 21, column: 44, scope: !7)
!17 = !DILocation(line: 21, column: 23, scope: !7)
!18 = !DILocation(line: 22, column: 21, scope: !7)
!19 = !DILocation(line: 23, column: 28, scope: !7)
!20 = !DILocation(line: 23, column: 33, scope: !7)
!21 = !DILocation(line: 24, column: 44, scope: !7)
!22 = !DILocation(line: 24, column: 23, scope: !7)
!23 = !DILocation(line: 25, column: 21, scope: !7)
!24 = !DILocation(line: 27, column: 20, scope: !7)
!25 = !DILocation(line: 29, column: 20, scope: !7)
!26 = !DILocation(line: 29, column: 26, scope: !7)
!27 = !DILocation(line: 32, column: 40, scope: !7)
!28 = !DILocation(line: 32, column: 52, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 32, column: 47, scope: !7)
!31 = !DILocation(line: 32, column: 30, scope: !7)
!32 = !DILocation(line: 32, column: 66, scope: !7)
!33 = !DILocation(line: 32, column: 58, scope: !7)
!34 = !DILocation(line: 33, column: 38, scope: !7)
!35 = !DILocation(line: 33, column: 49, scope: !7)
!36 = !DILocation(line: 33, column: 36, scope: !7)
!37 = !DILocation(line: 33, column: 45, scope: !7)
!38 = !DILocation(line: 33, column: 30, scope: !7)
!39 = !DILocation(line: 33, column: 55, scope: !7)
!40 = !DILocation(line: 34, column: 30, scope: !7)
!41 = !DILocation(line: 34, column: 55, scope: !7)
!42 = !DILocation(line: 35, column: 31, scope: !7)
!43 = !DILocation(line: 35, column: 36, scope: !7)
!44 = !DILocation(line: 36, column: 31, scope: !7)
!45 = !DILocation(line: 36, column: 36, scope: !7)
!46 = !DILocation(line: 39, column: 18, scope: !7)
!47 = !DILocation(line: 41, column: 18, scope: !7)
!48 = !DILocation(line: 42, column: 27, scope: !7)
!49 = !DILocation(line: 37, column: 18, scope: !7)
!50 = !DILocation(line: 43, column: 18, scope: !7)
!51 = !DILocation(line: 44, column: 19, scope: !7)
!52 = !DILocation(line: 45, column: 20, scope: !7)
!53 = !DILocation(line: 46, column: 34, scope: !7)
!54 = !DILocation(line: 46, column: 31, scope: !7)
!55 = !DILocation(line: 46, column: 25, scope: !7)
!56 = !DILocation(line: 46, column: 47, scope: !7)
!57 = !DILocation(line: 46, column: 4, scope: !7)

; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d678(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !5 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %11 = and i32 %10, 31, !dbg !8
  %12 = lshr i32 %10, 5, !dbg !8
  %13 = and i32 %10, 7, !dbg !8
  %14 = shl nuw nsw i32 %13, 2, !dbg !8
  %15 = or i32 %14, 1, !dbg !8
  %16 = or i32 %14, 2, !dbg !8
  %17 = or i32 %14, 3, !dbg !8
  %18 = and i32 %12, 7, !dbg !9
  %19 = lshr i32 %11, 3, !dbg !9
  %20 = shl nuw nsw i32 %18, 2, !dbg !9
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %22 = shl i32 %21, 5, !dbg !11
  %23 = or i32 %22, %14, !dbg !8
  %24 = or i32 %22, %15, !dbg !8
  %25 = or i32 %22, %16, !dbg !8
  %26 = or i32 %22, %17, !dbg !8
  %27 = or i32 %22, %11, !dbg !8
  %28 = icmp slt i32 %23, %7, !dbg !12
  %29 = icmp slt i32 %24, %7, !dbg !12
  %30 = icmp slt i32 %25, %7, !dbg !12
  %31 = icmp slt i32 %26, %7, !dbg !12
  %32 = icmp slt i32 %27, %7, !dbg !12
  %.frozen = freeze i32 %23
  %33 = sdiv i32 %.frozen, 172, !dbg !13
  %.frozen1 = freeze i32 %27
  %34 = sdiv i32 %.frozen1, 172, !dbg !13
  %35 = mul i32 %33, 172
  %.decomposed = sub i32 %.frozen, %35
  %36 = srem i32 %24, 172, !dbg !14
  %37 = srem i32 %25, 172, !dbg !14
  %38 = srem i32 %26, 172, !dbg !14
  %39 = mul i32 %34, 172
  %.decomposed2 = sub i32 %.frozen1, %39
  %40 = sext i32 %33 to i64, !dbg !15
  %41 = getelementptr double, ptr addrspace(1) %0, i64 %40, !dbg !15
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %28) #3, !dbg !16
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %29) #3, !dbg !16
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %30) #3, !dbg !16
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %31) #3, !dbg !16
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !17
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %28) #3, !dbg !18
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %29) #3, !dbg !18
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %30) #3, !dbg !18
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %31) #3, !dbg !18
  %51 = mul i32 %33, 8600, !dbg !19
  %52 = sext i32 %.decomposed to i64, !dbg !20
  %53 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !20
  %54 = sext i32 %36 to i64, !dbg !20
  %55 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !20
  %56 = sext i32 %37 to i64, !dbg !20
  %57 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !20
  %58 = sext i32 %38 to i64, !dbg !20
  %59 = getelementptr float, ptr addrspace(1) %3, i64 %58, !dbg !20
  %60 = sext i32 %34 to i64, !dbg !21
  %61 = getelementptr float, ptr addrspace(1) %5, i64 %60, !dbg !21
  %62 = or i32 %20, %19, !dbg !9
  %63 = or i32 %62, 32, !dbg !9
  %64 = icmp ult i32 %63, 50, !dbg !22
  %65 = insertelement <4 x i64> poison, i64 %45, i64 0, !dbg !16
  %66 = insertelement <4 x i64> %65, i64 %44, i64 1, !dbg !16
  %67 = insertelement <4 x i64> %66, i64 %43, i64 2, !dbg !16
  %68 = insertelement <4 x i64> %67, i64 %42, i64 3, !dbg !16
  %69 = bitcast <4 x i64> %68 to <4 x double>, !dbg !16
  %70 = mul nuw nsw i32 %62, 172, !dbg !23
  %71 = mul nuw nsw i32 %63, 172, !dbg !23
  %72 = add i32 %51, %70, !dbg !24
  %73 = add i32 %72, %.decomposed, !dbg !25
  %74 = add i32 %72, %36, !dbg !25
  %75 = add i32 %72, %37, !dbg !25
  %76 = add i32 %72, %38, !dbg !25
  %77 = add i32 %51, %71, !dbg !24
  %78 = add i32 %77, %.decomposed, !dbg !25
  %79 = add i32 %77, %36, !dbg !25
  %80 = add i32 %77, %37, !dbg !25
  %81 = add i32 %77, %38, !dbg !25
  %82 = sext i32 %73 to i64, !dbg !26
  %83 = getelementptr float, ptr addrspace(1) %2, i64 %82, !dbg !26
  %84 = sext i32 %74 to i64, !dbg !26
  %85 = getelementptr float, ptr addrspace(1) %2, i64 %84, !dbg !26
  %86 = sext i32 %75 to i64, !dbg !26
  %87 = getelementptr float, ptr addrspace(1) %2, i64 %86, !dbg !26
  %88 = sext i32 %76 to i64, !dbg !26
  %89 = getelementptr float, ptr addrspace(1) %2, i64 %88, !dbg !26
  %90 = sext i32 %78 to i64, !dbg !26
  %91 = getelementptr float, ptr addrspace(1) %2, i64 %90, !dbg !26
  %92 = sext i32 %79 to i64, !dbg !26
  %93 = getelementptr float, ptr addrspace(1) %2, i64 %92, !dbg !26
  %94 = sext i32 %80 to i64, !dbg !26
  %95 = getelementptr float, ptr addrspace(1) %2, i64 %94, !dbg !26
  %96 = sext i32 %81 to i64, !dbg !26
  %97 = getelementptr float, ptr addrspace(1) %2, i64 %96, !dbg !26
  %98 = and i1 %64, %28, !dbg !27
  %99 = and i1 %64, %29, !dbg !27
  %100 = and i1 %64, %30, !dbg !27
  %101 = and i1 %64, %31, !dbg !27
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %28, i32 0, i1 %28) #3, !dbg !28
  %103 = bitcast i32 %102 to float, !dbg !28
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %29, i32 0, i1 %29) #3, !dbg !28
  %105 = bitcast i32 %104 to float, !dbg !28
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %30, i32 0, i1 %30) #3, !dbg !28
  %107 = bitcast i32 %106 to float, !dbg !28
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %31, i32 0, i1 %31) #3, !dbg !28
  %109 = bitcast i32 %108 to float, !dbg !28
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %98, i32 0, i1 %98) #3, !dbg !28
  %111 = bitcast i32 %110 to float, !dbg !28
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %99, i32 0, i1 %99) #3, !dbg !28
  %113 = bitcast i32 %112 to float, !dbg !28
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %100, i32 0, i1 %100) #3, !dbg !28
  %115 = bitcast i32 %114 to float, !dbg !28
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %101, i32 0, i1 %101) #3, !dbg !28
  %117 = bitcast i32 %116 to float, !dbg !28
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %28) #3, !dbg !29
  %119 = bitcast i32 %118 to float, !dbg !29
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %29) #3, !dbg !29
  %121 = bitcast i32 %120 to float, !dbg !29
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %30) #3, !dbg !29
  %123 = bitcast i32 %122 to float, !dbg !29
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %31) #3, !dbg !29
  %125 = bitcast i32 %124 to float, !dbg !29
  %126 = getelementptr float, ptr addrspace(1) %4, i64 %82, !dbg !30
  %127 = getelementptr float, ptr addrspace(1) %4, i64 %84, !dbg !30
  %128 = getelementptr float, ptr addrspace(1) %4, i64 %86, !dbg !30
  %129 = getelementptr float, ptr addrspace(1) %4, i64 %88, !dbg !30
  %130 = getelementptr float, ptr addrspace(1) %4, i64 %90, !dbg !30
  %131 = getelementptr float, ptr addrspace(1) %4, i64 %92, !dbg !30
  %132 = getelementptr float, ptr addrspace(1) %4, i64 %94, !dbg !30
  %133 = getelementptr float, ptr addrspace(1) %4, i64 %96, !dbg !30
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %28, i32 0, i1 %28) #3, !dbg !31
  %135 = bitcast i32 %134 to float, !dbg !31
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %127, i1 %29, i32 0, i1 %29) #3, !dbg !31
  %137 = bitcast i32 %136 to float, !dbg !31
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %30, i32 0, i1 %30) #3, !dbg !31
  %139 = bitcast i32 %138 to float, !dbg !31
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %129, i1 %31, i32 0, i1 %31) #3, !dbg !31
  %141 = bitcast i32 %140 to float, !dbg !31
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %98, i32 0, i1 %98) #3, !dbg !31
  %143 = bitcast i32 %142 to float, !dbg !31
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %99, i32 0, i1 %99) #3, !dbg !31
  %145 = bitcast i32 %144 to float, !dbg !31
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %132, i1 %100, i32 0, i1 %100) #3, !dbg !31
  %147 = bitcast i32 %146 to float, !dbg !31
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %101, i32 0, i1 %101) #3, !dbg !31
  %149 = bitcast i32 %148 to float, !dbg !31
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %32) #3, !dbg !32
  %151 = bitcast i32 %150 to float, !dbg !32
  %152 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !33
  %153 = insertelement <2 x i32> %152, i32 %62, i64 1, !dbg !33
  %154 = sitofp <2 x i32> %153 to <2 x double>, !dbg !33
  %155 = shufflevector <2 x double> %154, <2 x double> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !33
  %156 = fcmp olt <4 x double> %69, <double 5.000000e+01, double 5.000000e+01, double 5.000000e+01, double 5.000000e+01>, !dbg !34
  %157 = fcmp uno <4 x double> %69, zeroinitializer, !dbg !38
  %158 = or <4 x i1> %156, %157, !dbg !39
  %159 = select <4 x i1> %158, <4 x double> %69, <4 x double> <double 5.000000e+01, double 5.000000e+01, double 5.000000e+01, double 5.000000e+01>, !dbg !40
  %160 = shufflevector <4 x double> %159, <4 x double> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !40
  %161 = fcmp ogt <8 x double> %160, %155, !dbg !41
  %162 = insertelement <4 x i32> poison, i32 %50, i64 0, !dbg !42
  %163 = insertelement <4 x i32> %162, i32 %49, i64 1, !dbg !42
  %164 = insertelement <4 x i32> %163, i32 %48, i64 2, !dbg !42
  %165 = insertelement <4 x i32> %164, i32 %47, i64 3, !dbg !42
  %166 = and <4 x i32> %165, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>, !dbg !42
  %167 = icmp eq <4 x i32> %166, zeroinitializer, !dbg !42
  %168 = extractelement <8 x i1> %161, i64 7, !dbg !43
  %169 = extractelement <4 x i1> %167, i64 3, !dbg !43
  %170 = or i1 %168, %169, !dbg !43
  %171 = extractelement <8 x i1> %161, i64 6, !dbg !43
  %172 = extractelement <4 x i1> %167, i64 2, !dbg !43
  %173 = or i1 %171, %172, !dbg !43
  %174 = extractelement <8 x i1> %161, i64 5, !dbg !43
  %175 = extractelement <4 x i1> %167, i64 1, !dbg !43
  %176 = or i1 %174, %175, !dbg !43
  %177 = extractelement <8 x i1> %161, i64 4, !dbg !43
  %178 = extractelement <4 x i1> %167, i64 0, !dbg !43
  %179 = or i1 %177, %178, !dbg !43
  %180 = extractelement <8 x i1> %161, i64 3, !dbg !43
  %181 = or i1 %180, %169, !dbg !43
  %182 = extractelement <8 x i1> %161, i64 2, !dbg !43
  %183 = or i1 %182, %172, !dbg !43
  %184 = extractelement <8 x i1> %161, i64 1, !dbg !43
  %185 = or i1 %184, %175, !dbg !43
  %186 = extractelement <8 x i1> %161, i64 0, !dbg !43
  %187 = or i1 %186, %178, !dbg !43
  %188 = fadd float %103, %119, !dbg !44
  %189 = fadd float %105, %121, !dbg !44
  %190 = fadd float %107, %123, !dbg !44
  %191 = fadd float %109, %125, !dbg !44
  %192 = fadd float %111, %119, !dbg !44
  %193 = fadd float %113, %121, !dbg !44
  %194 = fadd float %115, %123, !dbg !44
  %195 = fadd float %117, %125, !dbg !44
  %196 = fadd float %188, %135, !dbg !45
  %197 = fadd float %189, %137, !dbg !45
  %198 = fadd float %190, %139, !dbg !45
  %199 = fadd float %191, %141, !dbg !45
  %200 = fadd float %192, %143, !dbg !45
  %201 = fadd float %193, %145, !dbg !45
  %202 = fadd float %194, %147, !dbg !45
  %203 = fadd float %195, %149, !dbg !45
  %204 = and i1 %28, %170, !dbg !46
  %205 = and i1 %29, %173, !dbg !46
  %206 = and i1 %30, %176, !dbg !46
  %207 = and i1 %31, %179, !dbg !46
  %208 = and i1 %98, %181, !dbg !46
  %209 = and i1 %99, %183, !dbg !46
  %210 = and i1 %100, %185, !dbg !46
  %211 = and i1 %101, %187, !dbg !46
  %212 = select i1 %204, float %196, float 0.000000e+00, !dbg !46
  %213 = select i1 %205, float %197, float 0.000000e+00, !dbg !46
  %214 = select i1 %206, float %198, float 0.000000e+00, !dbg !46
  %215 = select i1 %207, float %199, float 0.000000e+00, !dbg !46
  %216 = select i1 %208, float %200, float 0.000000e+00, !dbg !46
  %217 = select i1 %209, float %201, float 0.000000e+00, !dbg !46
  %218 = select i1 %210, float %202, float 0.000000e+00, !dbg !46
  %219 = select i1 %211, float %203, float 0.000000e+00, !dbg !46
  %220 = fadd float %212, %216, !dbg !47
  %221 = fadd float %213, %217, !dbg !47
  %222 = fadd float %214, %218, !dbg !47
  %223 = fadd float %215, %219, !dbg !47
  %224 = bitcast float %220 to i32, !dbg !53
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 16, i32 31), !dbg !53
  %226 = bitcast i32 %225 to float, !dbg !53
  %227 = fadd float %220, %226, !dbg !47
  %228 = bitcast float %227 to i32, !dbg !53
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 8, i32 31), !dbg !53
  %230 = bitcast i32 %229 to float, !dbg !53
  %231 = fadd float %227, %230, !dbg !47
  %232 = bitcast float %221 to i32, !dbg !53
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 16, i32 31), !dbg !53
  %234 = bitcast i32 %233 to float, !dbg !53
  %235 = fadd float %221, %234, !dbg !47
  %236 = bitcast float %235 to i32, !dbg !53
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 8, i32 31), !dbg !53
  %238 = bitcast i32 %237 to float, !dbg !53
  %239 = fadd float %235, %238, !dbg !47
  %240 = bitcast float %222 to i32, !dbg !53
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 16, i32 31), !dbg !53
  %242 = bitcast i32 %241 to float, !dbg !53
  %243 = fadd float %222, %242, !dbg !47
  %244 = bitcast float %243 to i32, !dbg !53
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 8, i32 31), !dbg !53
  %246 = bitcast i32 %245 to float, !dbg !53
  %247 = fadd float %243, %246, !dbg !47
  %248 = bitcast float %223 to i32, !dbg !53
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 16, i32 31), !dbg !53
  %250 = bitcast i32 %249 to float, !dbg !53
  %251 = fadd float %223, %250, !dbg !47
  %252 = bitcast float %251 to i32, !dbg !53
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 8, i32 31), !dbg !53
  %254 = bitcast i32 %253 to float, !dbg !53
  %255 = fadd float %251, %254, !dbg !47
  %256 = icmp ult i32 %11, 8, !dbg !53
  %257 = shl nuw nsw i32 %13, 5, !dbg !53
  %258 = or i32 %257, %18, !dbg !53
  %259 = zext nneg i32 %258 to i64, !dbg !53
  %260 = getelementptr float, ptr addrspace(3) @global_smem, i64 %259, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, float %231, i1 %256) #3, !dbg !53
  %261 = shl nuw nsw i32 %15, 3, !dbg !53
  %262 = or i32 %261, %18, !dbg !53
  %263 = zext nneg i32 %262 to i64, !dbg !53
  %264 = getelementptr float, ptr addrspace(3) @global_smem, i64 %263, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, float %239, i1 %256) #3, !dbg !53
  %265 = shl nuw nsw i32 %16, 3, !dbg !53
  %266 = or i32 %265, %18, !dbg !53
  %267 = zext nneg i32 %266 to i64, !dbg !53
  %268 = getelementptr float, ptr addrspace(3) @global_smem, i64 %267, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, float %247, i1 %256) #3, !dbg !53
  %269 = shl nuw nsw i32 %17, 3, !dbg !53
  %270 = or i32 %269, %18, !dbg !53
  %271 = zext nneg i32 %270 to i64, !dbg !53
  %272 = getelementptr float, ptr addrspace(3) @global_smem, i64 %271, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %272, float %255, i1 %256) #3, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %273 = icmp slt i32 %10, 256, !dbg !53
  %274 = sext i32 %10 to i64, !dbg !53
  %275 = getelementptr float, ptr addrspace(3) @global_smem, i64 %274, !dbg !53
  %276 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %275, i1 %273) #3, !dbg !53
  %277 = bitcast float %276 to i32, !dbg !53
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 4, i32 31), !dbg !53
  %279 = bitcast i32 %278 to float, !dbg !53
  %280 = fadd float %276, %279, !dbg !47
  %281 = bitcast float %280 to i32, !dbg !53
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 2, i32 31), !dbg !53
  %283 = bitcast i32 %282 to float, !dbg !53
  %284 = fadd float %280, %283, !dbg !47
  %285 = bitcast float %284 to i32, !dbg !53
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 1, i32 31), !dbg !53
  %287 = bitcast i32 %286 to float, !dbg !53
  %288 = fadd float %284, %287, !dbg !47
  %289 = icmp eq i32 %13, 0, !dbg !53
  %290 = and i1 %273, %289, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, float %288, i1 %290) #3, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %291 = zext nneg i32 %257 to i64, !dbg !53
  %292 = getelementptr float, ptr addrspace(3) @global_smem, i64 %291, !dbg !53
  %293 = load float, ptr addrspace(3) %292, align 4, !dbg !53
  %294 = zext nneg i32 %261 to i64, !dbg !53
  %295 = getelementptr float, ptr addrspace(3) @global_smem, i64 %294, !dbg !53
  %296 = load float, ptr addrspace(3) %295, align 4, !dbg !53
  %297 = zext nneg i32 %265 to i64, !dbg !53
  %298 = getelementptr float, ptr addrspace(3) @global_smem, i64 %297, !dbg !53
  %299 = load float, ptr addrspace(3) %298, align 4, !dbg !53
  %300 = zext nneg i32 %269 to i64, !dbg !53
  %301 = getelementptr float, ptr addrspace(3) @global_smem, i64 %300, !dbg !53
  %302 = load float, ptr addrspace(3) %301, align 4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %303 = zext nneg i32 %14 to i64, !dbg !55
  %304 = getelementptr float, ptr addrspace(3) @global_smem, i64 %303, !dbg !55
  %305 = insertelement <1 x float> undef, float %293, i64 0, !dbg !55
  store <1 x float> %305, ptr addrspace(3) %304, align 4, !dbg !55
  %306 = zext nneg i32 %15 to i64, !dbg !55
  %307 = getelementptr float, ptr addrspace(3) @global_smem, i64 %306, !dbg !55
  %308 = insertelement <1 x float> undef, float %296, i64 0, !dbg !55
  store <1 x float> %308, ptr addrspace(3) %307, align 4, !dbg !55
  %309 = zext nneg i32 %16 to i64, !dbg !55
  %310 = getelementptr float, ptr addrspace(3) @global_smem, i64 %309, !dbg !55
  %311 = insertelement <1 x float> undef, float %299, i64 0, !dbg !55
  store <1 x float> %311, ptr addrspace(3) %310, align 4, !dbg !55
  %312 = zext nneg i32 %17 to i64, !dbg !55
  %313 = getelementptr float, ptr addrspace(3) @global_smem, i64 %312, !dbg !55
  %314 = insertelement <1 x float> undef, float %302, i64 0, !dbg !55
  store <1 x float> %314, ptr addrspace(3) %313, align 4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %315 = zext nneg i32 %11 to i64, !dbg !55
  %316 = getelementptr float, ptr addrspace(3) @global_smem, i64 %315, !dbg !55
  %317 = load float, ptr addrspace(3) %316, align 4, !dbg !55
  %318 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %151) #3, !dbg !56
  %319 = fmul float %317, %318, !dbg !55
  %320 = mul i32 %34, 1872, !dbg !57
  %321 = add i32 %320, %.decomposed2, !dbg !58
  %322 = sext i32 %321 to i64, !dbg !59
  %323 = getelementptr float, ptr addrspace(1) %6, i64 %322, !dbg !59
  %324 = icmp eq i32 %18, 0, !dbg !60
  %325 = bitcast float %319 to i32, !dbg !60
  %326 = and i1 %324, %32, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %325, ptr addrspace(1) %323, i1 %326) #3, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "ctiqpdlpgaiduxafg6qyu7cxfydu4g6aep4cm3sra4idbsog63rw.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu/ti")
!3 = !{ptr @triton__0d1d2d3d4d5d678, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d678, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d678", linkageName: "triton__0d1d2d3d4d5d678", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 23, scope: !5)
!9 = !DILocation(line: 26, column: 13, scope: !5)
!10 = !DILocation(line: 23, column: 28, scope: !5)
!11 = !DILocation(line: 23, column: 33, scope: !5)
!12 = !DILocation(line: 25, column: 21, scope: !5)
!13 = !DILocation(line: 30, column: 20, scope: !5)
!14 = !DILocation(line: 31, column: 18, scope: !5)
!15 = !DILocation(line: 33, column: 30, scope: !5)
!16 = !DILocation(line: 33, column: 35, scope: !5)
!17 = !DILocation(line: 34, column: 30, scope: !5)
!18 = !DILocation(line: 34, column: 35, scope: !5)
!19 = !DILocation(line: 35, column: 53, scope: !5)
!20 = !DILocation(line: 36, column: 31, scope: !5)
!21 = !DILocation(line: 38, column: 31, scope: !5)
!22 = !DILocation(line: 28, column: 21, scope: !5)
!23 = !DILocation(line: 35, column: 41, scope: !5)
!24 = !DILocation(line: 35, column: 37, scope: !5)
!25 = !DILocation(line: 35, column: 48, scope: !5)
!26 = !DILocation(line: 35, column: 31, scope: !5)
!27 = !DILocation(line: 35, column: 67, scope: !5)
!28 = !DILocation(line: 35, column: 59, scope: !5)
!29 = !DILocation(line: 36, column: 36, scope: !5)
!30 = !DILocation(line: 37, column: 31, scope: !5)
!31 = !DILocation(line: 37, column: 59, scope: !5)
!32 = !DILocation(line: 38, column: 36, scope: !5)
!33 = !DILocation(line: 40, column: 19, scope: !5)
!34 = !DILocation(line: 37, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !5, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/admin/zy429782/torch_folder/pytorch-2.3.1/torch/_inductor")
!37 = !DILocation(line: 42, column: 40, scope: !35)
!38 = !DILocation(line: 39, column: 21, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 39, column: 16, scope: !35, inlinedAt: !37)
!40 = !DILocation(line: 40, column: 29, scope: !35, inlinedAt: !37)
!41 = !DILocation(line: 43, column: 18, scope: !5)
!42 = !DILocation(line: 45, column: 19, scope: !5)
!43 = !DILocation(line: 46, column: 18, scope: !5)
!44 = !DILocation(line: 47, column: 20, scope: !5)
!45 = !DILocation(line: 48, column: 20, scope: !5)
!46 = !DILocation(line: 0, scope: !5)
!47 = !DILocation(line: 233, column: 15, scope: !48, inlinedAt: !51)
!48 = distinct !DILexicalBlockFile(scope: !50, file: !49, discriminator: 0)
!49 = !DIFile(filename: "standard.py", directory: "/home/admin/zy429782/miniforge3/envs/compiled_torch/lib/python3.8/site-packages/triton/language")
!50 = distinct !DILexicalBlockFile(scope: !5, file: !49, discriminator: 0)
!51 = !DILocation(line: 243, column: 36, scope: !48, inlinedAt: !52)
!52 = !DILocation(line: 52, column: 26, scope: !48)
!53 = !DILocation(line: 243, column: 36, scope: !50, inlinedAt: !54)
!54 = !DILocation(line: 52, column: 26, scope: !50)
!55 = !DILocation(line: 54, column: 20, scope: !5)
!56 = !DILocation(line: 53, column: 16, scope: !5)
!57 = !DILocation(line: 55, column: 36, scope: !5)
!58 = !DILocation(line: 55, column: 31, scope: !5)
!59 = !DILocation(line: 55, column: 25, scope: !5)
!60 = !DILocation(line: 55, column: 49, scope: !5)
!61 = !DILocation(line: 55, column: 4, scope: !5)

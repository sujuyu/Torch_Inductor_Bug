; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2e3(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !5 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %6 = and i32 %5, 31, !dbg !8
  %7 = lshr i32 %5, 5, !dbg !8
  %8 = and i32 %7, 1, !dbg !8
  %urem = and i32 %5, 63, !dbg !8
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %10 = icmp slt i32 %9, %2, !dbg !10
  %11 = icmp ult i32 %urem, 50, !dbg !11
  %12 = mul i32 %9, 50, !dbg !12
  %13 = add i32 %12, %urem, !dbg !13
  %14 = sext i32 %13 to i64, !dbg !14
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !14
  %16 = and i1 %11, %10, !dbg !15
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %15, i1 %16, i32 0, i1 %16) #3, !dbg !16
  %18 = bitcast i32 %17 to float, !dbg !16
  %19 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %18, float 4.000000e+00) #3, !dbg !17
  %20 = select i1 %16, float %19, float 0xFFF0000000000000, !dbg !18
  %21 = bitcast float %20 to i32, !dbg !19
  %22 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %21, i32 16, i32 31), !dbg !19
  %23 = bitcast i32 %22 to float, !dbg !19
  %24 = fcmp ogt float %20, %23, !dbg !23
  %25 = fcmp uno float %20, 0.000000e+00, !dbg !27
  %26 = or i1 %25, %24, !dbg !28
  %27 = select i1 %26, float %20, float %23, !dbg !29
  %28 = bitcast float %27 to i32, !dbg !19
  %29 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %28, i32 8, i32 31), !dbg !19
  %30 = bitcast i32 %29 to float, !dbg !19
  %31 = fcmp ogt float %27, %30, !dbg !23
  %32 = fcmp uno float %27, 0.000000e+00, !dbg !27
  %33 = or i1 %31, %32, !dbg !28
  %34 = select i1 %33, float %27, float %30, !dbg !29
  %35 = bitcast float %34 to i32, !dbg !19
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 4, i32 31), !dbg !19
  %37 = bitcast i32 %36 to float, !dbg !19
  %38 = fcmp ogt float %34, %37, !dbg !23
  %39 = fcmp uno float %34, 0.000000e+00, !dbg !27
  %40 = or i1 %38, %39, !dbg !28
  %41 = select i1 %40, float %34, float %37, !dbg !29
  %42 = bitcast float %41 to i32, !dbg !19
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 2, i32 31), !dbg !19
  %44 = bitcast i32 %43 to float, !dbg !19
  %45 = fcmp ogt float %41, %44, !dbg !23
  %46 = fcmp uno float %41, 0.000000e+00, !dbg !27
  %47 = or i1 %45, %46, !dbg !28
  %48 = select i1 %47, float %41, float %44, !dbg !29
  %49 = bitcast float %48 to i32, !dbg !19
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 1, i32 31), !dbg !19
  %51 = bitcast i32 %50 to float, !dbg !19
  %52 = fcmp ogt float %48, %51, !dbg !23
  %53 = fcmp uno float %48, 0.000000e+00, !dbg !27
  %54 = or i1 %52, %53, !dbg !28
  %55 = select i1 %54, float %48, float %51, !dbg !29
  %56 = icmp eq i32 %6, 0, !dbg !19
  %57 = zext nneg i32 %8 to i64, !dbg !19
  %58 = getelementptr float, ptr addrspace(3) @global_smem, i64 %57, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, float %55, i1 %56) #3, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %59 = icmp slt i32 %5, 2, !dbg !19
  %60 = sext i32 %5 to i64, !dbg !19
  %61 = getelementptr float, ptr addrspace(3) @global_smem, i64 %60, !dbg !19
  %62 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %61, i1 %59) #3, !dbg !19
  %63 = bitcast float %62 to i32, !dbg !19
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 1, i32 31), !dbg !19
  %65 = bitcast i32 %64 to float, !dbg !19
  %66 = fcmp ogt float %62, %65, !dbg !23
  %67 = fcmp uno float %62, 0.000000e+00, !dbg !27
  %68 = or i1 %67, %66, !dbg !28
  %69 = select i1 %68, float %62, float %65, !dbg !29
  %70 = and i32 %5, 1, !dbg !19
  %71 = icmp eq i32 %70, 0, !dbg !19
  %72 = and i1 %59, %71, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, float %69, i1 %72) #3, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %73 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !19
  %74 = fsub float %19, %73, !dbg !30
  %75 = fmul float %74, 0x3FF7154760000000, !dbg !31
  %76 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %75) #3, !dbg !31
  %77 = select i1 %16, float %76, float 0.000000e+00, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %78 = bitcast float %77 to i32, !dbg !33
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 16, i32 31), !dbg !33
  %80 = bitcast i32 %79 to float, !dbg !33
  %81 = fadd float %77, %80, !dbg !37
  %82 = bitcast float %81 to i32, !dbg !33
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 8, i32 31), !dbg !33
  %84 = bitcast i32 %83 to float, !dbg !33
  %85 = fadd float %81, %84, !dbg !37
  %86 = bitcast float %85 to i32, !dbg !33
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 4, i32 31), !dbg !33
  %88 = bitcast i32 %87 to float, !dbg !33
  %89 = fadd float %85, %88, !dbg !37
  %90 = bitcast float %89 to i32, !dbg !33
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 2, i32 31), !dbg !33
  %92 = bitcast i32 %91 to float, !dbg !33
  %93 = fadd float %89, %92, !dbg !37
  %94 = bitcast float %93 to i32, !dbg !33
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 1, i32 31), !dbg !33
  %96 = bitcast i32 %95 to float, !dbg !33
  %97 = fadd float %93, %96, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, float %97, i1 %56) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %98 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %61, i1 %59) #3, !dbg !33
  %99 = bitcast float %98 to i32, !dbg !33
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 1, i32 31), !dbg !33
  %101 = bitcast i32 %100 to float, !dbg !33
  %102 = fadd float %98, %101, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, float %102, i1 %72) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %103 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !33
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %76, float %103) #3, !dbg !41
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !42
  %106 = bitcast float %104 to i32, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %106, ptr addrspace(1) %105, i1 %16) #3, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cc7luc6ehgsuslee67ue4mhxjmp54fqnhxn5pm7r3hw67qpcpita.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu/c7")
!3 = !{ptr @triton__0d1d2e3, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2e3, !"maxntidx", i32 64}
!5 = distinct !DISubprogram(name: "triton__0d1d2e3", linkageName: "triton__0d1d2e3", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 26, column: 13, scope: !5)
!9 = !DILocation(line: 23, column: 28, scope: !5)
!10 = !DILocation(line: 25, column: 21, scope: !5)
!11 = !DILocation(line: 28, column: 21, scope: !5)
!12 = !DILocation(line: 31, column: 39, scope: !5)
!13 = !DILocation(line: 31, column: 36, scope: !5)
!14 = !DILocation(line: 31, column: 30, scope: !5)
!15 = !DILocation(line: 31, column: 53, scope: !5)
!16 = !DILocation(line: 31, column: 45, scope: !5)
!17 = !DILocation(line: 33, column: 18, scope: !5)
!18 = !DILocation(line: 35, column: 41, scope: !5)
!19 = !DILocation(line: 58, column: 29, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !5, file: !21, discriminator: 0)
!21 = !DIFile(filename: "triton_helpers.py", directory: "/home/admin/zy429782/torch_folder/pytorch-2.3.1/torch/_inductor")
!22 = !DILocation(line: 36, column: 37, scope: !20)
!23 = !DILocation(line: 45, column: 15, scope: !24, inlinedAt: !25)
!24 = distinct !DILexicalBlockFile(scope: !20, file: !21, discriminator: 0)
!25 = !DILocation(line: 58, column: 29, scope: !24, inlinedAt: !26)
!26 = !DILocation(line: 36, column: 37, scope: !24)
!27 = !DILocation(line: 47, column: 21, scope: !24, inlinedAt: !25)
!28 = !DILocation(line: 47, column: 16, scope: !24, inlinedAt: !25)
!29 = !DILocation(line: 48, column: 29, scope: !24, inlinedAt: !25)
!30 = !DILocation(line: 37, column: 18, scope: !5)
!31 = !DILocation(line: 38, column: 23, scope: !5)
!32 = !DILocation(line: 40, column: 42, scope: !5)
!33 = !DILocation(line: 243, column: 36, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !5, file: !35, discriminator: 0)
!35 = !DIFile(filename: "standard.py", directory: "/home/admin/zy429782/miniforge3/envs/compiled_torch/lib/python3.8/site-packages/triton/language")
!36 = !DILocation(line: 41, column: 26, scope: !34)
!37 = !DILocation(line: 233, column: 15, scope: !38, inlinedAt: !39)
!38 = distinct !DILexicalBlockFile(scope: !34, file: !35, discriminator: 0)
!39 = !DILocation(line: 243, column: 36, scope: !38, inlinedAt: !40)
!40 = !DILocation(line: 41, column: 26, scope: !38)
!41 = !DILocation(line: 42, column: 19, scope: !5)
!42 = !DILocation(line: 43, column: 25, scope: !5)
!43 = !DILocation(line: 43, column: 47, scope: !5)
!44 = !DILocation(line: 43, column: 4, scope: !5)

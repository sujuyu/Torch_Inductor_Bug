; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d12de(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !5 {
  %4 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %5 = and i32 %4, 127, !dbg !8
  %6 = shl nuw nsw i32 %5, 2, !dbg !8
  %7 = or i32 %5, 128, !dbg !8
  %8 = or i32 %5, 256, !dbg !8
  %9 = or i32 %5, 384, !dbg !8
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !9
  %11 = shl i32 %10, 10, !dbg !10
  %12 = or i32 %11, %6, !dbg !11
  %13 = or i32 %12, 512, !dbg !11
  %14 = or i32 %11, %5, !dbg !11
  %15 = or i32 %11, %7, !dbg !11
  %16 = or i32 %11, %8, !dbg !11
  %17 = or i32 %11, %9, !dbg !11
  %18 = or i32 %14, 512, !dbg !11
  %19 = or i32 %14, 640, !dbg !11
  %20 = or i32 %14, 768, !dbg !11
  %21 = or i32 %14, 896, !dbg !11
  %22 = icmp slt i32 %12, %2, !dbg !12
  %23 = icmp slt i32 %13, %2, !dbg !12
  %24 = icmp slt i32 %14, %2, !dbg !12
  %25 = icmp slt i32 %15, %2, !dbg !12
  %26 = icmp slt i32 %16, %2, !dbg !12
  %27 = icmp slt i32 %17, %2, !dbg !12
  %28 = icmp slt i32 %18, %2, !dbg !12
  %29 = icmp slt i32 %19, %2, !dbg !12
  %30 = icmp slt i32 %20, %2, !dbg !12
  %31 = icmp slt i32 %21, %2, !dbg !12
  %.frozen = freeze i32 %14
  %32 = sdiv i32 %.frozen, 688, !dbg !13
  %33 = mul i32 %32, 688
  %.decomposed = sub i32 %.frozen, %33
  %.frozen1 = freeze i32 %15
  %34 = sdiv i32 %.frozen1, 688, !dbg !13
  %35 = mul i32 %34, 688
  %.decomposed2 = sub i32 %.frozen1, %35
  %.frozen3 = freeze i32 %16
  %36 = sdiv i32 %.frozen3, 688, !dbg !13
  %37 = mul i32 %36, 688
  %.decomposed4 = sub i32 %.frozen3, %37
  %.frozen5 = freeze i32 %17
  %38 = sdiv i32 %.frozen5, 688, !dbg !13
  %39 = mul i32 %38, 688
  %.decomposed6 = sub i32 %.frozen5, %39
  %.frozen7 = freeze i32 %18
  %40 = sdiv i32 %.frozen7, 688, !dbg !13
  %41 = mul i32 %40, 688
  %.decomposed8 = sub i32 %.frozen7, %41
  %.frozen9 = freeze i32 %19
  %42 = sdiv i32 %.frozen9, 688, !dbg !13
  %43 = mul i32 %42, 688
  %.decomposed10 = sub i32 %.frozen9, %43
  %.frozen11 = freeze i32 %20
  %44 = sdiv i32 %.frozen11, 688, !dbg !13
  %45 = mul i32 %44, 688
  %.decomposed12 = sub i32 %.frozen11, %45
  %.frozen13 = freeze i32 %21
  %46 = sdiv i32 %.frozen13, 688, !dbg !13
  %47 = mul i32 %46, 688
  %.decomposed14 = sub i32 %.frozen13, %47
  %48 = sext i32 %12 to i64, !dbg !14
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !14
  %50 = sext i32 %13 to i64, !dbg !14
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !14
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %22) #2, !dbg !15
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !15
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !15
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !15
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !15
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %23) #2, !dbg !15
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !15
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !15
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !15
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !15
  %62 = mul i32 %32, 1872, !dbg !16
  %63 = mul i32 %34, 1872, !dbg !16
  %64 = mul i32 %36, 1872, !dbg !16
  %65 = mul i32 %38, 1872, !dbg !16
  %66 = mul i32 %40, 1872, !dbg !16
  %67 = mul i32 %42, 1872, !dbg !16
  %68 = mul i32 %44, 1872, !dbg !16
  %69 = mul i32 %46, 1872, !dbg !16
  %70 = add i32 %62, %.decomposed, !dbg !17
  %71 = add i32 %63, %.decomposed2, !dbg !17
  %72 = add i32 %64, %.decomposed4, !dbg !17
  %73 = add i32 %65, %.decomposed6, !dbg !17
  %74 = add i32 %66, %.decomposed8, !dbg !17
  %75 = add i32 %67, %.decomposed10, !dbg !17
  %76 = add i32 %68, %.decomposed12, !dbg !17
  %77 = add i32 %69, %.decomposed14, !dbg !17
  %78 = sext i32 %70 to i64, !dbg !18
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !18
  %80 = sext i32 %71 to i64, !dbg !18
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !18
  %82 = sext i32 %72 to i64, !dbg !18
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !18
  %84 = sext i32 %73 to i64, !dbg !18
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !18
  %86 = sext i32 %74 to i64, !dbg !18
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %86, !dbg !18
  %88 = sext i32 %75 to i64, !dbg !18
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !18
  %90 = sext i32 %76 to i64, !dbg !18
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !18
  %92 = sext i32 %77 to i64, !dbg !18
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !18
  %94 = zext nneg i32 %6 to i64, !dbg !19
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i64 %94, !dbg !19
  store i32 %53, ptr addrspace(3) %95, align 4, !dbg !19
  %96 = or i32 %6, 1, !dbg !19
  %97 = zext nneg i32 %96 to i64, !dbg !19
  %98 = getelementptr float, ptr addrspace(3) @global_smem, i64 %97, !dbg !19
  store i32 %54, ptr addrspace(3) %98, align 4, !dbg !19
  %99 = or i32 %6, 2, !dbg !19
  %100 = zext nneg i32 %99 to i64, !dbg !19
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i64 %100, !dbg !19
  store i32 %55, ptr addrspace(3) %101, align 4, !dbg !19
  %102 = or i32 %6, 3, !dbg !19
  %103 = zext nneg i32 %102 to i64, !dbg !19
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i64 %103, !dbg !19
  store i32 %56, ptr addrspace(3) %104, align 4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %105 = zext nneg i32 %5 to i64, !dbg !19
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i64 %105, !dbg !19
  %107 = load i32, ptr addrspace(3) %106, align 4, !dbg !19
  %108 = zext nneg i32 %7 to i64, !dbg !19
  %109 = getelementptr float, ptr addrspace(3) @global_smem, i64 %108, !dbg !19
  %110 = load i32, ptr addrspace(3) %109, align 4, !dbg !19
  %111 = zext nneg i32 %8 to i64, !dbg !19
  %112 = getelementptr float, ptr addrspace(3) @global_smem, i64 %111, !dbg !19
  %113 = load i32, ptr addrspace(3) %112, align 4, !dbg !19
  %114 = zext nneg i32 %9 to i64, !dbg !19
  %115 = getelementptr float, ptr addrspace(3) @global_smem, i64 %114, !dbg !19
  %116 = load i32, ptr addrspace(3) %115, align 4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  store i32 %58, ptr addrspace(3) %95, align 4, !dbg !19
  store i32 %59, ptr addrspace(3) %98, align 4, !dbg !19
  store i32 %60, ptr addrspace(3) %101, align 4, !dbg !19
  store i32 %61, ptr addrspace(3) %104, align 4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %117 = load i32, ptr addrspace(3) %106, align 4, !dbg !19
  %118 = load i32, ptr addrspace(3) %109, align 4, !dbg !19
  %119 = load i32, ptr addrspace(3) %112, align 4, !dbg !19
  %120 = load i32, ptr addrspace(3) %115, align 4, !dbg !19
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %79, i1 %24) #2, !dbg !19
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %110, ptr addrspace(1) %81, i1 %25) #2, !dbg !19
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %113, ptr addrspace(1) %83, i1 %26) #2, !dbg !19
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %116, ptr addrspace(1) %85, i1 %27) #2, !dbg !19
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %117, ptr addrspace(1) %87, i1 %28) #2, !dbg !19
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %118, ptr addrspace(1) %89, i1 %29) #2, !dbg !19
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %119, ptr addrspace(1) %91, i1 %30) #2, !dbg !19
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %120, ptr addrspace(1) %93, i1 %31) #2, !dbg !19
  ret void, !dbg !20
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cces32z2rzbxenwigzpoeg6mjxel7jmcly646dik76zzsgnkrysw.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu/ce")
!3 = !{ptr @triton__0d12de, !"kernel", i32 1}
!4 = !{ptr @triton__0d12de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d12de", linkageName: "triton__0d12de", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 22, column: 36, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 21, column: 33, scope: !5)
!11 = !DILocation(line: 22, column: 23, scope: !5)
!12 = !DILocation(line: 23, column: 21, scope: !5)
!13 = !DILocation(line: 26, column: 20, scope: !5)
!14 = !DILocation(line: 27, column: 30, scope: !5)
!15 = !DILocation(line: 27, column: 35, scope: !5)
!16 = !DILocation(line: 28, column: 36, scope: !5)
!17 = !DILocation(line: 28, column: 31, scope: !5)
!18 = !DILocation(line: 28, column: 25, scope: !5)
!19 = !DILocation(line: 28, column: 48, scope: !5)
!20 = !DILocation(line: 28, column: 4, scope: !5)

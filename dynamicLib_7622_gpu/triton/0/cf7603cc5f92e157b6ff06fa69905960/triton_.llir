; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4e5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = lshr i32 %7, 2, !dbg !10
  %9 = and i32 %8, 31, !dbg !10
  %10 = shl i32 %7, 2, !dbg !11
  %11 = and i32 %10, 12, !dbg !11
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !12
  %13 = shl i32 %12, 5, !dbg !13
  %14 = or i32 %13, %9, !dbg !10
  %15 = icmp slt i32 %14, %4, !dbg !14
  %16 = shl i32 %14, 4, !dbg !15
  %17 = or i32 %16, %11, !dbg !16
  %18 = sext i32 %17 to i64, !dbg !17
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !17
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %19, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !18
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !18
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !18
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !18
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !18
  %25 = bitcast i32 %21 to float, !dbg !18
  %26 = bitcast i32 %22 to float, !dbg !18
  %27 = bitcast i32 %23 to float, !dbg !18
  %28 = bitcast i32 %24 to float, !dbg !18
  %29 = zext nneg i32 %11 to i64, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !19
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !21
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !22
  %34 = fadd float %25, %26, !dbg !23
  %35 = fadd float %34, %27, !dbg !23
  %36 = fadd float %35, %28, !dbg !23
  %37 = select i1 %15, float %36, float 0.000000e+00, !dbg !23
  %38 = bitcast float %37 to i32, !dbg !29
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 2, i32 31), !dbg !29
  %40 = bitcast i32 %39 to float, !dbg !29
  %41 = fadd float %37, %40, !dbg !23
  %42 = bitcast float %41 to i32, !dbg !29
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 1, i32 31), !dbg !29
  %44 = bitcast i32 %43 to float, !dbg !29
  %45 = fadd float %41, %44, !dbg !23
  %46 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %45, float 1.600000e+01) #5, !dbg !31
  %47 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %45, float 1.600000e+01) #5, !dbg !31
  %48 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %45, float 1.600000e+01) #5, !dbg !31
  %49 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %45, float 1.600000e+01) #5, !dbg !31
  %50 = fsub float %25, %46, !dbg !32
  %51 = fsub float %26, %46, !dbg !32
  %52 = fsub float %27, %46, !dbg !32
  %53 = fsub float %28, %46, !dbg !32
  %54 = fmul float %50, %50, !dbg !33
  %55 = fmul float %51, %51, !dbg !33
  %56 = fmul float %52, %52, !dbg !33
  %57 = fmul float %53, %53, !dbg !33
  %58 = fadd float %54, %55, !dbg !34
  %59 = fadd float %56, %58, !dbg !34
  %60 = fadd float %57, %59, !dbg !34
  %61 = select i1 %15, float %60, float 0.000000e+00, !dbg !34
  %62 = bitcast float %61 to i32, !dbg !37
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 2, i32 31), !dbg !37
  %64 = bitcast i32 %63 to float, !dbg !37
  %65 = fadd float %61, %64, !dbg !34
  %66 = bitcast float %65 to i32, !dbg !37
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 1, i32 31), !dbg !37
  %68 = bitcast i32 %67 to float, !dbg !37
  %69 = fadd float %65, %68, !dbg !34
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %69, float 1.600000e+01) #5, !dbg !39
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %69, float 1.600000e+01) #5, !dbg !39
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %69, float 1.600000e+01) #5, !dbg !39
  %73 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %69, float 1.600000e+01) #5, !dbg !39
  %74 = fadd float %70, 0x3EE4F8B580000000, !dbg !40
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i = icmp eq i32 %75, 0, !dbg !41
  br i1 %.not.i, label %78, label %76, !dbg !41

76:                                               ; preds = %6
  %77 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %74), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

78:                                               ; preds = %6
  %79 = tail call float @llvm.nvvm.rsqrt.approx.f(float %74), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %76, %78
  %.0.i = phi float [ %77, %76 ], [ %79, %78 ], !dbg !41
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %83 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !22
  %84 = bitcast i32 %83 to float, !dbg !22
  %85 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !22
  %86 = bitcast i32 %85 to float, !dbg !22
  %87 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !22
  %88 = bitcast i32 %87 to float, !dbg !22
  %89 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !22
  %90 = bitcast i32 %89 to float, !dbg !22
  %91 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !20
  %92 = bitcast i32 %91 to float, !dbg !20
  %93 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !20
  %94 = bitcast i32 %93 to float, !dbg !20
  %95 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !20
  %96 = bitcast i32 %95 to float, !dbg !20
  %97 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !20
  %98 = bitcast i32 %97 to float, !dbg !20
  %99 = fmul float %50, %.0.i, !dbg !42
  %100 = fmul float %51, %.0.i, !dbg !42
  %101 = fmul float %52, %.0.i, !dbg !42
  %102 = fmul float %53, %.0.i, !dbg !42
  %103 = fmul float %99, %98, !dbg !43
  %104 = fmul float %100, %96, !dbg !43
  %105 = fmul float %101, %94, !dbg !43
  %106 = fmul float %102, %92, !dbg !43
  %107 = fadd float %103, %90, !dbg !44
  %108 = fadd float %104, %88, !dbg !44
  %109 = fadd float %105, %86, !dbg !44
  %110 = fadd float %106, %84, !dbg !44
  %111 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !45
  %112 = bitcast float %107 to i32, !dbg !46
  %113 = bitcast float %108 to i32, !dbg !46
  %114 = bitcast float %109 to i32, !dbg !46
  %115 = bitcast float %110 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %112, i32 %113, i32 %114, i32 %115, ptr addrspace(1) %111, i1 %15) #5, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #2 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "c6lx3w7annboscvqny67w4ma2bdvnqe6mjzfugpdmrcc5tukmxwf.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu/6l")
!4 = !{ptr @triton__0d1d2d3d4e5de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4e5de, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4e5de", linkageName: "triton__0d1d2d3d4e5de", scope: !3, file: !3, line: 20, type: !8, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 23, scope: !7)
!11 = !DILocation(line: 26, column: 13, scope: !7)
!12 = !DILocation(line: 23, column: 28, scope: !7)
!13 = !DILocation(line: 23, column: 33, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 31, column: 39, scope: !7)
!16 = !DILocation(line: 31, column: 36, scope: !7)
!17 = !DILocation(line: 31, column: 30, scope: !7)
!18 = !DILocation(line: 31, column: 45, scope: !7)
!19 = !DILocation(line: 32, column: 31, scope: !7)
!20 = !DILocation(line: 32, column: 36, scope: !7)
!21 = !DILocation(line: 33, column: 31, scope: !7)
!22 = !DILocation(line: 33, column: 36, scope: !7)
!23 = !DILocation(line: 233, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/admin/zy429782/miniforge3/envs/compiled_torch/lib/python3.8/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!27 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !28)
!28 = !DILocation(line: 38, column: 24, scope: !24)
!29 = !DILocation(line: 243, column: 36, scope: !26, inlinedAt: !30)
!30 = !DILocation(line: 38, column: 24, scope: !26)
!31 = !DILocation(line: 41, column: 19, scope: !7)
!32 = !DILocation(line: 42, column: 19, scope: !7)
!33 = !DILocation(line: 43, column: 20, scope: !7)
!34 = !DILocation(line: 233, column: 15, scope: !24, inlinedAt: !35)
!35 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !36)
!36 = !DILocation(line: 46, column: 26, scope: !24)
!37 = !DILocation(line: 243, column: 36, scope: !26, inlinedAt: !38)
!38 = !DILocation(line: 46, column: 26, scope: !26)
!39 = !DILocation(line: 49, column: 20, scope: !7)
!40 = !DILocation(line: 51, column: 20, scope: !7)
!41 = !DILocation(line: 52, column: 28, scope: !7)
!42 = !DILocation(line: 53, column: 20, scope: !7)
!43 = !DILocation(line: 54, column: 20, scope: !7)
!44 = !DILocation(line: 55, column: 20, scope: !7)
!45 = !DILocation(line: 56, column: 25, scope: !7)
!46 = !DILocation(line: 56, column: 47, scope: !7)
!47 = !DILocation(line: 56, column: 4, scope: !7)

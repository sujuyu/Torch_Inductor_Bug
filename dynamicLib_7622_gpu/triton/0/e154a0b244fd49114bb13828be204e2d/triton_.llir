; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton__0d1d2de(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !5 {
  %4 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %5 = shl i32 %4, 2, !dbg !8
  %6 = and i32 %5, 508, !dbg !8
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !9
  %8 = shl i32 %7, 10, !dbg !10
  %9 = or i32 %8, %6, !dbg !11
  %10 = or i32 %9, 512, !dbg !11
  %11 = icmp slt i32 %9, %2, !dbg !12
  %12 = icmp slt i32 %10, %2, !dbg !12
  %13 = srem i32 %9, 176, !dbg !13
  %14 = srem i32 %10, 176, !dbg !13
  %15 = sext i32 %9 to i64, !dbg !14
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !14
  %17 = sext i32 %10 to i64, !dbg !14
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !14
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %16, i1 %11) #1, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !15
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !15
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !15
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 %12) #1, !dbg !15
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !15
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !15
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !15
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !15
  %29 = sext i32 %13 to i64, !dbg !16
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !16
  %31 = sext i32 %14 to i64, !dbg !16
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !16
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %11) #1, !dbg !17
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !17
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !17
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !17
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !17
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %12) #1, !dbg !17
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !17
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !17
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !17
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !17
  %43 = insertelement <8 x i32> poison, i32 %28, i64 0, !dbg !15
  %44 = insertelement <8 x i32> %43, i32 %27, i64 1, !dbg !15
  %45 = insertelement <8 x i32> %44, i32 %26, i64 2, !dbg !15
  %46 = insertelement <8 x i32> %45, i32 %25, i64 3, !dbg !15
  %47 = insertelement <8 x i32> %46, i32 %23, i64 4, !dbg !15
  %48 = insertelement <8 x i32> %47, i32 %22, i64 5, !dbg !15
  %49 = insertelement <8 x i32> %48, i32 %21, i64 6, !dbg !15
  %50 = insertelement <8 x i32> %49, i32 %20, i64 7, !dbg !15
  %51 = bitcast <8 x i32> %50 to <8 x float>, !dbg !15
  %52 = insertelement <8 x i32> poison, i32 %42, i64 0, !dbg !17
  %53 = insertelement <8 x i32> %52, i32 %41, i64 1, !dbg !17
  %54 = insertelement <8 x i32> %53, i32 %40, i64 2, !dbg !17
  %55 = insertelement <8 x i32> %54, i32 %39, i64 3, !dbg !17
  %56 = insertelement <8 x i32> %55, i32 %37, i64 4, !dbg !17
  %57 = insertelement <8 x i32> %56, i32 %36, i64 5, !dbg !17
  %58 = insertelement <8 x i32> %57, i32 %35, i64 6, !dbg !17
  %59 = insertelement <8 x i32> %58, i32 %34, i64 7, !dbg !17
  %60 = bitcast <8 x i32> %59 to <8 x float>, !dbg !17
  %61 = fadd <8 x float> %51, %60, !dbg !18
  %62 = fcmp ogt <8 x float> %61, zeroinitializer, !dbg !19
  %63 = extractelement <8 x float> %61, i64 7, !dbg !20
  %64 = fmul float %63, 0x3F847AE140000000, !dbg !21
  %65 = extractelement <8 x float> %61, i64 6, !dbg !20
  %66 = fmul float %65, 0x3F847AE140000000, !dbg !21
  %67 = extractelement <8 x float> %61, i64 5, !dbg !20
  %68 = fmul float %67, 0x3F847AE140000000, !dbg !21
  %69 = extractelement <8 x float> %61, i64 4, !dbg !20
  %70 = fmul float %69, 0x3F847AE140000000, !dbg !21
  %71 = extractelement <8 x float> %61, i64 3, !dbg !20
  %72 = fmul float %71, 0x3F847AE140000000, !dbg !21
  %73 = extractelement <8 x float> %61, i64 2, !dbg !20
  %74 = fmul float %73, 0x3F847AE140000000, !dbg !21
  %75 = extractelement <8 x float> %61, i64 1, !dbg !20
  %76 = fmul float %75, 0x3F847AE140000000, !dbg !21
  %77 = extractelement <8 x float> %61, i64 0, !dbg !20
  %78 = fmul float %77, 0x3F847AE140000000, !dbg !21
  %79 = extractelement <8 x i1> %62, i64 7, !dbg !20
  %80 = select i1 %79, float %63, float %64, !dbg !20
  %81 = extractelement <8 x i1> %62, i64 6, !dbg !20
  %82 = select i1 %81, float %65, float %66, !dbg !20
  %83 = extractelement <8 x i1> %62, i64 5, !dbg !20
  %84 = select i1 %83, float %67, float %68, !dbg !20
  %85 = extractelement <8 x i1> %62, i64 4, !dbg !20
  %86 = select i1 %85, float %69, float %70, !dbg !20
  %87 = extractelement <8 x i1> %62, i64 3, !dbg !20
  %88 = select i1 %87, float %71, float %72, !dbg !20
  %89 = extractelement <8 x i1> %62, i64 2, !dbg !20
  %90 = select i1 %89, float %73, float %74, !dbg !20
  %91 = extractelement <8 x i1> %62, i64 1, !dbg !20
  %92 = select i1 %91, float %75, float %76, !dbg !20
  %93 = extractelement <8 x i1> %62, i64 0, !dbg !20
  %94 = select i1 %93, float %77, float %78, !dbg !20
  %95 = bitcast float %80 to i32, !dbg !22
  %96 = bitcast float %82 to i32, !dbg !22
  %97 = bitcast float %84 to i32, !dbg !22
  %98 = bitcast float %86 to i32, !dbg !22
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %95, i32 %96, i32 %97, i32 %98, ptr addrspace(1) %16, i1 %11) #1, !dbg !22
  %99 = bitcast float %88 to i32, !dbg !22
  %100 = bitcast float %90 to i32, !dbg !22
  %101 = bitcast float %92 to i32, !dbg !22
  %102 = bitcast float %94 to i32, !dbg !22
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %99, i32 %100, i32 %101, i32 %102, ptr addrspace(1) %18, i1 %12) #1, !dbg !22
  ret void, !dbg !23
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cmnj3yukewo5k4o3ipliituwh2tjvgz2btwb2eagw5xhu2gjozht.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu/mn")
!3 = !{ptr @triton__0d1d2de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2de", linkageName: "triton__0d1d2de", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 22, column: 36, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 21, column: 33, scope: !5)
!11 = !DILocation(line: 22, column: 23, scope: !5)
!12 = !DILocation(line: 23, column: 21, scope: !5)
!13 = !DILocation(line: 25, column: 18, scope: !5)
!14 = !DILocation(line: 26, column: 34, scope: !5)
!15 = !DILocation(line: 26, column: 39, scope: !5)
!16 = !DILocation(line: 27, column: 30, scope: !5)
!17 = !DILocation(line: 27, column: 35, scope: !5)
!18 = !DILocation(line: 28, column: 18, scope: !5)
!19 = !DILocation(line: 30, column: 18, scope: !5)
!20 = !DILocation(line: 33, column: 32, scope: !5)
!21 = !DILocation(line: 32, column: 18, scope: !5)
!22 = !DILocation(line: 34, column: 39, scope: !5)
!23 = !DILocation(line: 34, column: 4, scope: !5)

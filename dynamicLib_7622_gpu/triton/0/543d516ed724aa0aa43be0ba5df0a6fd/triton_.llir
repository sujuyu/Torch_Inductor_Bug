; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d12de(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !5 {
  %4 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %5 = and i32 %4, 127, !dbg !8
  %6 = shl nuw nsw i32 %5, 2, !dbg !8
  %7 = or i32 %5, 128, !dbg !8
  %8 = or i32 %5, 256, !dbg !8
  %9 = or i32 %5, 384, !dbg !8
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !9
  %11 = shl i32 %10, 9, !dbg !10
  %12 = or i32 %11, %6, !dbg !11
  %13 = or i32 %11, %5, !dbg !11
  %14 = or i32 %11, %7, !dbg !11
  %15 = or i32 %11, %8, !dbg !11
  %16 = or i32 %11, %9, !dbg !11
  %17 = icmp slt i32 %12, %2, !dbg !12
  %18 = icmp slt i32 %13, %2, !dbg !12
  %19 = icmp slt i32 %14, %2, !dbg !12
  %20 = icmp slt i32 %15, %2, !dbg !12
  %21 = icmp slt i32 %16, %2, !dbg !12
  %.frozen = freeze i32 %13
  %22 = sdiv i32 %.frozen, 128, !dbg !13
  %23 = mul i32 %22, 128
  %.decomposed = sub i32 %.frozen, %23
  %.frozen1 = freeze i32 %14
  %24 = sdiv i32 %.frozen1, 128, !dbg !13
  %25 = mul i32 %24, 128
  %.decomposed2 = sub i32 %.frozen1, %25
  %.frozen3 = freeze i32 %15
  %26 = sdiv i32 %.frozen3, 128, !dbg !13
  %27 = mul i32 %26, 128
  %.decomposed4 = sub i32 %.frozen3, %27
  %.frozen5 = freeze i32 %16
  %28 = sdiv i32 %.frozen5, 128, !dbg !13
  %29 = mul i32 %28, 128
  %.decomposed6 = sub i32 %.frozen5, %29
  %30 = sext i32 %12 to i64, !dbg !14
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !14
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %17) #2, !dbg !15
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !15
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !15
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !15
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !15
  %37 = mul i32 %22, 1872, !dbg !16
  %38 = mul i32 %24, 1872, !dbg !16
  %39 = mul i32 %26, 1872, !dbg !16
  %40 = mul i32 %28, 1872, !dbg !16
  %41 = add i32 %37, %.decomposed, !dbg !17
  %42 = add i32 %38, %.decomposed2, !dbg !17
  %43 = add i32 %39, %.decomposed4, !dbg !17
  %44 = add i32 %40, %.decomposed6, !dbg !17
  %45 = sext i32 %41 to i64, !dbg !18
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !18
  %47 = sext i32 %42 to i64, !dbg !18
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !18
  %49 = sext i32 %43 to i64, !dbg !18
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !18
  %51 = sext i32 %44 to i64, !dbg !18
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !18
  %53 = zext nneg i32 %6 to i64, !dbg !19
  %54 = getelementptr float, ptr addrspace(3) @global_smem, i64 %53, !dbg !19
  store i32 %33, ptr addrspace(3) %54, align 4, !dbg !19
  %55 = or i32 %6, 1, !dbg !19
  %56 = zext nneg i32 %55 to i64, !dbg !19
  %57 = getelementptr float, ptr addrspace(3) @global_smem, i64 %56, !dbg !19
  store i32 %34, ptr addrspace(3) %57, align 4, !dbg !19
  %58 = or i32 %6, 2, !dbg !19
  %59 = zext nneg i32 %58 to i64, !dbg !19
  %60 = getelementptr float, ptr addrspace(3) @global_smem, i64 %59, !dbg !19
  store i32 %35, ptr addrspace(3) %60, align 4, !dbg !19
  %61 = or i32 %6, 3, !dbg !19
  %62 = zext nneg i32 %61 to i64, !dbg !19
  %63 = getelementptr float, ptr addrspace(3) @global_smem, i64 %62, !dbg !19
  store i32 %36, ptr addrspace(3) %63, align 4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %64 = zext nneg i32 %5 to i64, !dbg !19
  %65 = getelementptr float, ptr addrspace(3) @global_smem, i64 %64, !dbg !19
  %66 = load i32, ptr addrspace(3) %65, align 4, !dbg !19
  %67 = zext nneg i32 %7 to i64, !dbg !19
  %68 = getelementptr float, ptr addrspace(3) @global_smem, i64 %67, !dbg !19
  %69 = load i32, ptr addrspace(3) %68, align 4, !dbg !19
  %70 = zext nneg i32 %8 to i64, !dbg !19
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i64 %70, !dbg !19
  %72 = load i32, ptr addrspace(3) %71, align 4, !dbg !19
  %73 = zext nneg i32 %9 to i64, !dbg !19
  %74 = getelementptr float, ptr addrspace(3) @global_smem, i64 %73, !dbg !19
  %75 = load i32, ptr addrspace(3) %74, align 4, !dbg !19
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %66, ptr addrspace(1) %46, i1 %18) #2, !dbg !19
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %69, ptr addrspace(1) %48, i1 %19) #2, !dbg !19
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %72, ptr addrspace(1) %50, i1 %20) #2, !dbg !19
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %75, ptr addrspace(1) %52, i1 %21) #2, !dbg !19
  ret void, !dbg !20
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "crli2g66nylbgqwqnwls5js4wo76vfpiofboqfonjwldqzljnlq3.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu/rl")
!3 = !{ptr @triton__0d12de, !"kernel", i32 1}
!4 = !{ptr @triton__0d12de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d12de", linkageName: "triton__0d12de", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 22, column: 36, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 21, column: 33, scope: !5)
!11 = !DILocation(line: 22, column: 23, scope: !5)
!12 = !DILocation(line: 23, column: 21, scope: !5)
!13 = !DILocation(line: 26, column: 20, scope: !5)
!14 = !DILocation(line: 27, column: 30, scope: !5)
!15 = !DILocation(line: 27, column: 35, scope: !5)
!16 = !DILocation(line: 28, column: 36, scope: !5)
!17 = !DILocation(line: 28, column: 31, scope: !5)
!18 = !DILocation(line: 28, column: 25, scope: !5)
!19 = !DILocation(line: 28, column: 48, scope: !5)
!20 = !DILocation(line: 28, column: 4, scope: !5)

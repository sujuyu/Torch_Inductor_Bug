; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6de7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %10 = and i32 %9, 31, !dbg !10
  %11 = lshr i32 %9, 5, !dbg !10
  %12 = shl i32 %9, 2, !dbg !10
  %13 = and i32 %12, 28, !dbg !10
  %14 = and i32 %11, 3, !dbg !10
  %15 = lshr i32 %10, 4, !dbg !10
  %16 = shl nuw nsw i32 %14, 1, !dbg !10
  %17 = or i32 %16, %15, !dbg !10
  %18 = or i32 %17, 8, !dbg !10
  %19 = or i32 %17, 16, !dbg !10
  %20 = or i32 %17, 24, !dbg !10
  %21 = lshr i32 %10, 3, !dbg !11
  %22 = shl nuw nsw i32 %14, 2, !dbg !11
  %23 = or i32 %22, %21, !dbg !11
  %24 = or i32 %23, 16, !dbg !11
  %25 = shl i32 %9, 1, !dbg !11
  %26 = and i32 %25, 30, !dbg !11
  %27 = or i32 %26, 1, !dbg !11
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #5, !dbg !12
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #5, !dbg !13
  %30 = add i32 %29, 1, !dbg !14
  %31 = shl i32 %28, 5, !dbg !15
  %32 = mul i32 %31, %30, !dbg !16
  %33 = or i32 %32, %13, !dbg !10
  %34 = or i32 %32, %17, !dbg !10
  %35 = or i32 %32, %18, !dbg !10
  %36 = or i32 %32, %19, !dbg !10
  %37 = or i32 %32, %20, !dbg !10
  %38 = icmp slt i32 %33, %6, !dbg !17
  %39 = icmp slt i32 %34, %6, !dbg !17
  %40 = icmp slt i32 %35, %6, !dbg !17
  %41 = icmp slt i32 %36, %6, !dbg !17
  %42 = icmp slt i32 %37, %6, !dbg !17
  %43 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !18
  %44 = shl i32 %43, 5, !dbg !19
  %45 = or i32 %44, %23, !dbg !11
  %46 = or i32 %44, %24, !dbg !11
  %47 = or i32 %44, %26, !dbg !11
  %48 = or i32 %44, %27, !dbg !11
  %49 = icmp slt i32 %45, 50, !dbg !20
  %50 = icmp slt i32 %46, 50, !dbg !20
  %51 = icmp slt i32 %47, 50, !dbg !20
  %.frozen = freeze i32 %33
  %52 = sdiv i32 %.frozen, 128, !dbg !21
  %53 = sdiv i32 %34, 128, !dbg !21
  %54 = sdiv i32 %35, 128, !dbg !21
  %55 = sdiv i32 %36, 128, !dbg !21
  %56 = sdiv i32 %37, 128, !dbg !21
  %57 = mul i32 %52, 128
  %.decomposed = sub i32 %.frozen, %57
  %.frozen22 = freeze i32 %34
  %58 = sdiv i32 %.frozen22, 16, !dbg !22
  %.frozen24 = freeze i32 %35
  %59 = sdiv i32 %.frozen24, 16, !dbg !22
  %.frozen26 = freeze i32 %36
  %60 = sdiv i32 %.frozen26, 16, !dbg !22
  %.frozen28 = freeze i32 %37
  %61 = sdiv i32 %.frozen28, 16, !dbg !22
  %62 = srem i32 %58, 8, !dbg !23
  %63 = srem i32 %59, 8, !dbg !23
  %64 = srem i32 %60, 8, !dbg !23
  %65 = srem i32 %61, 8, !dbg !23
  %66 = mul i32 %58, 16
  %.decomposed23 = sub i32 %.frozen22, %66
  %67 = mul i32 %59, 16
  %.decomposed25 = sub i32 %.frozen24, %67
  %68 = mul i32 %60, 16
  %.decomposed27 = sub i32 %.frozen26, %68
  %69 = mul i32 %61, 16
  %.decomposed29 = sub i32 %.frozen28, %69
  %70 = shl i32 %45, 7, !dbg !24
  %71 = shl i32 %46, 7, !dbg !24
  %72 = mul i32 %52, 6400, !dbg !25
  %73 = add i32 %72, %.decomposed, !dbg !26
  %74 = add i32 %73, %70, !dbg !27
  %75 = add i32 %73, %71, !dbg !27
  %76 = sext i32 %74 to i64, !dbg !28
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !28
  %78 = sext i32 %75 to i64, !dbg !28
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !28
  %80 = and i1 %49, %38, !dbg !29
  %81 = and i1 %50, %38, !dbg !29
  %82 = and i1 %51, %39, !dbg !29
  %83 = and i1 %51, %40, !dbg !29
  %84 = and i1 %51, %41, !dbg !29
  %85 = and i1 %51, %42, !dbg !29
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 %80) #5, !dbg !30
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !30
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !30
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !30
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !30
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %81) #5, !dbg !30
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !30
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !30
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !30
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !30
  %96 = mul nuw nsw i32 %13, 33, !dbg !30
  %97 = add nuw nsw i32 %23, %96, !dbg !30
  %98 = zext nneg i32 %97 to i64, !dbg !30
  %99 = getelementptr float, ptr addrspace(3) @global_smem, i64 %98, !dbg !30
  store i32 %87, ptr addrspace(3) %99, align 4, !dbg !30
  %100 = add nuw nsw i32 %96, 33, !dbg !30
  %101 = add nuw nsw i32 %100, %23, !dbg !30
  %102 = zext nneg i32 %101 to i64, !dbg !30
  %103 = getelementptr float, ptr addrspace(3) @global_smem, i64 %102, !dbg !30
  store i32 %88, ptr addrspace(3) %103, align 4, !dbg !30
  %104 = add nuw nsw i32 %96, 66, !dbg !30
  %105 = add nuw nsw i32 %104, %23, !dbg !30
  %106 = zext nneg i32 %105 to i64, !dbg !30
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i64 %106, !dbg !30
  store i32 %89, ptr addrspace(3) %107, align 4, !dbg !30
  %108 = add nuw nsw i32 %96, 99, !dbg !30
  %109 = add nuw nsw i32 %108, %23, !dbg !30
  %110 = zext nneg i32 %109 to i64, !dbg !30
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i64 %110, !dbg !30
  store i32 %90, ptr addrspace(3) %111, align 4, !dbg !30
  %112 = add nuw nsw i32 %24, %96, !dbg !30
  %113 = zext nneg i32 %112 to i64, !dbg !30
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i64 %113, !dbg !30
  store i32 %92, ptr addrspace(3) %114, align 4, !dbg !30
  %115 = add nuw nsw i32 %24, %100, !dbg !30
  %116 = zext nneg i32 %115 to i64, !dbg !30
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i64 %116, !dbg !30
  store i32 %93, ptr addrspace(3) %117, align 4, !dbg !30
  %118 = add nuw nsw i32 %24, %104, !dbg !30
  %119 = zext nneg i32 %118 to i64, !dbg !30
  %120 = getelementptr float, ptr addrspace(3) @global_smem, i64 %119, !dbg !30
  store i32 %94, ptr addrspace(3) %120, align 4, !dbg !30
  %121 = add nuw nsw i32 %24, %108, !dbg !30
  %122 = zext nneg i32 %121 to i64, !dbg !30
  %123 = getelementptr float, ptr addrspace(3) @global_smem, i64 %122, !dbg !30
  store i32 %95, ptr addrspace(3) %123, align 4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %124 = mul nuw nsw i32 %17, 33, !dbg !30
  %125 = add nuw nsw i32 %124, %26, !dbg !30
  %126 = zext nneg i32 %125 to i64, !dbg !30
  %127 = getelementptr float, ptr addrspace(3) @global_smem, i64 %126, !dbg !30
  %128 = load <1 x float>, ptr addrspace(3) %127, align 4, !dbg !30
  %129 = add nuw nsw i32 %124, %27, !dbg !30
  %130 = zext nneg i32 %129 to i64, !dbg !30
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i64 %130, !dbg !30
  %132 = load <1 x float>, ptr addrspace(3) %131, align 4, !dbg !30
  %133 = mul nuw nsw i32 %18, 33, !dbg !30
  %134 = add nuw nsw i32 %133, %26, !dbg !30
  %135 = zext nneg i32 %134 to i64, !dbg !30
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i64 %135, !dbg !30
  %137 = load <1 x float>, ptr addrspace(3) %136, align 4, !dbg !30
  %138 = add nuw nsw i32 %133, %27, !dbg !30
  %139 = zext nneg i32 %138 to i64, !dbg !30
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i64 %139, !dbg !30
  %141 = load <1 x float>, ptr addrspace(3) %140, align 4, !dbg !30
  %142 = mul nuw nsw i32 %19, 33, !dbg !30
  %143 = add nuw nsw i32 %142, %26, !dbg !30
  %144 = zext nneg i32 %143 to i64, !dbg !30
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i64 %144, !dbg !30
  %146 = load <1 x float>, ptr addrspace(3) %145, align 4, !dbg !30
  %147 = add nuw nsw i32 %142, %27, !dbg !30
  %148 = zext nneg i32 %147 to i64, !dbg !30
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i64 %148, !dbg !30
  %150 = load <1 x float>, ptr addrspace(3) %149, align 4, !dbg !30
  %151 = mul nuw nsw i32 %20, 33, !dbg !30
  %152 = add nuw nsw i32 %151, %26, !dbg !30
  %153 = zext nneg i32 %152 to i64, !dbg !30
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i64 %153, !dbg !30
  %155 = load <1 x float>, ptr addrspace(3) %154, align 4, !dbg !30
  %156 = add nuw nsw i32 %151, %27, !dbg !30
  %157 = zext nneg i32 %156 to i64, !dbg !30
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i64 %157, !dbg !30
  %159 = load <1 x float>, ptr addrspace(3) %158, align 4, !dbg !30
  %160 = shl i32 %47, 3, !dbg !31
  %161 = shl i32 %48, 3, !dbg !31
  %162 = mul i32 %53, 400, !dbg !32
  %163 = mul i32 %54, 400, !dbg !32
  %164 = mul i32 %55, 400, !dbg !32
  %165 = mul i32 %56, 400, !dbg !32
  %166 = add i32 %162, %62, !dbg !33
  %167 = add i32 %166, %160, !dbg !34
  %168 = add i32 %166, %161, !dbg !34
  %169 = add i32 %163, %63, !dbg !33
  %170 = add i32 %169, %160, !dbg !34
  %171 = add i32 %169, %161, !dbg !34
  %172 = add i32 %164, %64, !dbg !33
  %173 = add i32 %172, %160, !dbg !34
  %174 = add i32 %172, %161, !dbg !34
  %175 = add i32 %165, %65, !dbg !33
  %176 = add i32 %175, %160, !dbg !34
  %177 = add i32 %175, %161, !dbg !34
  %178 = sext i32 %167 to i64, !dbg !35
  %179 = getelementptr float, ptr addrspace(1) %1, i64 %178, !dbg !35
  %180 = sext i32 %168 to i64, !dbg !35
  %181 = getelementptr float, ptr addrspace(1) %1, i64 %180, !dbg !35
  %182 = sext i32 %170 to i64, !dbg !35
  %183 = getelementptr float, ptr addrspace(1) %1, i64 %182, !dbg !35
  %184 = sext i32 %171 to i64, !dbg !35
  %185 = getelementptr float, ptr addrspace(1) %1, i64 %184, !dbg !35
  %186 = sext i32 %173 to i64, !dbg !35
  %187 = getelementptr float, ptr addrspace(1) %1, i64 %186, !dbg !35
  %188 = sext i32 %174 to i64, !dbg !35
  %189 = getelementptr float, ptr addrspace(1) %1, i64 %188, !dbg !35
  %190 = sext i32 %176 to i64, !dbg !35
  %191 = getelementptr float, ptr addrspace(1) %1, i64 %190, !dbg !35
  %192 = sext i32 %177 to i64, !dbg !35
  %193 = getelementptr float, ptr addrspace(1) %1, i64 %192, !dbg !35
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 %82) #5, !dbg !36
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 %82) #5, !dbg !36
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %183, i1 %83) #5, !dbg !36
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 %83) #5, !dbg !36
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 %84) #5, !dbg !36
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 %84) #5, !dbg !36
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 %85) #5, !dbg !36
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %193, i1 %85) #5, !dbg !36
  %202 = getelementptr float, ptr addrspace(1) %2, i64 %178, !dbg !37
  %203 = getelementptr float, ptr addrspace(1) %2, i64 %180, !dbg !37
  %204 = getelementptr float, ptr addrspace(1) %2, i64 %182, !dbg !37
  %205 = getelementptr float, ptr addrspace(1) %2, i64 %184, !dbg !37
  %206 = getelementptr float, ptr addrspace(1) %2, i64 %186, !dbg !37
  %207 = getelementptr float, ptr addrspace(1) %2, i64 %188, !dbg !37
  %208 = getelementptr float, ptr addrspace(1) %2, i64 %190, !dbg !37
  %209 = getelementptr float, ptr addrspace(1) %2, i64 %192, !dbg !37
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %202, i1 %82) #5, !dbg !38
  %211 = bitcast i32 %210 to float, !dbg !38
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %203, i1 %82) #5, !dbg !38
  %213 = bitcast i32 %212 to float, !dbg !38
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %204, i1 %83) #5, !dbg !38
  %215 = bitcast i32 %214 to float, !dbg !38
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %205, i1 %83) #5, !dbg !38
  %217 = bitcast i32 %216 to float, !dbg !38
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %206, i1 %84) #5, !dbg !38
  %219 = bitcast i32 %218 to float, !dbg !38
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %207, i1 %84) #5, !dbg !38
  %221 = bitcast i32 %220 to float, !dbg !38
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 %85) #5, !dbg !38
  %223 = bitcast i32 %222 to float, !dbg !38
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %209, i1 %85) #5, !dbg !38
  %225 = bitcast i32 %224 to float, !dbg !38
  %226 = sext i32 %.decomposed23 to i64, !dbg !39
  %227 = getelementptr float, ptr addrspace(1) %3, i64 %226, !dbg !39
  %228 = sext i32 %.decomposed25 to i64, !dbg !39
  %229 = getelementptr float, ptr addrspace(1) %3, i64 %228, !dbg !39
  %230 = sext i32 %.decomposed27 to i64, !dbg !39
  %231 = getelementptr float, ptr addrspace(1) %3, i64 %230, !dbg !39
  %232 = sext i32 %.decomposed29 to i64, !dbg !39
  %233 = getelementptr float, ptr addrspace(1) %3, i64 %232, !dbg !39
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %227, i1 %39) #5, !dbg !40
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %227, i1 %39) #5, !dbg !40
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %229, i1 %40) #5, !dbg !40
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %229, i1 %40) #5, !dbg !40
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %231, i1 %41) #5, !dbg !40
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %231, i1 %41) #5, !dbg !40
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %233, i1 %42) #5, !dbg !40
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %233, i1 %42) #5, !dbg !40
  %242 = getelementptr float, ptr addrspace(1) %4, i64 %226, !dbg !41
  %243 = getelementptr float, ptr addrspace(1) %4, i64 %228, !dbg !41
  %244 = getelementptr float, ptr addrspace(1) %4, i64 %230, !dbg !41
  %245 = getelementptr float, ptr addrspace(1) %4, i64 %232, !dbg !41
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 %39) #5, !dbg !42
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 %39) #5, !dbg !42
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %243, i1 %40) #5, !dbg !42
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %243, i1 %40) #5, !dbg !42
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 %41) #5, !dbg !42
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 %41) #5, !dbg !42
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %245, i1 %42) #5, !dbg !42
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %245, i1 %42) #5, !dbg !42
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %211, float 1.600000e+01) #5, !dbg !43
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %213, float 1.600000e+01) #5, !dbg !43
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %215, float 1.600000e+01) #5, !dbg !43
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %217, float 1.600000e+01) #5, !dbg !43
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %219, float 1.600000e+01) #5, !dbg !43
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %221, float 1.600000e+01) #5, !dbg !43
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %223, float 1.600000e+01) #5, !dbg !43
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %225, float 1.600000e+01) #5, !dbg !43
  %262 = fadd float %254, 0x3EE4F8B580000000, !dbg !44
  %263 = fadd float %255, 0x3EE4F8B580000000, !dbg !44
  %264 = fadd float %256, 0x3EE4F8B580000000, !dbg !44
  %265 = fadd float %257, 0x3EE4F8B580000000, !dbg !44
  %266 = fadd float %258, 0x3EE4F8B580000000, !dbg !44
  %267 = fadd float %259, 0x3EE4F8B580000000, !dbg !44
  %268 = fadd float %260, 0x3EE4F8B580000000, !dbg !44
  %269 = fadd float %261, 0x3EE4F8B580000000, !dbg !44
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not.i = icmp eq i32 %270, 0, !dbg !45
  br i1 %.not.i, label %273, label %271, !dbg !45

271:                                              ; preds = %8
  %272 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %262), !dbg !45
  br label %__nv_rsqrtf.exit, !dbg !45

273:                                              ; preds = %8
  %274 = tail call float @llvm.nvvm.rsqrt.approx.f(float %262), !dbg !45
  br label %__nv_rsqrtf.exit, !dbg !45

__nv_rsqrtf.exit:                                 ; preds = %271, %273
  %.0.i = phi float [ %272, %271 ], [ %274, %273 ], !dbg !45
  %275 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not.i1 = icmp eq i32 %275, 0, !dbg !45
  br i1 %.not.i1, label %278, label %276, !dbg !45

276:                                              ; preds = %__nv_rsqrtf.exit
  %277 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %263), !dbg !45
  br label %__nv_rsqrtf.exit3, !dbg !45

278:                                              ; preds = %__nv_rsqrtf.exit
  %279 = tail call float @llvm.nvvm.rsqrt.approx.f(float %263), !dbg !45
  br label %__nv_rsqrtf.exit3, !dbg !45

__nv_rsqrtf.exit3:                                ; preds = %276, %278
  %.0.i2 = phi float [ %277, %276 ], [ %279, %278 ], !dbg !45
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not.i4 = icmp eq i32 %280, 0, !dbg !45
  br i1 %.not.i4, label %283, label %281, !dbg !45

281:                                              ; preds = %__nv_rsqrtf.exit3
  %282 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %264), !dbg !45
  br label %__nv_rsqrtf.exit6, !dbg !45

283:                                              ; preds = %__nv_rsqrtf.exit3
  %284 = tail call float @llvm.nvvm.rsqrt.approx.f(float %264), !dbg !45
  br label %__nv_rsqrtf.exit6, !dbg !45

__nv_rsqrtf.exit6:                                ; preds = %281, %283
  %.0.i5 = phi float [ %282, %281 ], [ %284, %283 ], !dbg !45
  %285 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not.i7 = icmp eq i32 %285, 0, !dbg !45
  br i1 %.not.i7, label %288, label %286, !dbg !45

286:                                              ; preds = %__nv_rsqrtf.exit6
  %287 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %265), !dbg !45
  br label %__nv_rsqrtf.exit9, !dbg !45

288:                                              ; preds = %__nv_rsqrtf.exit6
  %289 = tail call float @llvm.nvvm.rsqrt.approx.f(float %265), !dbg !45
  br label %__nv_rsqrtf.exit9, !dbg !45

__nv_rsqrtf.exit9:                                ; preds = %286, %288
  %.0.i8 = phi float [ %287, %286 ], [ %289, %288 ], !dbg !45
  %290 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not.i10 = icmp eq i32 %290, 0, !dbg !45
  br i1 %.not.i10, label %293, label %291, !dbg !45

291:                                              ; preds = %__nv_rsqrtf.exit9
  %292 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %266), !dbg !45
  br label %__nv_rsqrtf.exit12, !dbg !45

293:                                              ; preds = %__nv_rsqrtf.exit9
  %294 = tail call float @llvm.nvvm.rsqrt.approx.f(float %266), !dbg !45
  br label %__nv_rsqrtf.exit12, !dbg !45

__nv_rsqrtf.exit12:                               ; preds = %291, %293
  %.0.i11 = phi float [ %292, %291 ], [ %294, %293 ], !dbg !45
  %295 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not.i13 = icmp eq i32 %295, 0, !dbg !45
  br i1 %.not.i13, label %298, label %296, !dbg !45

296:                                              ; preds = %__nv_rsqrtf.exit12
  %297 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %267), !dbg !45
  br label %__nv_rsqrtf.exit15, !dbg !45

298:                                              ; preds = %__nv_rsqrtf.exit12
  %299 = tail call float @llvm.nvvm.rsqrt.approx.f(float %267), !dbg !45
  br label %__nv_rsqrtf.exit15, !dbg !45

__nv_rsqrtf.exit15:                               ; preds = %296, %298
  %.0.i14 = phi float [ %297, %296 ], [ %299, %298 ], !dbg !45
  %300 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not.i16 = icmp eq i32 %300, 0, !dbg !45
  br i1 %.not.i16, label %303, label %301, !dbg !45

301:                                              ; preds = %__nv_rsqrtf.exit15
  %302 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %268), !dbg !45
  br label %__nv_rsqrtf.exit18, !dbg !45

303:                                              ; preds = %__nv_rsqrtf.exit15
  %304 = tail call float @llvm.nvvm.rsqrt.approx.f(float %268), !dbg !45
  br label %__nv_rsqrtf.exit18, !dbg !45

__nv_rsqrtf.exit18:                               ; preds = %301, %303
  %.0.i17 = phi float [ %302, %301 ], [ %304, %303 ], !dbg !45
  %305 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not.i19 = icmp eq i32 %305, 0, !dbg !45
  br i1 %.not.i19, label %308, label %306, !dbg !45

306:                                              ; preds = %__nv_rsqrtf.exit18
  %307 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %269), !dbg !45
  br label %__nv_rsqrtf.exit21, !dbg !45

308:                                              ; preds = %__nv_rsqrtf.exit18
  %309 = tail call float @llvm.nvvm.rsqrt.approx.f(float %269), !dbg !45
  br label %__nv_rsqrtf.exit21, !dbg !45

__nv_rsqrtf.exit21:                               ; preds = %306, %308
  %.0.i20 = phi float [ %307, %306 ], [ %309, %308 ], !dbg !45
  %310 = extractelement <1 x float> %159, i64 0, !dbg !30
  %311 = bitcast i32 %201 to float, !dbg !36
  %312 = fsub float %310, %311, !dbg !46
  %313 = extractelement <1 x float> %155, i64 0, !dbg !30
  %314 = bitcast i32 %200 to float, !dbg !36
  %315 = fsub float %313, %314, !dbg !46
  %316 = extractelement <1 x float> %150, i64 0, !dbg !30
  %317 = bitcast i32 %199 to float, !dbg !36
  %318 = fsub float %316, %317, !dbg !46
  %319 = extractelement <1 x float> %146, i64 0, !dbg !30
  %320 = bitcast i32 %198 to float, !dbg !36
  %321 = fsub float %319, %320, !dbg !46
  %322 = extractelement <1 x float> %141, i64 0, !dbg !30
  %323 = bitcast i32 %197 to float, !dbg !36
  %324 = fsub float %322, %323, !dbg !46
  %325 = extractelement <1 x float> %137, i64 0, !dbg !30
  %326 = bitcast i32 %196 to float, !dbg !36
  %327 = fsub float %325, %326, !dbg !46
  %328 = extractelement <1 x float> %132, i64 0, !dbg !30
  %329 = bitcast i32 %195 to float, !dbg !36
  %330 = fsub float %328, %329, !dbg !46
  %331 = extractelement <1 x float> %128, i64 0, !dbg !30
  %332 = bitcast i32 %194 to float, !dbg !36
  %333 = fsub float %331, %332, !dbg !46
  %334 = bitcast i32 %252 to float, !dbg !42
  %335 = bitcast i32 %250 to float, !dbg !42
  %336 = bitcast i32 %248 to float, !dbg !42
  %337 = bitcast i32 %246 to float, !dbg !42
  %338 = bitcast i32 %240 to float, !dbg !40
  %339 = bitcast i32 %238 to float, !dbg !40
  %340 = bitcast i32 %236 to float, !dbg !40
  %341 = bitcast i32 %234 to float, !dbg !40
  %342 = fmul float %333, %.0.i, !dbg !47
  %343 = fmul float %330, %.0.i2, !dbg !47
  %344 = fmul float %327, %.0.i5, !dbg !47
  %345 = fmul float %324, %.0.i8, !dbg !47
  %346 = fmul float %321, %.0.i11, !dbg !47
  %347 = fmul float %318, %.0.i14, !dbg !47
  %348 = fmul float %315, %.0.i17, !dbg !47
  %349 = fmul float %312, %.0.i20, !dbg !47
  %350 = fmul float %342, %341, !dbg !48
  %351 = fmul float %343, %341, !dbg !48
  %352 = fmul float %344, %340, !dbg !48
  %353 = fmul float %345, %340, !dbg !48
  %354 = fmul float %346, %339, !dbg !48
  %355 = fmul float %347, %339, !dbg !48
  %356 = fmul float %348, %338, !dbg !48
  %357 = fmul float %349, %338, !dbg !48
  %358 = fadd float %350, %337, !dbg !49
  %359 = fadd float %351, %337, !dbg !49
  %360 = fadd float %352, %336, !dbg !49
  %361 = fadd float %353, %336, !dbg !49
  %362 = fadd float %354, %335, !dbg !49
  %363 = fadd float %355, %335, !dbg !49
  %364 = fadd float %356, %334, !dbg !49
  %365 = fadd float %357, %334, !dbg !49
  %366 = mul i32 %34, 50, !dbg !50
  %367 = mul i32 %35, 50, !dbg !50
  %368 = mul i32 %36, 50, !dbg !50
  %369 = mul i32 %37, 50, !dbg !50
  %370 = add i32 %366, %47, !dbg !51
  %371 = add i32 %367, %47, !dbg !51
  %372 = add i32 %368, %47, !dbg !51
  %373 = add i32 %369, %47, !dbg !51
  %374 = sext i32 %370 to i64, !dbg !52
  %375 = getelementptr float, ptr addrspace(1) %5, i64 %374, !dbg !52
  %376 = sext i32 %371 to i64, !dbg !52
  %377 = getelementptr float, ptr addrspace(1) %5, i64 %376, !dbg !52
  %378 = sext i32 %372 to i64, !dbg !52
  %379 = getelementptr float, ptr addrspace(1) %5, i64 %378, !dbg !52
  %380 = sext i32 %373 to i64, !dbg !52
  %381 = getelementptr float, ptr addrspace(1) %5, i64 %380, !dbg !52
  %382 = bitcast float %358 to i32, !dbg !53
  %383 = bitcast float %359 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %382, i32 %383, ptr addrspace(1) %375, i1 %82) #5, !dbg !53
  %384 = bitcast float %360 to i32, !dbg !53
  %385 = bitcast float %361 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %384, i32 %385, ptr addrspace(1) %377, i1 %83) #5, !dbg !53
  %386 = bitcast float %362 to i32, !dbg !53
  %387 = bitcast float %363 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %386, i32 %387, ptr addrspace(1) %379, i1 %84) #5, !dbg !53
  %388 = bitcast float %364 to i32, !dbg !53
  %389 = bitcast float %365 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %388, i32 %389, ptr addrspace(1) %381, i1 %85) #5, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #2 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cixdsy45epigtua7hnnb2trqacs6zuo7dswwuahb3l5xhtzttbsb.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu/ix")
!4 = !{ptr @triton__0d1d2d3d4d5d6de7, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6de7, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6de7", linkageName: "triton__0d1d2d3d4d5d6de7", scope: !3, file: !3, line: 20, type: !8, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 23, scope: !7)
!11 = !DILocation(line: 26, column: 23, scope: !7)
!12 = !DILocation(line: 22, column: 28, scope: !7)
!13 = !DILocation(line: 22, column: 48, scope: !7)
!14 = !DILocation(line: 22, column: 53, scope: !7)
!15 = !DILocation(line: 22, column: 34, scope: !7)
!16 = !DILocation(line: 22, column: 58, scope: !7)
!17 = !DILocation(line: 24, column: 21, scope: !7)
!18 = !DILocation(line: 25, column: 28, scope: !7)
!19 = !DILocation(line: 25, column: 33, scope: !7)
!20 = !DILocation(line: 27, column: 21, scope: !7)
!21 = !DILocation(line: 29, column: 20, scope: !7)
!22 = !DILocation(line: 31, column: 20, scope: !7)
!23 = !DILocation(line: 31, column: 26, scope: !7)
!24 = !DILocation(line: 34, column: 40, scope: !7)
!25 = !DILocation(line: 34, column: 52, scope: !7)
!26 = !DILocation(line: 34, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 47, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 66, scope: !7)
!30 = !DILocation(line: 34, column: 58, scope: !7)
!31 = !DILocation(line: 35, column: 38, scope: !7)
!32 = !DILocation(line: 35, column: 49, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 45, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 55, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 55, scope: !7)
!39 = !DILocation(line: 37, column: 31, scope: !7)
!40 = !DILocation(line: 37, column: 36, scope: !7)
!41 = !DILocation(line: 38, column: 31, scope: !7)
!42 = !DILocation(line: 38, column: 36, scope: !7)
!43 = !DILocation(line: 41, column: 18, scope: !7)
!44 = !DILocation(line: 43, column: 18, scope: !7)
!45 = !DILocation(line: 44, column: 27, scope: !7)
!46 = !DILocation(line: 39, column: 18, scope: !7)
!47 = !DILocation(line: 45, column: 18, scope: !7)
!48 = !DILocation(line: 46, column: 19, scope: !7)
!49 = !DILocation(line: 47, column: 20, scope: !7)
!50 = !DILocation(line: 48, column: 34, scope: !7)
!51 = !DILocation(line: 48, column: 31, scope: !7)
!52 = !DILocation(line: 48, column: 25, scope: !7)
!53 = !DILocation(line: 48, column: 47, scope: !7)
!54 = !DILocation(line: 48, column: 4, scope: !7)

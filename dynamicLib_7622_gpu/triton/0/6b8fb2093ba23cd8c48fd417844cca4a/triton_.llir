; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d12de(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !5 {
  %4 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %5 = and i32 %4, 127, !dbg !8
  %6 = shl nuw nsw i32 %5, 1, !dbg !8
  %7 = or i32 %5, 128, !dbg !8
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !9
  %9 = shl i32 %8, 8, !dbg !10
  %10 = or i32 %9, %6, !dbg !11
  %11 = or i32 %9, %5, !dbg !11
  %12 = or i32 %9, %7, !dbg !11
  %13 = icmp slt i32 %10, %2, !dbg !12
  %14 = icmp slt i32 %11, %2, !dbg !12
  %15 = icmp slt i32 %12, %2, !dbg !12
  %.frozen = freeze i32 %11
  %16 = sdiv i32 %.frozen, 128, !dbg !13
  %17 = mul i32 %16, 128
  %.decomposed = sub i32 %.frozen, %17
  %.frozen1 = freeze i32 %12
  %18 = sdiv i32 %.frozen1, 128, !dbg !13
  %19 = mul i32 %18, 128
  %.decomposed2 = sub i32 %.frozen1, %19
  %20 = sext i32 %10 to i64, !dbg !14
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !14
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %21, i1 %13) #2, !dbg !15
  %23 = extractvalue { i32, i32 } %22, 0, !dbg !15
  %24 = extractvalue { i32, i32 } %22, 1, !dbg !15
  %25 = mul i32 %16, 1872, !dbg !16
  %26 = mul i32 %18, 1872, !dbg !16
  %27 = add i32 %25, %.decomposed, !dbg !17
  %28 = add i32 %26, %.decomposed2, !dbg !17
  %29 = sext i32 %27 to i64, !dbg !18
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !18
  %31 = sext i32 %28 to i64, !dbg !18
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !18
  %33 = zext nneg i32 %6 to i64, !dbg !19
  %34 = getelementptr float, ptr addrspace(3) @global_smem, i64 %33, !dbg !19
  store i32 %23, ptr addrspace(3) %34, align 4, !dbg !19
  %35 = or i32 %6, 1, !dbg !19
  %36 = zext nneg i32 %35 to i64, !dbg !19
  %37 = getelementptr float, ptr addrspace(3) @global_smem, i64 %36, !dbg !19
  store i32 %24, ptr addrspace(3) %37, align 4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %38 = zext nneg i32 %5 to i64, !dbg !19
  %39 = getelementptr float, ptr addrspace(3) @global_smem, i64 %38, !dbg !19
  %40 = load i32, ptr addrspace(3) %39, align 4, !dbg !19
  %41 = zext nneg i32 %7 to i64, !dbg !19
  %42 = getelementptr float, ptr addrspace(3) @global_smem, i64 %41, !dbg !19
  %43 = load i32, ptr addrspace(3) %42, align 4, !dbg !19
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %40, ptr addrspace(1) %30, i1 %14) #2, !dbg !19
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %43, ptr addrspace(1) %32, i1 %15) #2, !dbg !19
  ret void, !dbg !20
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "crli2g66nylbgqwqnwls5js4wo76vfpiofboqfonjwldqzljnlq3.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu/rl")
!3 = !{ptr @triton__0d12de, !"kernel", i32 1}
!4 = !{ptr @triton__0d12de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d12de", linkageName: "triton__0d12de", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 22, column: 36, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 21, column: 33, scope: !5)
!11 = !DILocation(line: 22, column: 23, scope: !5)
!12 = !DILocation(line: 23, column: 21, scope: !5)
!13 = !DILocation(line: 26, column: 20, scope: !5)
!14 = !DILocation(line: 27, column: 30, scope: !5)
!15 = !DILocation(line: 27, column: 35, scope: !5)
!16 = !DILocation(line: 28, column: 36, scope: !5)
!17 = !DILocation(line: 28, column: 31, scope: !5)
!18 = !DILocation(line: 28, column: 25, scope: !5)
!19 = !DILocation(line: 28, column: 48, scope: !5)
!20 = !DILocation(line: 28, column: 4, scope: !5)

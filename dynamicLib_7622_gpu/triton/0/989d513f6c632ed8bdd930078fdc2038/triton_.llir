; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d67de8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !5 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %11 = and i32 %10, 31, !dbg !8
  %12 = lshr i32 %10, 5, !dbg !8
  %13 = shl i32 %10, 2, !dbg !8
  %14 = and i32 %13, 4, !dbg !8
  %15 = and i32 %10, 7, !dbg !8
  %16 = and i32 %12, 3, !dbg !9
  %17 = lshr i32 %11, 1, !dbg !9
  %18 = shl nuw nsw i32 %16, 4, !dbg !9
  %19 = or i32 %18, %17, !dbg !9
  %20 = or i32 %14, 1, !dbg !10
  %21 = or i32 %14, 2, !dbg !10
  %22 = or i32 %14, 3, !dbg !10
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !14
  %24 = shl i32 %23, 3, !dbg !15
  %25 = or i32 %24, %14, !dbg !8
  %26 = or i32 %24, %15, !dbg !8
  %27 = icmp slt i32 %25, %7, !dbg !16
  %28 = icmp slt i32 %26, %7, !dbg !16
  %29 = icmp ult i32 %19, 50, !dbg !17
  %.frozen = freeze i32 %25
  %30 = sdiv i32 %.frozen, 176, !dbg !18
  %.frozen3 = freeze i32 %26
  %31 = sdiv i32 %.frozen3, 176, !dbg !18
  %32 = mul i32 %30, 176
  %.decomposed = sub i32 %.frozen, %32
  %33 = mul i32 %31, 176
  %.decomposed4 = sub i32 %.frozen3, %33
  %34 = sext i32 %30 to i64, !dbg !19
  %35 = getelementptr double, ptr addrspace(1) %0, i64 %34, !dbg !19
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 %27) #3, !dbg !20
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 %27) #3, !dbg !20
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 %27) #3, !dbg !20
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 %27) #3, !dbg !20
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !21
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %27) #3, !dbg !22
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %27) #3, !dbg !22
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %27) #3, !dbg !22
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %27) #3, !dbg !22
  %45 = mul nuw nsw i32 %19, 176, !dbg !23
  %46 = add nsw i32 %.decomposed, %45, !dbg !24
  %47 = mul i32 %30, 8800, !dbg !25
  %48 = add i32 %46, %47, !dbg !26
  %49 = sext i32 %48 to i64, !dbg !27
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !27
  %51 = and i1 %29, %27, !dbg !28
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %50, i1 %51, i32 0, i1 %51, i32 0, i1 %51, i32 0, i1 %51, i32 0, i1 %51) #3, !dbg !29
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !29
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !29
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !29
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !29
  %57 = bitcast i32 %53 to float, !dbg !29
  %58 = bitcast i32 %54 to float, !dbg !29
  %59 = bitcast i32 %55 to float, !dbg !29
  %60 = bitcast i32 %56 to float, !dbg !29
  %61 = sext i32 %.decomposed to i64, !dbg !30
  %62 = getelementptr float, ptr addrspace(1) %3, i64 %61, !dbg !30
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %27) #3, !dbg !31
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !31
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !31
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !31
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !31
  %68 = bitcast i32 %64 to float, !dbg !31
  %69 = bitcast i32 %65 to float, !dbg !31
  %70 = bitcast i32 %66 to float, !dbg !31
  %71 = bitcast i32 %67 to float, !dbg !31
  %72 = getelementptr float, ptr addrspace(1) %4, i64 %49, !dbg !32
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %72, i1 %51, i32 0, i1 %51, i32 0, i1 %51, i32 0, i1 %51, i32 0, i1 %51) #3, !dbg !33
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !33
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !33
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !33
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !33
  %78 = bitcast i32 %74 to float, !dbg !33
  %79 = bitcast i32 %75 to float, !dbg !33
  %80 = bitcast i32 %76 to float, !dbg !33
  %81 = bitcast i32 %77 to float, !dbg !33
  %82 = sext i32 %31 to i64, !dbg !34
  %83 = getelementptr float, ptr addrspace(1) %5, i64 %82, !dbg !34
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %28) #3, !dbg !35
  %85 = bitcast i32 %84 to float, !dbg !35
  %86 = sitofp i32 %19 to double, !dbg !36
  %87 = insertelement <4 x i64> poison, i64 %39, i64 0, !dbg !20
  %88 = insertelement <4 x i64> %87, i64 %38, i64 1, !dbg !20
  %89 = insertelement <4 x i64> %88, i64 %37, i64 2, !dbg !20
  %90 = insertelement <4 x i64> %89, i64 %36, i64 3, !dbg !20
  %91 = bitcast <4 x i64> %90 to <4 x double>, !dbg !20
  %92 = fcmp olt <4 x double> %91, <double 5.000000e+01, double 5.000000e+01, double 5.000000e+01, double 5.000000e+01>, !dbg !37
  %93 = fcmp uno <4 x double> %91, zeroinitializer, !dbg !41
  %94 = or <4 x i1> %92, %93, !dbg !42
  %95 = select <4 x i1> %94, <4 x double> %91, <4 x double> <double 5.000000e+01, double 5.000000e+01, double 5.000000e+01, double 5.000000e+01>, !dbg !43
  %96 = insertelement <4 x double> poison, double %86, i64 0, !dbg !44
  %97 = shufflevector <4 x double> %96, <4 x double> poison, <4 x i32> zeroinitializer, !dbg !44
  %98 = fcmp ogt <4 x double> %95, %97, !dbg !44
  %99 = and i32 %41, 2147483647, !dbg !45
  %100 = icmp eq i32 %99, 0, !dbg !45
  %101 = extractelement <4 x i1> %98, i64 3, !dbg !46
  %102 = or i1 %101, %100, !dbg !46
  %103 = fadd float %57, %68, !dbg !47
  %104 = fadd float %58, %69, !dbg !47
  %105 = fadd float %59, %70, !dbg !47
  %106 = fadd float %60, %71, !dbg !47
  %107 = fadd float %103, %78, !dbg !48
  %108 = fadd float %104, %79, !dbg !48
  %109 = fadd float %105, %80, !dbg !48
  %110 = fadd float %106, %81, !dbg !48
  %111 = and i1 %51, %102, !dbg !49
  %112 = select i1 %111, float %107, float 0.000000e+00, !dbg !49
  %113 = bitcast float %112 to i32, !dbg !10
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 16, i32 31), !dbg !10
  %115 = bitcast i32 %114 to float, !dbg !10
  %116 = fadd float %112, %115, !dbg !50
  %117 = bitcast float %116 to i32, !dbg !10
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 8, i32 31), !dbg !10
  %119 = bitcast i32 %118 to float, !dbg !10
  %120 = fadd float %116, %119, !dbg !50
  %121 = bitcast float %120 to i32, !dbg !10
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 4, i32 31), !dbg !10
  %123 = bitcast i32 %122 to float, !dbg !10
  %124 = fadd float %120, %123, !dbg !50
  %125 = bitcast float %124 to i32, !dbg !10
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 2, i32 31), !dbg !10
  %127 = bitcast i32 %126 to float, !dbg !10
  %128 = fadd float %124, %127, !dbg !50
  %129 = icmp ult i32 %11, 2, !dbg !10
  %130 = shl nuw nsw i32 %14, 2, !dbg !10
  %131 = or i32 %130, %16, !dbg !10
  %132 = zext nneg i32 %131 to i64, !dbg !10
  %133 = getelementptr float, ptr addrspace(3) @global_smem, i64 %132, !dbg !10
  %134 = shl nuw nsw i32 %20, 2, !dbg !10
  %135 = or i32 %134, %16, !dbg !10
  %136 = zext nneg i32 %135 to i64, !dbg !10
  %137 = getelementptr float, ptr addrspace(3) @global_smem, i64 %136, !dbg !10
  %138 = shl nuw nsw i32 %21, 2, !dbg !10
  %139 = or i32 %138, %16, !dbg !10
  %140 = zext nneg i32 %139 to i64, !dbg !10
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i64 %140, !dbg !10
  %142 = shl nuw nsw i32 %22, 2, !dbg !10
  %143 = or i32 %142, %16, !dbg !10
  %144 = zext nneg i32 %143 to i64, !dbg !10
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i64 %144, !dbg !10
  %146 = icmp slt i32 %10, 32, !dbg !10
  %147 = sext i32 %10 to i64, !dbg !10
  %148 = getelementptr float, ptr addrspace(3) @global_smem, i64 %147, !dbg !10
  %149 = insertelement <4 x i32> poison, i32 %10, i64 0, !dbg !10
  %150 = insertelement <4 x i32> %149, i32 %44, i64 1, !dbg !10
  %151 = insertelement <4 x i32> %150, i32 %43, i64 2, !dbg !10
  %152 = insertelement <4 x i32> %151, i32 %42, i64 3, !dbg !10
  %153 = and <4 x i32> %152, <i32 3, i32 2147483647, i32 2147483647, i32 2147483647>, !dbg !10
  %154 = icmp eq <4 x i32> %153, zeroinitializer, !dbg !10
  %shift = shufflevector <4 x i1> %154, <4 x i1> poison, <4 x i32> <i32 poison, i32 poison, i32 3, i32 poison>, !dbg !46
  %155 = or <4 x i1> %98, %shift, !dbg !46
  %156 = extractelement <4 x i1> %155, i64 2, !dbg !46
  %shift1 = shufflevector <4 x i1> %154, <4 x i1> poison, <4 x i32> <i32 poison, i32 2, i32 poison, i32 poison>, !dbg !46
  %157 = or <4 x i1> %98, %shift1, !dbg !46
  %158 = extractelement <4 x i1> %157, i64 1, !dbg !46
  %shift2 = shufflevector <4 x i1> %154, <4 x i1> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !46
  %159 = or <4 x i1> %98, %shift2, !dbg !46
  %160 = extractelement <4 x i1> %159, i64 0, !dbg !46
  %161 = and i1 %51, %156, !dbg !49
  %162 = and i1 %51, %158, !dbg !49
  %163 = and i1 %51, %160, !dbg !49
  %164 = select i1 %161, float %108, float 0.000000e+00, !dbg !49
  %165 = select i1 %162, float %109, float 0.000000e+00, !dbg !49
  %166 = select i1 %163, float %110, float 0.000000e+00, !dbg !49
  %167 = bitcast float %164 to i32, !dbg !10
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 16, i32 31), !dbg !10
  %169 = bitcast i32 %168 to float, !dbg !10
  %170 = fadd float %164, %169, !dbg !50
  %171 = bitcast float %170 to i32, !dbg !10
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 8, i32 31), !dbg !10
  %173 = bitcast i32 %172 to float, !dbg !10
  %174 = fadd float %170, %173, !dbg !50
  %175 = bitcast float %174 to i32, !dbg !10
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 4, i32 31), !dbg !10
  %177 = bitcast i32 %176 to float, !dbg !10
  %178 = fadd float %174, %177, !dbg !50
  %179 = bitcast float %178 to i32, !dbg !10
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 2, i32 31), !dbg !10
  %181 = bitcast i32 %180 to float, !dbg !10
  %182 = fadd float %178, %181, !dbg !50
  %183 = bitcast float %165 to i32, !dbg !10
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 16, i32 31), !dbg !10
  %185 = bitcast i32 %184 to float, !dbg !10
  %186 = fadd float %165, %185, !dbg !50
  %187 = bitcast float %186 to i32, !dbg !10
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 8, i32 31), !dbg !10
  %189 = bitcast i32 %188 to float, !dbg !10
  %190 = fadd float %186, %189, !dbg !50
  %191 = bitcast float %190 to i32, !dbg !10
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 4, i32 31), !dbg !10
  %193 = bitcast i32 %192 to float, !dbg !10
  %194 = fadd float %190, %193, !dbg !50
  %195 = bitcast float %194 to i32, !dbg !10
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 2, i32 31), !dbg !10
  %197 = bitcast i32 %196 to float, !dbg !10
  %198 = fadd float %194, %197, !dbg !50
  %199 = bitcast float %166 to i32, !dbg !10
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 16, i32 31), !dbg !10
  %201 = bitcast i32 %200 to float, !dbg !10
  %202 = fadd float %166, %201, !dbg !50
  %203 = bitcast float %202 to i32, !dbg !10
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 8, i32 31), !dbg !10
  %205 = bitcast i32 %204 to float, !dbg !10
  %206 = fadd float %202, %205, !dbg !50
  %207 = bitcast float %206 to i32, !dbg !10
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 4, i32 31), !dbg !10
  %209 = bitcast i32 %208 to float, !dbg !10
  %210 = fadd float %206, %209, !dbg !50
  %211 = bitcast float %210 to i32, !dbg !10
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 2, i32 31), !dbg !10
  %213 = bitcast i32 %212 to float, !dbg !10
  %214 = fadd float %210, %213, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, float %128, i1 %129) #3, !dbg !10
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, float %182, i1 %129) #3, !dbg !10
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, float %198, i1 %129) #3, !dbg !10
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, float %214, i1 %129) #3, !dbg !10
  tail call void @llvm.nvvm.barrier0(), !dbg !10
  %215 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %148, i1 %146) #3, !dbg !10
  %216 = bitcast float %215 to i32, !dbg !10
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 2, i32 31), !dbg !10
  %218 = bitcast i32 %217 to float, !dbg !10
  %219 = fadd float %215, %218, !dbg !50
  %220 = bitcast float %219 to i32, !dbg !10
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 1, i32 31), !dbg !10
  %222 = bitcast i32 %221 to float, !dbg !10
  %223 = fadd float %219, %222, !dbg !50
  %224 = extractelement <4 x i1> %154, i64 0, !dbg !10
  %225 = and i1 %146, %224, !dbg !10
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, float %223, i1 %225) #3, !dbg !10
  tail call void @llvm.nvvm.barrier0(), !dbg !10
  %226 = zext nneg i32 %130 to i64, !dbg !10
  %227 = getelementptr float, ptr addrspace(3) @global_smem, i64 %226, !dbg !10
  %228 = load float, ptr addrspace(3) %227, align 4, !dbg !10
  %229 = zext nneg i32 %134 to i64, !dbg !10
  %230 = getelementptr float, ptr addrspace(3) @global_smem, i64 %229, !dbg !10
  %231 = load float, ptr addrspace(3) %230, align 4, !dbg !10
  %232 = zext nneg i32 %138 to i64, !dbg !10
  %233 = getelementptr float, ptr addrspace(3) @global_smem, i64 %232, !dbg !10
  %234 = load float, ptr addrspace(3) %233, align 4, !dbg !10
  %235 = zext nneg i32 %142 to i64, !dbg !10
  %236 = getelementptr float, ptr addrspace(3) @global_smem, i64 %235, !dbg !10
  %237 = load float, ptr addrspace(3) %236, align 4, !dbg !10
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %238 = zext nneg i32 %14 to i64, !dbg !54
  %239 = getelementptr float, ptr addrspace(3) @global_smem, i64 %238, !dbg !54
  %240 = insertelement <1 x float> undef, float %228, i64 0, !dbg !54
  store <1 x float> %240, ptr addrspace(3) %239, align 4, !dbg !54
  %241 = zext nneg i32 %20 to i64, !dbg !54
  %242 = getelementptr float, ptr addrspace(3) @global_smem, i64 %241, !dbg !54
  %243 = insertelement <1 x float> undef, float %231, i64 0, !dbg !54
  store <1 x float> %243, ptr addrspace(3) %242, align 4, !dbg !54
  %244 = zext nneg i32 %21 to i64, !dbg !54
  %245 = getelementptr float, ptr addrspace(3) @global_smem, i64 %244, !dbg !54
  %246 = insertelement <1 x float> undef, float %234, i64 0, !dbg !54
  store <1 x float> %246, ptr addrspace(3) %245, align 4, !dbg !54
  %247 = zext nneg i32 %22 to i64, !dbg !54
  %248 = getelementptr float, ptr addrspace(3) @global_smem, i64 %247, !dbg !54
  %249 = insertelement <1 x float> undef, float %237, i64 0, !dbg !54
  store <1 x float> %249, ptr addrspace(3) %248, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %250 = zext nneg i32 %15 to i64, !dbg !54
  %251 = getelementptr float, ptr addrspace(3) @global_smem, i64 %250, !dbg !54
  %252 = load float, ptr addrspace(3) %251, align 4, !dbg !54
  %253 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %85) #3, !dbg !55
  %254 = fmul float %252, %253, !dbg !54
  %255 = mul i32 %31, 1872, !dbg !56
  %256 = add i32 %255, %.decomposed4, !dbg !57
  %257 = sext i32 %256 to i64, !dbg !58
  %258 = getelementptr float, ptr addrspace(1) %6, i64 %257, !dbg !58
  %259 = lshr i32 %11, 3, !dbg !59
  %260 = shl nuw nsw i32 %16, 2, !dbg !59
  %261 = or i32 %260, %259, !dbg !59
  %262 = icmp eq i32 %261, 0, !dbg !59
  %263 = bitcast float %254 to i32, !dbg !59
  %264 = and i1 %262, %28, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %263, ptr addrspace(1) %258, i1 %264) #3, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cnmen3auol7xyadxsofsuqgkixttzyezhiypyfuf24a5ntennm3w.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu/nm")
!3 = !{ptr @triton__0d1d2d3d4d5d67de8, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d67de8, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d67de8", linkageName: "triton__0d1d2d3d4d5d67de8", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 23, scope: !5)
!9 = !DILocation(line: 26, column: 13, scope: !5)
!10 = !DILocation(line: 243, column: 36, scope: !11, inlinedAt: !13)
!11 = distinct !DILexicalBlockFile(scope: !5, file: !12, discriminator: 0)
!12 = !DIFile(filename: "standard.py", directory: "/home/admin/zy429782/miniforge3/envs/compiled_torch/lib/python3.8/site-packages/triton/language")
!13 = !DILocation(line: 52, column: 26, scope: !11)
!14 = !DILocation(line: 23, column: 28, scope: !5)
!15 = !DILocation(line: 23, column: 33, scope: !5)
!16 = !DILocation(line: 25, column: 21, scope: !5)
!17 = !DILocation(line: 28, column: 21, scope: !5)
!18 = !DILocation(line: 30, column: 20, scope: !5)
!19 = !DILocation(line: 33, column: 30, scope: !5)
!20 = !DILocation(line: 33, column: 35, scope: !5)
!21 = !DILocation(line: 34, column: 30, scope: !5)
!22 = !DILocation(line: 34, column: 35, scope: !5)
!23 = !DILocation(line: 35, column: 41, scope: !5)
!24 = !DILocation(line: 35, column: 37, scope: !5)
!25 = !DILocation(line: 35, column: 53, scope: !5)
!26 = !DILocation(line: 35, column: 48, scope: !5)
!27 = !DILocation(line: 35, column: 31, scope: !5)
!28 = !DILocation(line: 35, column: 67, scope: !5)
!29 = !DILocation(line: 35, column: 59, scope: !5)
!30 = !DILocation(line: 36, column: 31, scope: !5)
!31 = !DILocation(line: 36, column: 36, scope: !5)
!32 = !DILocation(line: 37, column: 31, scope: !5)
!33 = !DILocation(line: 37, column: 59, scope: !5)
!34 = !DILocation(line: 38, column: 31, scope: !5)
!35 = !DILocation(line: 38, column: 36, scope: !5)
!36 = !DILocation(line: 40, column: 19, scope: !5)
!37 = !DILocation(line: 37, column: 15, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !5, file: !39, discriminator: 0)
!39 = !DIFile(filename: "triton_helpers.py", directory: "/home/admin/zy429782/torch_folder/pytorch-2.3.1/torch/_inductor")
!40 = !DILocation(line: 42, column: 40, scope: !38)
!41 = !DILocation(line: 39, column: 21, scope: !38, inlinedAt: !40)
!42 = !DILocation(line: 39, column: 16, scope: !38, inlinedAt: !40)
!43 = !DILocation(line: 40, column: 29, scope: !38, inlinedAt: !40)
!44 = !DILocation(line: 43, column: 18, scope: !5)
!45 = !DILocation(line: 45, column: 19, scope: !5)
!46 = !DILocation(line: 46, column: 18, scope: !5)
!47 = !DILocation(line: 47, column: 20, scope: !5)
!48 = !DILocation(line: 48, column: 20, scope: !5)
!49 = !DILocation(line: 0, scope: !5)
!50 = !DILocation(line: 233, column: 15, scope: !51, inlinedAt: !52)
!51 = distinct !DILexicalBlockFile(scope: !11, file: !12, discriminator: 0)
!52 = !DILocation(line: 243, column: 36, scope: !51, inlinedAt: !53)
!53 = !DILocation(line: 52, column: 26, scope: !51)
!54 = !DILocation(line: 54, column: 20, scope: !5)
!55 = !DILocation(line: 53, column: 16, scope: !5)
!56 = !DILocation(line: 55, column: 36, scope: !5)
!57 = !DILocation(line: 55, column: 31, scope: !5)
!58 = !DILocation(line: 55, column: 25, scope: !5)
!59 = !DILocation(line: 55, column: 49, scope: !5)
!60 = !DILocation(line: 55, column: 4, scope: !5)

; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton__0d1d2e3(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !5 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %6 = lshr i32 %5, 5, !dbg !8
  %7 = and i32 %6, 7, !dbg !8
  %8 = shl i32 %5, 1, !dbg !9
  %9 = and i32 %8, 62, !dbg !9
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %11 = shl i32 %10, 5, !dbg !11
  %12 = or i32 %11, %7, !dbg !8
  %13 = or i32 %12, 8, !dbg !8
  %14 = or i32 %12, 16, !dbg !8
  %15 = or i32 %12, 24, !dbg !8
  %16 = icmp slt i32 %12, %2, !dbg !12
  %17 = icmp slt i32 %13, %2, !dbg !12
  %18 = icmp slt i32 %14, %2, !dbg !12
  %19 = icmp slt i32 %15, %2, !dbg !12
  %20 = icmp ult i32 %9, 50, !dbg !13
  %21 = mul i32 %12, 50, !dbg !14
  %22 = mul i32 %13, 50, !dbg !14
  %23 = mul i32 %14, 50, !dbg !14
  %24 = mul i32 %15, 50, !dbg !14
  %25 = add i32 %21, %9, !dbg !15
  %26 = add i32 %22, %9, !dbg !15
  %27 = add i32 %23, %9, !dbg !15
  %28 = add i32 %24, %9, !dbg !15
  %29 = sext i32 %25 to i64, !dbg !16
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !16
  %31 = sext i32 %26 to i64, !dbg !16
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !16
  %33 = sext i32 %27 to i64, !dbg !16
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !16
  %35 = sext i32 %28 to i64, !dbg !16
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !16
  %37 = and i1 %20, %16, !dbg !17
  %38 = and i1 %20, %17, !dbg !17
  %39 = and i1 %20, %18, !dbg !17
  %40 = and i1 %20, %19, !dbg !17
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %30, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #2, !dbg !18
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !18
  %43 = extractvalue { i32, i32 } %41, 1, !dbg !18
  %44 = bitcast i32 %42 to float, !dbg !18
  %45 = bitcast i32 %43 to float, !dbg !18
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %32, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #2, !dbg !18
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !18
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !18
  %49 = bitcast i32 %47 to float, !dbg !18
  %50 = bitcast i32 %48 to float, !dbg !18
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %34, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #2, !dbg !18
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !18
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !18
  %54 = bitcast i32 %52 to float, !dbg !18
  %55 = bitcast i32 %53 to float, !dbg !18
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %36, i1 %40, i32 0, i1 %40, i32 0, i1 %40) #2, !dbg !18
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !18
  %58 = extractvalue { i32, i32 } %56, 1, !dbg !18
  %59 = bitcast i32 %57 to float, !dbg !18
  %60 = bitcast i32 %58 to float, !dbg !18
  %61 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %44, float 4.000000e+00) #2, !dbg !19
  %62 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %45, float 4.000000e+00) #2, !dbg !19
  %63 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %49, float 4.000000e+00) #2, !dbg !19
  %64 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %50, float 4.000000e+00) #2, !dbg !19
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %54, float 4.000000e+00) #2, !dbg !19
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float 4.000000e+00) #2, !dbg !19
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %59, float 4.000000e+00) #2, !dbg !19
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %60, float 4.000000e+00) #2, !dbg !19
  %69 = select i1 %37, float %61, float 0xFFF0000000000000, !dbg !20
  %70 = select i1 %37, float %62, float 0xFFF0000000000000, !dbg !20
  %71 = select i1 %38, float %63, float 0xFFF0000000000000, !dbg !20
  %72 = select i1 %38, float %64, float 0xFFF0000000000000, !dbg !20
  %73 = select i1 %39, float %65, float 0xFFF0000000000000, !dbg !20
  %74 = select i1 %39, float %66, float 0xFFF0000000000000, !dbg !20
  %75 = select i1 %40, float %67, float 0xFFF0000000000000, !dbg !20
  %76 = select i1 %40, float %68, float 0xFFF0000000000000, !dbg !20
  %77 = fcmp ogt float %69, %70, !dbg !21
  %78 = fcmp uno float %69, 0.000000e+00, !dbg !27
  %79 = or i1 %78, %77, !dbg !28
  %80 = select i1 %79, float %69, float %70, !dbg !29
  %81 = fcmp ogt float %71, %72, !dbg !21
  %82 = fcmp uno float %71, 0.000000e+00, !dbg !27
  %83 = or i1 %82, %81, !dbg !28
  %84 = select i1 %83, float %71, float %72, !dbg !29
  %85 = fcmp ogt float %73, %74, !dbg !21
  %86 = fcmp uno float %73, 0.000000e+00, !dbg !27
  %87 = or i1 %86, %85, !dbg !28
  %88 = select i1 %87, float %73, float %74, !dbg !29
  %89 = fcmp ogt float %75, %76, !dbg !21
  %90 = fcmp uno float %75, 0.000000e+00, !dbg !27
  %91 = or i1 %90, %89, !dbg !28
  %92 = select i1 %91, float %75, float %76, !dbg !29
  %93 = bitcast float %80 to i32, !dbg !30
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 16, i32 31), !dbg !30
  %95 = bitcast i32 %94 to float, !dbg !30
  %96 = fcmp ogt float %80, %95, !dbg !21
  %97 = fcmp uno float %80, 0.000000e+00, !dbg !27
  %98 = or i1 %97, %96, !dbg !28
  %99 = select i1 %98, float %80, float %95, !dbg !29
  %100 = bitcast float %99 to i32, !dbg !30
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 8, i32 31), !dbg !30
  %102 = bitcast i32 %101 to float, !dbg !30
  %103 = fcmp ogt float %99, %102, !dbg !21
  %104 = fcmp uno float %99, 0.000000e+00, !dbg !27
  %105 = or i1 %103, %104, !dbg !28
  %106 = select i1 %105, float %99, float %102, !dbg !29
  %107 = bitcast float %106 to i32, !dbg !30
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 4, i32 31), !dbg !30
  %109 = bitcast i32 %108 to float, !dbg !30
  %110 = fcmp ogt float %106, %109, !dbg !21
  %111 = fcmp uno float %106, 0.000000e+00, !dbg !27
  %112 = or i1 %110, %111, !dbg !28
  %113 = select i1 %112, float %106, float %109, !dbg !29
  %114 = bitcast float %113 to i32, !dbg !30
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 2, i32 31), !dbg !30
  %116 = bitcast i32 %115 to float, !dbg !30
  %117 = fcmp ogt float %113, %116, !dbg !21
  %118 = fcmp uno float %113, 0.000000e+00, !dbg !27
  %119 = or i1 %117, %118, !dbg !28
  %120 = select i1 %119, float %113, float %116, !dbg !29
  %121 = bitcast float %120 to i32, !dbg !30
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 1, i32 31), !dbg !30
  %123 = bitcast i32 %122 to float, !dbg !30
  %124 = fcmp ogt float %120, %123, !dbg !21
  %125 = fcmp uno float %120, 0.000000e+00, !dbg !27
  %126 = or i1 %124, %125, !dbg !28
  %127 = select i1 %126, float %120, float %123, !dbg !29
  %128 = bitcast float %84 to i32, !dbg !30
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 16, i32 31), !dbg !30
  %130 = bitcast i32 %129 to float, !dbg !30
  %131 = fcmp ogt float %84, %130, !dbg !21
  %132 = fcmp uno float %84, 0.000000e+00, !dbg !27
  %133 = or i1 %132, %131, !dbg !28
  %134 = select i1 %133, float %84, float %130, !dbg !29
  %135 = bitcast float %134 to i32, !dbg !30
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 8, i32 31), !dbg !30
  %137 = bitcast i32 %136 to float, !dbg !30
  %138 = fcmp ogt float %134, %137, !dbg !21
  %139 = fcmp uno float %134, 0.000000e+00, !dbg !27
  %140 = or i1 %138, %139, !dbg !28
  %141 = select i1 %140, float %134, float %137, !dbg !29
  %142 = bitcast float %141 to i32, !dbg !30
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 4, i32 31), !dbg !30
  %144 = bitcast i32 %143 to float, !dbg !30
  %145 = fcmp ogt float %141, %144, !dbg !21
  %146 = fcmp uno float %141, 0.000000e+00, !dbg !27
  %147 = or i1 %145, %146, !dbg !28
  %148 = select i1 %147, float %141, float %144, !dbg !29
  %149 = bitcast float %148 to i32, !dbg !30
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 2, i32 31), !dbg !30
  %151 = bitcast i32 %150 to float, !dbg !30
  %152 = fcmp ogt float %148, %151, !dbg !21
  %153 = fcmp uno float %148, 0.000000e+00, !dbg !27
  %154 = or i1 %152, %153, !dbg !28
  %155 = select i1 %154, float %148, float %151, !dbg !29
  %156 = bitcast float %155 to i32, !dbg !30
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 1, i32 31), !dbg !30
  %158 = bitcast i32 %157 to float, !dbg !30
  %159 = fcmp ogt float %155, %158, !dbg !21
  %160 = fcmp uno float %155, 0.000000e+00, !dbg !27
  %161 = or i1 %159, %160, !dbg !28
  %162 = select i1 %161, float %155, float %158, !dbg !29
  %163 = bitcast float %88 to i32, !dbg !30
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 16, i32 31), !dbg !30
  %165 = bitcast i32 %164 to float, !dbg !30
  %166 = fcmp ogt float %88, %165, !dbg !21
  %167 = fcmp uno float %88, 0.000000e+00, !dbg !27
  %168 = or i1 %167, %166, !dbg !28
  %169 = select i1 %168, float %88, float %165, !dbg !29
  %170 = bitcast float %169 to i32, !dbg !30
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 8, i32 31), !dbg !30
  %172 = bitcast i32 %171 to float, !dbg !30
  %173 = fcmp ogt float %169, %172, !dbg !21
  %174 = fcmp uno float %169, 0.000000e+00, !dbg !27
  %175 = or i1 %173, %174, !dbg !28
  %176 = select i1 %175, float %169, float %172, !dbg !29
  %177 = bitcast float %176 to i32, !dbg !30
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 4, i32 31), !dbg !30
  %179 = bitcast i32 %178 to float, !dbg !30
  %180 = fcmp ogt float %176, %179, !dbg !21
  %181 = fcmp uno float %176, 0.000000e+00, !dbg !27
  %182 = or i1 %180, %181, !dbg !28
  %183 = select i1 %182, float %176, float %179, !dbg !29
  %184 = bitcast float %183 to i32, !dbg !30
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 2, i32 31), !dbg !30
  %186 = bitcast i32 %185 to float, !dbg !30
  %187 = fcmp ogt float %183, %186, !dbg !21
  %188 = fcmp uno float %183, 0.000000e+00, !dbg !27
  %189 = or i1 %187, %188, !dbg !28
  %190 = select i1 %189, float %183, float %186, !dbg !29
  %191 = bitcast float %190 to i32, !dbg !30
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 1, i32 31), !dbg !30
  %193 = bitcast i32 %192 to float, !dbg !30
  %194 = fcmp ogt float %190, %193, !dbg !21
  %195 = fcmp uno float %190, 0.000000e+00, !dbg !27
  %196 = or i1 %194, %195, !dbg !28
  %197 = select i1 %196, float %190, float %193, !dbg !29
  %198 = bitcast float %92 to i32, !dbg !30
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 16, i32 31), !dbg !30
  %200 = bitcast i32 %199 to float, !dbg !30
  %201 = fcmp ogt float %92, %200, !dbg !21
  %202 = fcmp uno float %92, 0.000000e+00, !dbg !27
  %203 = or i1 %202, %201, !dbg !28
  %204 = select i1 %203, float %92, float %200, !dbg !29
  %205 = bitcast float %204 to i32, !dbg !30
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 8, i32 31), !dbg !30
  %207 = bitcast i32 %206 to float, !dbg !30
  %208 = fcmp ogt float %204, %207, !dbg !21
  %209 = fcmp uno float %204, 0.000000e+00, !dbg !27
  %210 = or i1 %208, %209, !dbg !28
  %211 = select i1 %210, float %204, float %207, !dbg !29
  %212 = bitcast float %211 to i32, !dbg !30
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 4, i32 31), !dbg !30
  %214 = bitcast i32 %213 to float, !dbg !30
  %215 = fcmp ogt float %211, %214, !dbg !21
  %216 = fcmp uno float %211, 0.000000e+00, !dbg !27
  %217 = or i1 %215, %216, !dbg !28
  %218 = select i1 %217, float %211, float %214, !dbg !29
  %219 = bitcast float %218 to i32, !dbg !30
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 2, i32 31), !dbg !30
  %221 = bitcast i32 %220 to float, !dbg !30
  %222 = fcmp ogt float %218, %221, !dbg !21
  %223 = fcmp uno float %218, 0.000000e+00, !dbg !27
  %224 = or i1 %222, %223, !dbg !28
  %225 = select i1 %224, float %218, float %221, !dbg !29
  %226 = bitcast float %225 to i32, !dbg !30
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 1, i32 31), !dbg !30
  %228 = bitcast i32 %227 to float, !dbg !30
  %229 = fcmp ogt float %225, %228, !dbg !21
  %230 = fcmp uno float %225, 0.000000e+00, !dbg !27
  %231 = or i1 %229, %230, !dbg !28
  %232 = select i1 %231, float %225, float %228, !dbg !29
  %233 = fsub float %61, %127, !dbg !32
  %234 = fsub float %62, %127, !dbg !32
  %235 = fsub float %63, %162, !dbg !32
  %236 = fsub float %64, %162, !dbg !32
  %237 = fsub float %65, %197, !dbg !32
  %238 = fsub float %66, %197, !dbg !32
  %239 = fsub float %67, %232, !dbg !32
  %240 = fsub float %68, %232, !dbg !32
  %241 = fmul float %233, 0x3FF7154760000000, !dbg !33
  %242 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %241) #2, !dbg !33
  %243 = fmul float %234, 0x3FF7154760000000, !dbg !33
  %244 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %243) #2, !dbg !33
  %245 = fmul float %235, 0x3FF7154760000000, !dbg !33
  %246 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %245) #2, !dbg !33
  %247 = fmul float %236, 0x3FF7154760000000, !dbg !33
  %248 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %247) #2, !dbg !33
  %249 = fmul float %237, 0x3FF7154760000000, !dbg !33
  %250 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %249) #2, !dbg !33
  %251 = fmul float %238, 0x3FF7154760000000, !dbg !33
  %252 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %251) #2, !dbg !33
  %253 = fmul float %239, 0x3FF7154760000000, !dbg !33
  %254 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %253) #2, !dbg !33
  %255 = fmul float %240, 0x3FF7154760000000, !dbg !33
  %256 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %255) #2, !dbg !33
  %257 = fadd float %242, %244, !dbg !34
  %258 = select i1 %37, float %257, float 0.000000e+00, !dbg !34
  %259 = fadd float %246, %248, !dbg !34
  %260 = select i1 %38, float %259, float 0.000000e+00, !dbg !34
  %261 = fadd float %250, %252, !dbg !34
  %262 = select i1 %39, float %261, float 0.000000e+00, !dbg !34
  %263 = fadd float %254, %256, !dbg !34
  %264 = select i1 %40, float %263, float 0.000000e+00, !dbg !34
  %265 = bitcast float %258 to i32, !dbg !40
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 16, i32 31), !dbg !40
  %267 = bitcast i32 %266 to float, !dbg !40
  %268 = fadd float %258, %267, !dbg !34
  %269 = bitcast float %268 to i32, !dbg !40
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 8, i32 31), !dbg !40
  %271 = bitcast i32 %270 to float, !dbg !40
  %272 = fadd float %268, %271, !dbg !34
  %273 = bitcast float %272 to i32, !dbg !40
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 4, i32 31), !dbg !40
  %275 = bitcast i32 %274 to float, !dbg !40
  %276 = fadd float %272, %275, !dbg !34
  %277 = bitcast float %276 to i32, !dbg !40
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 2, i32 31), !dbg !40
  %279 = bitcast i32 %278 to float, !dbg !40
  %280 = fadd float %276, %279, !dbg !34
  %281 = bitcast float %280 to i32, !dbg !40
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 1, i32 31), !dbg !40
  %283 = bitcast i32 %282 to float, !dbg !40
  %284 = fadd float %280, %283, !dbg !34
  %285 = bitcast float %260 to i32, !dbg !40
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 16, i32 31), !dbg !40
  %287 = bitcast i32 %286 to float, !dbg !40
  %288 = fadd float %260, %287, !dbg !34
  %289 = bitcast float %288 to i32, !dbg !40
  %290 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %289, i32 8, i32 31), !dbg !40
  %291 = bitcast i32 %290 to float, !dbg !40
  %292 = fadd float %288, %291, !dbg !34
  %293 = bitcast float %292 to i32, !dbg !40
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 4, i32 31), !dbg !40
  %295 = bitcast i32 %294 to float, !dbg !40
  %296 = fadd float %292, %295, !dbg !34
  %297 = bitcast float %296 to i32, !dbg !40
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 2, i32 31), !dbg !40
  %299 = bitcast i32 %298 to float, !dbg !40
  %300 = fadd float %296, %299, !dbg !34
  %301 = bitcast float %300 to i32, !dbg !40
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 1, i32 31), !dbg !40
  %303 = bitcast i32 %302 to float, !dbg !40
  %304 = fadd float %300, %303, !dbg !34
  %305 = bitcast float %262 to i32, !dbg !40
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %305, i32 16, i32 31), !dbg !40
  %307 = bitcast i32 %306 to float, !dbg !40
  %308 = fadd float %262, %307, !dbg !34
  %309 = bitcast float %308 to i32, !dbg !40
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 8, i32 31), !dbg !40
  %311 = bitcast i32 %310 to float, !dbg !40
  %312 = fadd float %308, %311, !dbg !34
  %313 = bitcast float %312 to i32, !dbg !40
  %314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %313, i32 4, i32 31), !dbg !40
  %315 = bitcast i32 %314 to float, !dbg !40
  %316 = fadd float %312, %315, !dbg !34
  %317 = bitcast float %316 to i32, !dbg !40
  %318 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %317, i32 2, i32 31), !dbg !40
  %319 = bitcast i32 %318 to float, !dbg !40
  %320 = fadd float %316, %319, !dbg !34
  %321 = bitcast float %320 to i32, !dbg !40
  %322 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %321, i32 1, i32 31), !dbg !40
  %323 = bitcast i32 %322 to float, !dbg !40
  %324 = fadd float %320, %323, !dbg !34
  %325 = bitcast float %264 to i32, !dbg !40
  %326 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %325, i32 16, i32 31), !dbg !40
  %327 = bitcast i32 %326 to float, !dbg !40
  %328 = fadd float %264, %327, !dbg !34
  %329 = bitcast float %328 to i32, !dbg !40
  %330 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %329, i32 8, i32 31), !dbg !40
  %331 = bitcast i32 %330 to float, !dbg !40
  %332 = fadd float %328, %331, !dbg !34
  %333 = bitcast float %332 to i32, !dbg !40
  %334 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %333, i32 4, i32 31), !dbg !40
  %335 = bitcast i32 %334 to float, !dbg !40
  %336 = fadd float %332, %335, !dbg !34
  %337 = bitcast float %336 to i32, !dbg !40
  %338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %337, i32 2, i32 31), !dbg !40
  %339 = bitcast i32 %338 to float, !dbg !40
  %340 = fadd float %336, %339, !dbg !34
  %341 = bitcast float %340 to i32, !dbg !40
  %342 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %341, i32 1, i32 31), !dbg !40
  %343 = bitcast i32 %342 to float, !dbg !40
  %344 = fadd float %340, %343, !dbg !34
  %345 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %242, float %284) #2, !dbg !42
  %346 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %244, float %284) #2, !dbg !42
  %347 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %246, float %304) #2, !dbg !42
  %348 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %248, float %304) #2, !dbg !42
  %349 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %250, float %324) #2, !dbg !42
  %350 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %252, float %324) #2, !dbg !42
  %351 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %254, float %344) #2, !dbg !42
  %352 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %256, float %344) #2, !dbg !42
  %353 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !43
  %354 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !43
  %355 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !43
  %356 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !43
  %357 = bitcast float %345 to i32, !dbg !44
  %358 = bitcast float %346 to i32, !dbg !44
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %357, i32 %358, ptr addrspace(1) %353, i1 %37) #2, !dbg !44
  %359 = bitcast float %347 to i32, !dbg !44
  %360 = bitcast float %348 to i32, !dbg !44
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %359, i32 %360, ptr addrspace(1) %354, i1 %38) #2, !dbg !44
  %361 = bitcast float %349 to i32, !dbg !44
  %362 = bitcast float %350 to i32, !dbg !44
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %361, i32 %362, ptr addrspace(1) %355, i1 %39) #2, !dbg !44
  %363 = bitcast float %351 to i32, !dbg !44
  %364 = bitcast float %352 to i32, !dbg !44
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %363, i32 %364, ptr addrspace(1) %356, i1 %40) #2, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cc7luc6ehgsuslee67ue4mhxjmp54fqnhxn5pm7r3hw67qpcpita.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu/c7")
!3 = !{ptr @triton__0d1d2e3, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2e3, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2e3", linkageName: "triton__0d1d2e3", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 23, scope: !5)
!9 = !DILocation(line: 26, column: 13, scope: !5)
!10 = !DILocation(line: 23, column: 28, scope: !5)
!11 = !DILocation(line: 23, column: 33, scope: !5)
!12 = !DILocation(line: 25, column: 21, scope: !5)
!13 = !DILocation(line: 28, column: 21, scope: !5)
!14 = !DILocation(line: 31, column: 39, scope: !5)
!15 = !DILocation(line: 31, column: 36, scope: !5)
!16 = !DILocation(line: 31, column: 30, scope: !5)
!17 = !DILocation(line: 31, column: 53, scope: !5)
!18 = !DILocation(line: 31, column: 45, scope: !5)
!19 = !DILocation(line: 33, column: 18, scope: !5)
!20 = !DILocation(line: 35, column: 41, scope: !5)
!21 = !DILocation(line: 45, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/home/admin/zy429782/torch_folder/pytorch-2.3.1/torch/_inductor")
!24 = distinct !DILexicalBlockFile(scope: !5, file: !23, discriminator: 0)
!25 = !DILocation(line: 58, column: 29, scope: !22, inlinedAt: !26)
!26 = !DILocation(line: 36, column: 37, scope: !22)
!27 = !DILocation(line: 47, column: 21, scope: !22, inlinedAt: !25)
!28 = !DILocation(line: 47, column: 16, scope: !22, inlinedAt: !25)
!29 = !DILocation(line: 48, column: 29, scope: !22, inlinedAt: !25)
!30 = !DILocation(line: 58, column: 29, scope: !24, inlinedAt: !31)
!31 = !DILocation(line: 36, column: 37, scope: !24)
!32 = !DILocation(line: 37, column: 18, scope: !5)
!33 = !DILocation(line: 38, column: 23, scope: !5)
!34 = !DILocation(line: 233, column: 15, scope: !35, inlinedAt: !38)
!35 = distinct !DILexicalBlockFile(scope: !37, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/home/admin/zy429782/miniforge3/envs/compiled_torch/lib/python3.8/site-packages/triton/language")
!37 = distinct !DILexicalBlockFile(scope: !5, file: !36, discriminator: 0)
!38 = !DILocation(line: 243, column: 36, scope: !35, inlinedAt: !39)
!39 = !DILocation(line: 41, column: 26, scope: !35)
!40 = !DILocation(line: 243, column: 36, scope: !37, inlinedAt: !41)
!41 = !DILocation(line: 41, column: 26, scope: !37)
!42 = !DILocation(line: 42, column: 19, scope: !5)
!43 = !DILocation(line: 43, column: 25, scope: !5)
!44 = !DILocation(line: 43, column: 47, scope: !5)
!45 = !DILocation(line: 43, column: 4, scope: !5)

; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d67de8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !5 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %11 = and i32 %10, 31, !dbg !8
  %12 = lshr i32 %10, 5, !dbg !8
  %13 = and i32 %10, 7, !dbg !8
  %14 = shl nuw nsw i32 %13, 2, !dbg !8
  %15 = and i32 %12, 7, !dbg !9
  %16 = lshr i32 %11, 3, !dbg !9
  %17 = shl nuw nsw i32 %15, 2, !dbg !9
  %18 = or i32 %14, 1, !dbg !10
  %19 = or i32 %14, 2, !dbg !10
  %20 = or i32 %14, 3, !dbg !10
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !14
  %22 = shl i32 %21, 5, !dbg !15
  %23 = or i32 %22, %14, !dbg !8
  %24 = or i32 %22, %11, !dbg !8
  %25 = icmp slt i32 %23, %7, !dbg !16
  %26 = icmp slt i32 %24, %7, !dbg !16
  %.frozen = freeze i32 %23
  %27 = sdiv i32 %.frozen, 176, !dbg !17
  %.frozen1 = freeze i32 %24
  %28 = sdiv i32 %.frozen1, 176, !dbg !17
  %29 = mul i32 %27, 176
  %.decomposed = sub i32 %.frozen, %29
  %30 = mul i32 %28, 176
  %.decomposed2 = sub i32 %.frozen1, %30
  %31 = sext i32 %27 to i64, !dbg !18
  %32 = getelementptr double, ptr addrspace(1) %0, i64 %31, !dbg !18
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %25) #3, !dbg !19
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %25) #3, !dbg !19
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %25) #3, !dbg !19
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %25) #3, !dbg !19
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !20
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %25) #3, !dbg !21
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %25) #3, !dbg !21
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %25) #3, !dbg !21
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %25) #3, !dbg !21
  %42 = mul i32 %27, 8800, !dbg !22
  %43 = add i32 %42, %.decomposed, !dbg !23
  %44 = sext i32 %.decomposed to i64, !dbg !24
  %45 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !24
  %46 = sext i32 %28 to i64, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %5, i64 %46, !dbg !25
  %48 = or i32 %17, %16, !dbg !9
  %49 = or i32 %48, 32, !dbg !9
  %50 = icmp ult i32 %49, 50, !dbg !26
  %51 = insertelement <4 x i64> poison, i64 %36, i64 0, !dbg !19
  %52 = insertelement <4 x i64> %51, i64 %35, i64 1, !dbg !19
  %53 = insertelement <4 x i64> %52, i64 %34, i64 2, !dbg !19
  %54 = insertelement <4 x i64> %53, i64 %33, i64 3, !dbg !19
  %55 = bitcast <4 x i64> %54 to <4 x double>, !dbg !19
  %56 = mul nuw nsw i32 %48, 176, !dbg !27
  %57 = mul nuw nsw i32 %49, 176, !dbg !27
  %58 = add i32 %43, %56, !dbg !28
  %59 = add i32 %43, %57, !dbg !28
  %60 = sext i32 %58 to i64, !dbg !29
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !29
  %62 = sext i32 %59 to i64, !dbg !29
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !29
  %64 = and i1 %50, %25, !dbg !30
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %61, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #3, !dbg !31
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !31
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !31
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !31
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !31
  %70 = bitcast i32 %66 to float, !dbg !31
  %71 = bitcast i32 %67 to float, !dbg !31
  %72 = bitcast i32 %68 to float, !dbg !31
  %73 = bitcast i32 %69 to float, !dbg !31
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %63, i1 %64, i32 0, i1 %64, i32 0, i1 %64, i32 0, i1 %64, i32 0, i1 %64) #3, !dbg !31
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !31
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !31
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !31
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !31
  %79 = bitcast i32 %75 to float, !dbg !31
  %80 = bitcast i32 %76 to float, !dbg !31
  %81 = bitcast i32 %77 to float, !dbg !31
  %82 = bitcast i32 %78 to float, !dbg !31
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %25) #3, !dbg !32
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !32
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !32
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !32
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !32
  %88 = bitcast i32 %84 to float, !dbg !32
  %89 = bitcast i32 %85 to float, !dbg !32
  %90 = bitcast i32 %86 to float, !dbg !32
  %91 = bitcast i32 %87 to float, !dbg !32
  %92 = getelementptr float, ptr addrspace(1) %4, i64 %60, !dbg !33
  %93 = getelementptr float, ptr addrspace(1) %4, i64 %62, !dbg !33
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %92, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #3, !dbg !34
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !34
  %96 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !34
  %97 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !34
  %98 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !34
  %99 = bitcast i32 %95 to float, !dbg !34
  %100 = bitcast i32 %96 to float, !dbg !34
  %101 = bitcast i32 %97 to float, !dbg !34
  %102 = bitcast i32 %98 to float, !dbg !34
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %93, i1 %64, i32 0, i1 %64, i32 0, i1 %64, i32 0, i1 %64, i32 0, i1 %64) #3, !dbg !34
  %104 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !34
  %105 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !34
  %106 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !34
  %107 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !34
  %108 = bitcast i32 %104 to float, !dbg !34
  %109 = bitcast i32 %105 to float, !dbg !34
  %110 = bitcast i32 %106 to float, !dbg !34
  %111 = bitcast i32 %107 to float, !dbg !34
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %26) #3, !dbg !35
  %113 = bitcast i32 %112 to float, !dbg !35
  %114 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !36
  %115 = insertelement <2 x i32> %114, i32 %48, i64 1, !dbg !36
  %116 = sitofp <2 x i32> %115 to <2 x double>, !dbg !36
  %117 = shufflevector <2 x double> %116, <2 x double> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !36
  %118 = fcmp olt <4 x double> %55, <double 5.000000e+01, double 5.000000e+01, double 5.000000e+01, double 5.000000e+01>, !dbg !37
  %119 = fcmp uno <4 x double> %55, zeroinitializer, !dbg !41
  %120 = or <4 x i1> %118, %119, !dbg !42
  %121 = select <4 x i1> %120, <4 x double> %55, <4 x double> <double 5.000000e+01, double 5.000000e+01, double 5.000000e+01, double 5.000000e+01>, !dbg !43
  %122 = shufflevector <4 x double> %121, <4 x double> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !43
  %123 = fcmp ogt <8 x double> %122, %117, !dbg !44
  %124 = insertelement <4 x i32> poison, i32 %41, i64 0, !dbg !45
  %125 = insertelement <4 x i32> %124, i32 %40, i64 1, !dbg !45
  %126 = insertelement <4 x i32> %125, i32 %39, i64 2, !dbg !45
  %127 = insertelement <4 x i32> %126, i32 %38, i64 3, !dbg !45
  %128 = and <4 x i32> %127, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>, !dbg !45
  %129 = icmp eq <4 x i32> %128, zeroinitializer, !dbg !45
  %130 = extractelement <8 x i1> %123, i64 7, !dbg !46
  %131 = extractelement <4 x i1> %129, i64 3, !dbg !46
  %132 = or i1 %130, %131, !dbg !46
  %133 = extractelement <8 x i1> %123, i64 6, !dbg !46
  %134 = extractelement <4 x i1> %129, i64 2, !dbg !46
  %135 = or i1 %133, %134, !dbg !46
  %136 = extractelement <8 x i1> %123, i64 5, !dbg !46
  %137 = extractelement <4 x i1> %129, i64 1, !dbg !46
  %138 = or i1 %136, %137, !dbg !46
  %139 = extractelement <8 x i1> %123, i64 4, !dbg !46
  %140 = extractelement <4 x i1> %129, i64 0, !dbg !46
  %141 = or i1 %139, %140, !dbg !46
  %142 = extractelement <8 x i1> %123, i64 3, !dbg !46
  %143 = or i1 %142, %131, !dbg !46
  %144 = extractelement <8 x i1> %123, i64 2, !dbg !46
  %145 = or i1 %144, %134, !dbg !46
  %146 = extractelement <8 x i1> %123, i64 1, !dbg !46
  %147 = or i1 %146, %137, !dbg !46
  %148 = extractelement <8 x i1> %123, i64 0, !dbg !46
  %149 = or i1 %148, %140, !dbg !46
  %150 = fadd float %70, %88, !dbg !47
  %151 = fadd float %71, %89, !dbg !47
  %152 = fadd float %72, %90, !dbg !47
  %153 = fadd float %73, %91, !dbg !47
  %154 = fadd float %79, %88, !dbg !47
  %155 = fadd float %80, %89, !dbg !47
  %156 = fadd float %81, %90, !dbg !47
  %157 = fadd float %82, %91, !dbg !47
  %158 = fadd float %150, %99, !dbg !48
  %159 = fadd float %151, %100, !dbg !48
  %160 = fadd float %152, %101, !dbg !48
  %161 = fadd float %153, %102, !dbg !48
  %162 = fadd float %154, %108, !dbg !48
  %163 = fadd float %155, %109, !dbg !48
  %164 = fadd float %156, %110, !dbg !48
  %165 = fadd float %157, %111, !dbg !48
  %166 = and i1 %25, %132, !dbg !49
  %167 = and i1 %25, %135, !dbg !49
  %168 = and i1 %25, %138, !dbg !49
  %169 = and i1 %25, %141, !dbg !49
  %170 = and i1 %64, %143, !dbg !49
  %171 = and i1 %64, %145, !dbg !49
  %172 = and i1 %64, %147, !dbg !49
  %173 = and i1 %64, %149, !dbg !49
  %174 = select i1 %166, float %158, float 0.000000e+00, !dbg !49
  %175 = select i1 %167, float %159, float 0.000000e+00, !dbg !49
  %176 = select i1 %168, float %160, float 0.000000e+00, !dbg !49
  %177 = select i1 %169, float %161, float 0.000000e+00, !dbg !49
  %178 = select i1 %170, float %162, float 0.000000e+00, !dbg !49
  %179 = select i1 %171, float %163, float 0.000000e+00, !dbg !49
  %180 = select i1 %172, float %164, float 0.000000e+00, !dbg !49
  %181 = select i1 %173, float %165, float 0.000000e+00, !dbg !49
  %182 = fadd float %174, %178, !dbg !50
  %183 = fadd float %175, %179, !dbg !50
  %184 = fadd float %176, %180, !dbg !50
  %185 = fadd float %177, %181, !dbg !50
  %186 = bitcast float %182 to i32, !dbg !10
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 16, i32 31), !dbg !10
  %188 = bitcast i32 %187 to float, !dbg !10
  %189 = fadd float %182, %188, !dbg !50
  %190 = bitcast float %189 to i32, !dbg !10
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %190, i32 8, i32 31), !dbg !10
  %192 = bitcast i32 %191 to float, !dbg !10
  %193 = fadd float %189, %192, !dbg !50
  %194 = bitcast float %183 to i32, !dbg !10
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 16, i32 31), !dbg !10
  %196 = bitcast i32 %195 to float, !dbg !10
  %197 = fadd float %183, %196, !dbg !50
  %198 = bitcast float %197 to i32, !dbg !10
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 8, i32 31), !dbg !10
  %200 = bitcast i32 %199 to float, !dbg !10
  %201 = fadd float %197, %200, !dbg !50
  %202 = bitcast float %184 to i32, !dbg !10
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 16, i32 31), !dbg !10
  %204 = bitcast i32 %203 to float, !dbg !10
  %205 = fadd float %184, %204, !dbg !50
  %206 = bitcast float %205 to i32, !dbg !10
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 8, i32 31), !dbg !10
  %208 = bitcast i32 %207 to float, !dbg !10
  %209 = fadd float %205, %208, !dbg !50
  %210 = bitcast float %185 to i32, !dbg !10
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 16, i32 31), !dbg !10
  %212 = bitcast i32 %211 to float, !dbg !10
  %213 = fadd float %185, %212, !dbg !50
  %214 = bitcast float %213 to i32, !dbg !10
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 8, i32 31), !dbg !10
  %216 = bitcast i32 %215 to float, !dbg !10
  %217 = fadd float %213, %216, !dbg !50
  %218 = icmp ult i32 %11, 8, !dbg !10
  %219 = shl nuw nsw i32 %13, 5, !dbg !10
  %220 = or i32 %219, %15, !dbg !10
  %221 = zext nneg i32 %220 to i64, !dbg !10
  %222 = getelementptr float, ptr addrspace(3) @global_smem, i64 %221, !dbg !10
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, float %193, i1 %218) #3, !dbg !10
  %223 = shl nuw nsw i32 %18, 3, !dbg !10
  %224 = or i32 %223, %15, !dbg !10
  %225 = zext nneg i32 %224 to i64, !dbg !10
  %226 = getelementptr float, ptr addrspace(3) @global_smem, i64 %225, !dbg !10
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, float %201, i1 %218) #3, !dbg !10
  %227 = shl nuw nsw i32 %19, 3, !dbg !10
  %228 = or i32 %227, %15, !dbg !10
  %229 = zext nneg i32 %228 to i64, !dbg !10
  %230 = getelementptr float, ptr addrspace(3) @global_smem, i64 %229, !dbg !10
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, float %209, i1 %218) #3, !dbg !10
  %231 = shl nuw nsw i32 %20, 3, !dbg !10
  %232 = or i32 %231, %15, !dbg !10
  %233 = zext nneg i32 %232 to i64, !dbg !10
  %234 = getelementptr float, ptr addrspace(3) @global_smem, i64 %233, !dbg !10
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, float %217, i1 %218) #3, !dbg !10
  tail call void @llvm.nvvm.barrier0(), !dbg !10
  %235 = icmp slt i32 %10, 256, !dbg !10
  %236 = sext i32 %10 to i64, !dbg !10
  %237 = getelementptr float, ptr addrspace(3) @global_smem, i64 %236, !dbg !10
  %238 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %237, i1 %235) #3, !dbg !10
  %239 = bitcast float %238 to i32, !dbg !10
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 4, i32 31), !dbg !10
  %241 = bitcast i32 %240 to float, !dbg !10
  %242 = fadd float %238, %241, !dbg !50
  %243 = bitcast float %242 to i32, !dbg !10
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 2, i32 31), !dbg !10
  %245 = bitcast i32 %244 to float, !dbg !10
  %246 = fadd float %242, %245, !dbg !50
  %247 = bitcast float %246 to i32, !dbg !10
  %248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 1, i32 31), !dbg !10
  %249 = bitcast i32 %248 to float, !dbg !10
  %250 = fadd float %246, %249, !dbg !50
  %251 = icmp eq i32 %13, 0, !dbg !10
  %252 = and i1 %235, %251, !dbg !10
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %237, float %250, i1 %252) #3, !dbg !10
  tail call void @llvm.nvvm.barrier0(), !dbg !10
  %253 = zext nneg i32 %219 to i64, !dbg !10
  %254 = getelementptr float, ptr addrspace(3) @global_smem, i64 %253, !dbg !10
  %255 = load float, ptr addrspace(3) %254, align 4, !dbg !10
  %256 = zext nneg i32 %223 to i64, !dbg !10
  %257 = getelementptr float, ptr addrspace(3) @global_smem, i64 %256, !dbg !10
  %258 = load float, ptr addrspace(3) %257, align 4, !dbg !10
  %259 = zext nneg i32 %227 to i64, !dbg !10
  %260 = getelementptr float, ptr addrspace(3) @global_smem, i64 %259, !dbg !10
  %261 = load float, ptr addrspace(3) %260, align 4, !dbg !10
  %262 = zext nneg i32 %231 to i64, !dbg !10
  %263 = getelementptr float, ptr addrspace(3) @global_smem, i64 %262, !dbg !10
  %264 = load float, ptr addrspace(3) %263, align 4, !dbg !10
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %265 = zext nneg i32 %14 to i64, !dbg !54
  %266 = getelementptr float, ptr addrspace(3) @global_smem, i64 %265, !dbg !54
  %267 = insertelement <1 x float> undef, float %255, i64 0, !dbg !54
  store <1 x float> %267, ptr addrspace(3) %266, align 4, !dbg !54
  %268 = zext nneg i32 %18 to i64, !dbg !54
  %269 = getelementptr float, ptr addrspace(3) @global_smem, i64 %268, !dbg !54
  %270 = insertelement <1 x float> undef, float %258, i64 0, !dbg !54
  store <1 x float> %270, ptr addrspace(3) %269, align 4, !dbg !54
  %271 = zext nneg i32 %19 to i64, !dbg !54
  %272 = getelementptr float, ptr addrspace(3) @global_smem, i64 %271, !dbg !54
  %273 = insertelement <1 x float> undef, float %261, i64 0, !dbg !54
  store <1 x float> %273, ptr addrspace(3) %272, align 4, !dbg !54
  %274 = zext nneg i32 %20 to i64, !dbg !54
  %275 = getelementptr float, ptr addrspace(3) @global_smem, i64 %274, !dbg !54
  %276 = insertelement <1 x float> undef, float %264, i64 0, !dbg !54
  store <1 x float> %276, ptr addrspace(3) %275, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %277 = zext nneg i32 %11 to i64, !dbg !54
  %278 = getelementptr float, ptr addrspace(3) @global_smem, i64 %277, !dbg !54
  %279 = load float, ptr addrspace(3) %278, align 4, !dbg !54
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %113) #3, !dbg !55
  %281 = fmul float %279, %280, !dbg !54
  %282 = mul i32 %28, 1872, !dbg !56
  %283 = add i32 %282, %.decomposed2, !dbg !57
  %284 = sext i32 %283 to i64, !dbg !58
  %285 = getelementptr float, ptr addrspace(1) %6, i64 %284, !dbg !58
  %286 = icmp eq i32 %15, 0, !dbg !59
  %287 = bitcast float %281 to i32, !dbg !59
  %288 = and i1 %286, %26, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %287, ptr addrspace(1) %285, i1 %288) #3, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cnmen3auol7xyadxsofsuqgkixttzyezhiypyfuf24a5ntennm3w.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu/nm")
!3 = !{ptr @triton__0d1d2d3d4d5d67de8, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d67de8, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d67de8", linkageName: "triton__0d1d2d3d4d5d67de8", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 23, scope: !5)
!9 = !DILocation(line: 26, column: 13, scope: !5)
!10 = !DILocation(line: 243, column: 36, scope: !11, inlinedAt: !13)
!11 = distinct !DILexicalBlockFile(scope: !5, file: !12, discriminator: 0)
!12 = !DIFile(filename: "standard.py", directory: "/home/admin/zy429782/miniforge3/envs/compiled_torch/lib/python3.8/site-packages/triton/language")
!13 = !DILocation(line: 52, column: 26, scope: !11)
!14 = !DILocation(line: 23, column: 28, scope: !5)
!15 = !DILocation(line: 23, column: 33, scope: !5)
!16 = !DILocation(line: 25, column: 21, scope: !5)
!17 = !DILocation(line: 30, column: 20, scope: !5)
!18 = !DILocation(line: 33, column: 30, scope: !5)
!19 = !DILocation(line: 33, column: 35, scope: !5)
!20 = !DILocation(line: 34, column: 30, scope: !5)
!21 = !DILocation(line: 34, column: 35, scope: !5)
!22 = !DILocation(line: 35, column: 53, scope: !5)
!23 = !DILocation(line: 35, column: 37, scope: !5)
!24 = !DILocation(line: 36, column: 31, scope: !5)
!25 = !DILocation(line: 38, column: 31, scope: !5)
!26 = !DILocation(line: 28, column: 21, scope: !5)
!27 = !DILocation(line: 35, column: 41, scope: !5)
!28 = !DILocation(line: 35, column: 48, scope: !5)
!29 = !DILocation(line: 35, column: 31, scope: !5)
!30 = !DILocation(line: 35, column: 67, scope: !5)
!31 = !DILocation(line: 35, column: 59, scope: !5)
!32 = !DILocation(line: 36, column: 36, scope: !5)
!33 = !DILocation(line: 37, column: 31, scope: !5)
!34 = !DILocation(line: 37, column: 59, scope: !5)
!35 = !DILocation(line: 38, column: 36, scope: !5)
!36 = !DILocation(line: 40, column: 19, scope: !5)
!37 = !DILocation(line: 37, column: 15, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !5, file: !39, discriminator: 0)
!39 = !DIFile(filename: "triton_helpers.py", directory: "/home/admin/zy429782/torch_folder/pytorch-2.3.1/torch/_inductor")
!40 = !DILocation(line: 42, column: 40, scope: !38)
!41 = !DILocation(line: 39, column: 21, scope: !38, inlinedAt: !40)
!42 = !DILocation(line: 39, column: 16, scope: !38, inlinedAt: !40)
!43 = !DILocation(line: 40, column: 29, scope: !38, inlinedAt: !40)
!44 = !DILocation(line: 43, column: 18, scope: !5)
!45 = !DILocation(line: 45, column: 19, scope: !5)
!46 = !DILocation(line: 46, column: 18, scope: !5)
!47 = !DILocation(line: 47, column: 20, scope: !5)
!48 = !DILocation(line: 48, column: 20, scope: !5)
!49 = !DILocation(line: 0, scope: !5)
!50 = !DILocation(line: 233, column: 15, scope: !51, inlinedAt: !52)
!51 = distinct !DILexicalBlockFile(scope: !11, file: !12, discriminator: 0)
!52 = !DILocation(line: 243, column: 36, scope: !51, inlinedAt: !53)
!53 = !DILocation(line: 52, column: 26, scope: !51)
!54 = !DILocation(line: 54, column: 20, scope: !5)
!55 = !DILocation(line: 53, column: 16, scope: !5)
!56 = !DILocation(line: 55, column: 36, scope: !5)
!57 = !DILocation(line: 55, column: 31, scope: !5)
!58 = !DILocation(line: 55, column: 25, scope: !5)
!59 = !DILocation(line: 55, column: 49, scope: !5)
!60 = !DILocation(line: 55, column: 4, scope: !5)

; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d678(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !5 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %11 = and i32 %10, 31, !dbg !8
  %12 = lshr i32 %10, 5, !dbg !8
  %13 = shl i32 %10, 2, !dbg !8
  %14 = and i32 %13, 4, !dbg !8
  %15 = or i32 %14, 1, !dbg !8
  %16 = or i32 %14, 2, !dbg !8
  %17 = or i32 %14, 3, !dbg !8
  %18 = and i32 %10, 7, !dbg !8
  %19 = and i32 %12, 3, !dbg !9
  %20 = lshr i32 %11, 1, !dbg !9
  %21 = shl nuw nsw i32 %19, 4, !dbg !9
  %22 = or i32 %21, %20, !dbg !9
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %24 = shl i32 %23, 3, !dbg !11
  %25 = or i32 %24, %14, !dbg !8
  %26 = or i32 %24, %15, !dbg !8
  %27 = or i32 %24, %16, !dbg !8
  %28 = or i32 %24, %17, !dbg !8
  %29 = or i32 %24, %18, !dbg !8
  %30 = icmp slt i32 %25, %7, !dbg !12
  %31 = icmp slt i32 %26, %7, !dbg !12
  %32 = icmp slt i32 %27, %7, !dbg !12
  %33 = icmp slt i32 %28, %7, !dbg !12
  %34 = icmp slt i32 %29, %7, !dbg !12
  %35 = icmp ult i32 %22, 50, !dbg !13
  %.frozen = freeze i32 %25
  %36 = sdiv i32 %.frozen, 172, !dbg !14
  %.frozen3 = freeze i32 %29
  %37 = sdiv i32 %.frozen3, 172, !dbg !14
  %38 = mul i32 %36, 172
  %.decomposed = sub i32 %.frozen, %38
  %39 = srem i32 %26, 172, !dbg !15
  %40 = srem i32 %27, 172, !dbg !15
  %41 = srem i32 %28, 172, !dbg !15
  %42 = mul i32 %37, 172
  %.decomposed4 = sub i32 %.frozen3, %42
  %43 = sext i32 %36 to i64, !dbg !16
  %44 = getelementptr double, ptr addrspace(1) %0, i64 %43, !dbg !16
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %30) #3, !dbg !17
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %31) #3, !dbg !17
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %32) #3, !dbg !17
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %33) #3, !dbg !17
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !18
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %30) #3, !dbg !19
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %31) #3, !dbg !19
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %32) #3, !dbg !19
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %33) #3, !dbg !19
  %54 = mul nuw nsw i32 %22, 172, !dbg !20
  %55 = mul i32 %36, 8600, !dbg !21
  %56 = add i32 %55, %54, !dbg !22
  %57 = add i32 %56, %.decomposed, !dbg !23
  %58 = add i32 %56, %39, !dbg !23
  %59 = add i32 %56, %40, !dbg !23
  %60 = add i32 %56, %41, !dbg !23
  %61 = sext i32 %57 to i64, !dbg !24
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !24
  %63 = sext i32 %58 to i64, !dbg !24
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !24
  %65 = sext i32 %59 to i64, !dbg !24
  %66 = getelementptr float, ptr addrspace(1) %2, i64 %65, !dbg !24
  %67 = sext i32 %60 to i64, !dbg !24
  %68 = getelementptr float, ptr addrspace(1) %2, i64 %67, !dbg !24
  %69 = and i1 %35, %30, !dbg !25
  %70 = and i1 %35, %31, !dbg !25
  %71 = and i1 %35, %32, !dbg !25
  %72 = and i1 %35, %33, !dbg !25
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %69, i32 0, i1 %69) #3, !dbg !26
  %74 = bitcast i32 %73 to float, !dbg !26
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %70, i32 0, i1 %70) #3, !dbg !26
  %76 = bitcast i32 %75 to float, !dbg !26
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %71, i32 0, i1 %71) #3, !dbg !26
  %78 = bitcast i32 %77 to float, !dbg !26
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %72, i32 0, i1 %72) #3, !dbg !26
  %80 = bitcast i32 %79 to float, !dbg !26
  %81 = sext i32 %.decomposed to i64, !dbg !27
  %82 = getelementptr float, ptr addrspace(1) %3, i64 %81, !dbg !27
  %83 = sext i32 %39 to i64, !dbg !27
  %84 = getelementptr float, ptr addrspace(1) %3, i64 %83, !dbg !27
  %85 = sext i32 %40 to i64, !dbg !27
  %86 = getelementptr float, ptr addrspace(1) %3, i64 %85, !dbg !27
  %87 = sext i32 %41 to i64, !dbg !27
  %88 = getelementptr float, ptr addrspace(1) %3, i64 %87, !dbg !27
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %30) #3, !dbg !28
  %90 = bitcast i32 %89 to float, !dbg !28
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %31) #3, !dbg !28
  %92 = bitcast i32 %91 to float, !dbg !28
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %32) #3, !dbg !28
  %94 = bitcast i32 %93 to float, !dbg !28
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %33) #3, !dbg !28
  %96 = bitcast i32 %95 to float, !dbg !28
  %97 = getelementptr float, ptr addrspace(1) %4, i64 %61, !dbg !29
  %98 = getelementptr float, ptr addrspace(1) %4, i64 %63, !dbg !29
  %99 = getelementptr float, ptr addrspace(1) %4, i64 %65, !dbg !29
  %100 = getelementptr float, ptr addrspace(1) %4, i64 %67, !dbg !29
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %69, i32 0, i1 %69) #3, !dbg !30
  %102 = bitcast i32 %101 to float, !dbg !30
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %70, i32 0, i1 %70) #3, !dbg !30
  %104 = bitcast i32 %103 to float, !dbg !30
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %71, i32 0, i1 %71) #3, !dbg !30
  %106 = bitcast i32 %105 to float, !dbg !30
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %72, i32 0, i1 %72) #3, !dbg !30
  %108 = bitcast i32 %107 to float, !dbg !30
  %109 = sext i32 %37 to i64, !dbg !31
  %110 = getelementptr float, ptr addrspace(1) %5, i64 %109, !dbg !31
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 %34) #3, !dbg !32
  %112 = bitcast i32 %111 to float, !dbg !32
  %113 = sitofp i32 %22 to double, !dbg !33
  %114 = insertelement <4 x i64> poison, i64 %48, i64 0, !dbg !17
  %115 = insertelement <4 x i64> %114, i64 %47, i64 1, !dbg !17
  %116 = insertelement <4 x i64> %115, i64 %46, i64 2, !dbg !17
  %117 = insertelement <4 x i64> %116, i64 %45, i64 3, !dbg !17
  %118 = bitcast <4 x i64> %117 to <4 x double>, !dbg !17
  %119 = fcmp olt <4 x double> %118, <double 5.000000e+01, double 5.000000e+01, double 5.000000e+01, double 5.000000e+01>, !dbg !34
  %120 = fcmp uno <4 x double> %118, zeroinitializer, !dbg !38
  %121 = or <4 x i1> %119, %120, !dbg !39
  %122 = select <4 x i1> %121, <4 x double> %118, <4 x double> <double 5.000000e+01, double 5.000000e+01, double 5.000000e+01, double 5.000000e+01>, !dbg !40
  %123 = insertelement <4 x double> poison, double %113, i64 0, !dbg !41
  %124 = shufflevector <4 x double> %123, <4 x double> poison, <4 x i32> zeroinitializer, !dbg !41
  %125 = fcmp ogt <4 x double> %122, %124, !dbg !41
  %126 = and i32 %50, 2147483647, !dbg !42
  %127 = icmp eq i32 %126, 0, !dbg !42
  %128 = extractelement <4 x i1> %125, i64 3, !dbg !43
  %129 = or i1 %128, %127, !dbg !43
  %130 = fadd float %74, %90, !dbg !44
  %131 = fadd float %76, %92, !dbg !44
  %132 = fadd float %78, %94, !dbg !44
  %133 = fadd float %80, %96, !dbg !44
  %134 = fadd float %130, %102, !dbg !45
  %135 = fadd float %131, %104, !dbg !45
  %136 = fadd float %132, %106, !dbg !45
  %137 = fadd float %133, %108, !dbg !45
  %138 = and i1 %69, %129, !dbg !46
  %139 = select i1 %138, float %134, float 0.000000e+00, !dbg !46
  %140 = bitcast float %139 to i32, !dbg !47
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 16, i32 31), !dbg !47
  %142 = bitcast i32 %141 to float, !dbg !47
  %143 = fadd float %139, %142, !dbg !51
  %144 = bitcast float %143 to i32, !dbg !47
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 8, i32 31), !dbg !47
  %146 = bitcast i32 %145 to float, !dbg !47
  %147 = fadd float %143, %146, !dbg !51
  %148 = bitcast float %147 to i32, !dbg !47
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 4, i32 31), !dbg !47
  %150 = bitcast i32 %149 to float, !dbg !47
  %151 = fadd float %147, %150, !dbg !51
  %152 = bitcast float %151 to i32, !dbg !47
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 2, i32 31), !dbg !47
  %154 = bitcast i32 %153 to float, !dbg !47
  %155 = fadd float %151, %154, !dbg !51
  %156 = icmp ult i32 %11, 2, !dbg !47
  %157 = shl nuw nsw i32 %14, 2, !dbg !47
  %158 = or i32 %157, %19, !dbg !47
  %159 = zext nneg i32 %158 to i64, !dbg !47
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i64 %159, !dbg !47
  %161 = shl nuw nsw i32 %15, 2, !dbg !47
  %162 = or i32 %161, %19, !dbg !47
  %163 = zext nneg i32 %162 to i64, !dbg !47
  %164 = getelementptr float, ptr addrspace(3) @global_smem, i64 %163, !dbg !47
  %165 = shl nuw nsw i32 %16, 2, !dbg !47
  %166 = or i32 %165, %19, !dbg !47
  %167 = zext nneg i32 %166 to i64, !dbg !47
  %168 = getelementptr float, ptr addrspace(3) @global_smem, i64 %167, !dbg !47
  %169 = shl nuw nsw i32 %17, 2, !dbg !47
  %170 = or i32 %169, %19, !dbg !47
  %171 = zext nneg i32 %170 to i64, !dbg !47
  %172 = getelementptr float, ptr addrspace(3) @global_smem, i64 %171, !dbg !47
  %173 = icmp slt i32 %10, 32, !dbg !47
  %174 = sext i32 %10 to i64, !dbg !47
  %175 = getelementptr float, ptr addrspace(3) @global_smem, i64 %174, !dbg !47
  %176 = insertelement <4 x i32> poison, i32 %10, i64 0, !dbg !47
  %177 = insertelement <4 x i32> %176, i32 %53, i64 1, !dbg !47
  %178 = insertelement <4 x i32> %177, i32 %52, i64 2, !dbg !47
  %179 = insertelement <4 x i32> %178, i32 %51, i64 3, !dbg !47
  %180 = and <4 x i32> %179, <i32 3, i32 2147483647, i32 2147483647, i32 2147483647>, !dbg !47
  %181 = icmp eq <4 x i32> %180, zeroinitializer, !dbg !47
  %shift = shufflevector <4 x i1> %181, <4 x i1> poison, <4 x i32> <i32 poison, i32 poison, i32 3, i32 poison>, !dbg !43
  %182 = or <4 x i1> %125, %shift, !dbg !43
  %183 = extractelement <4 x i1> %182, i64 2, !dbg !43
  %shift1 = shufflevector <4 x i1> %181, <4 x i1> poison, <4 x i32> <i32 poison, i32 2, i32 poison, i32 poison>, !dbg !43
  %184 = or <4 x i1> %125, %shift1, !dbg !43
  %185 = extractelement <4 x i1> %184, i64 1, !dbg !43
  %shift2 = shufflevector <4 x i1> %181, <4 x i1> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !43
  %186 = or <4 x i1> %125, %shift2, !dbg !43
  %187 = extractelement <4 x i1> %186, i64 0, !dbg !43
  %188 = and i1 %70, %183, !dbg !46
  %189 = and i1 %71, %185, !dbg !46
  %190 = and i1 %72, %187, !dbg !46
  %191 = select i1 %188, float %135, float 0.000000e+00, !dbg !46
  %192 = select i1 %189, float %136, float 0.000000e+00, !dbg !46
  %193 = select i1 %190, float %137, float 0.000000e+00, !dbg !46
  %194 = bitcast float %191 to i32, !dbg !47
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 16, i32 31), !dbg !47
  %196 = bitcast i32 %195 to float, !dbg !47
  %197 = fadd float %191, %196, !dbg !51
  %198 = bitcast float %197 to i32, !dbg !47
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 8, i32 31), !dbg !47
  %200 = bitcast i32 %199 to float, !dbg !47
  %201 = fadd float %197, %200, !dbg !51
  %202 = bitcast float %201 to i32, !dbg !47
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 4, i32 31), !dbg !47
  %204 = bitcast i32 %203 to float, !dbg !47
  %205 = fadd float %201, %204, !dbg !51
  %206 = bitcast float %205 to i32, !dbg !47
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 2, i32 31), !dbg !47
  %208 = bitcast i32 %207 to float, !dbg !47
  %209 = fadd float %205, %208, !dbg !51
  %210 = bitcast float %192 to i32, !dbg !47
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 16, i32 31), !dbg !47
  %212 = bitcast i32 %211 to float, !dbg !47
  %213 = fadd float %192, %212, !dbg !51
  %214 = bitcast float %213 to i32, !dbg !47
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 8, i32 31), !dbg !47
  %216 = bitcast i32 %215 to float, !dbg !47
  %217 = fadd float %213, %216, !dbg !51
  %218 = bitcast float %217 to i32, !dbg !47
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 4, i32 31), !dbg !47
  %220 = bitcast i32 %219 to float, !dbg !47
  %221 = fadd float %217, %220, !dbg !51
  %222 = bitcast float %221 to i32, !dbg !47
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 2, i32 31), !dbg !47
  %224 = bitcast i32 %223 to float, !dbg !47
  %225 = fadd float %221, %224, !dbg !51
  %226 = bitcast float %193 to i32, !dbg !47
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 16, i32 31), !dbg !47
  %228 = bitcast i32 %227 to float, !dbg !47
  %229 = fadd float %193, %228, !dbg !51
  %230 = bitcast float %229 to i32, !dbg !47
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 8, i32 31), !dbg !47
  %232 = bitcast i32 %231 to float, !dbg !47
  %233 = fadd float %229, %232, !dbg !51
  %234 = bitcast float %233 to i32, !dbg !47
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 4, i32 31), !dbg !47
  %236 = bitcast i32 %235 to float, !dbg !47
  %237 = fadd float %233, %236, !dbg !51
  %238 = bitcast float %237 to i32, !dbg !47
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 2, i32 31), !dbg !47
  %240 = bitcast i32 %239 to float, !dbg !47
  %241 = fadd float %237, %240, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, float %155, i1 %156) #3, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, float %209, i1 %156) #3, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %168, float %225, i1 %156) #3, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %172, float %241, i1 %156) #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %242 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %175, i1 %173) #3, !dbg !47
  %243 = bitcast float %242 to i32, !dbg !47
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 2, i32 31), !dbg !47
  %245 = bitcast i32 %244 to float, !dbg !47
  %246 = fadd float %242, %245, !dbg !51
  %247 = bitcast float %246 to i32, !dbg !47
  %248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 1, i32 31), !dbg !47
  %249 = bitcast i32 %248 to float, !dbg !47
  %250 = fadd float %246, %249, !dbg !51
  %251 = extractelement <4 x i1> %181, i64 0, !dbg !47
  %252 = and i1 %173, %251, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %175, float %250, i1 %252) #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %253 = zext nneg i32 %157 to i64, !dbg !47
  %254 = getelementptr float, ptr addrspace(3) @global_smem, i64 %253, !dbg !47
  %255 = load float, ptr addrspace(3) %254, align 4, !dbg !47
  %256 = zext nneg i32 %161 to i64, !dbg !47
  %257 = getelementptr float, ptr addrspace(3) @global_smem, i64 %256, !dbg !47
  %258 = load float, ptr addrspace(3) %257, align 4, !dbg !47
  %259 = zext nneg i32 %165 to i64, !dbg !47
  %260 = getelementptr float, ptr addrspace(3) @global_smem, i64 %259, !dbg !47
  %261 = load float, ptr addrspace(3) %260, align 4, !dbg !47
  %262 = zext nneg i32 %169 to i64, !dbg !47
  %263 = getelementptr float, ptr addrspace(3) @global_smem, i64 %262, !dbg !47
  %264 = load float, ptr addrspace(3) %263, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %265 = zext nneg i32 %14 to i64, !dbg !55
  %266 = getelementptr float, ptr addrspace(3) @global_smem, i64 %265, !dbg !55
  %267 = insertelement <1 x float> undef, float %255, i64 0, !dbg !55
  store <1 x float> %267, ptr addrspace(3) %266, align 4, !dbg !55
  %268 = zext nneg i32 %15 to i64, !dbg !55
  %269 = getelementptr float, ptr addrspace(3) @global_smem, i64 %268, !dbg !55
  %270 = insertelement <1 x float> undef, float %258, i64 0, !dbg !55
  store <1 x float> %270, ptr addrspace(3) %269, align 4, !dbg !55
  %271 = zext nneg i32 %16 to i64, !dbg !55
  %272 = getelementptr float, ptr addrspace(3) @global_smem, i64 %271, !dbg !55
  %273 = insertelement <1 x float> undef, float %261, i64 0, !dbg !55
  store <1 x float> %273, ptr addrspace(3) %272, align 4, !dbg !55
  %274 = zext nneg i32 %17 to i64, !dbg !55
  %275 = getelementptr float, ptr addrspace(3) @global_smem, i64 %274, !dbg !55
  %276 = insertelement <1 x float> undef, float %264, i64 0, !dbg !55
  store <1 x float> %276, ptr addrspace(3) %275, align 4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %277 = zext nneg i32 %18 to i64, !dbg !55
  %278 = getelementptr float, ptr addrspace(3) @global_smem, i64 %277, !dbg !55
  %279 = load float, ptr addrspace(3) %278, align 4, !dbg !55
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %112) #3, !dbg !56
  %281 = fmul float %279, %280, !dbg !55
  %282 = mul i32 %37, 1872, !dbg !57
  %283 = add i32 %282, %.decomposed4, !dbg !58
  %284 = sext i32 %283 to i64, !dbg !59
  %285 = getelementptr float, ptr addrspace(1) %6, i64 %284, !dbg !59
  %286 = lshr i32 %11, 3, !dbg !60
  %287 = shl nuw nsw i32 %19, 2, !dbg !60
  %288 = or i32 %287, %286, !dbg !60
  %289 = icmp eq i32 %288, 0, !dbg !60
  %290 = bitcast float %281 to i32, !dbg !60
  %291 = and i1 %289, %34, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %290, ptr addrspace(1) %285, i1 %291) #3, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "ctiqpdlpgaiduxafg6qyu7cxfydu4g6aep4cm3sra4idbsog63rw.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu/ti")
!3 = !{ptr @triton__0d1d2d3d4d5d678, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d678, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d678", linkageName: "triton__0d1d2d3d4d5d678", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 23, scope: !5)
!9 = !DILocation(line: 26, column: 13, scope: !5)
!10 = !DILocation(line: 23, column: 28, scope: !5)
!11 = !DILocation(line: 23, column: 33, scope: !5)
!12 = !DILocation(line: 25, column: 21, scope: !5)
!13 = !DILocation(line: 28, column: 21, scope: !5)
!14 = !DILocation(line: 30, column: 20, scope: !5)
!15 = !DILocation(line: 31, column: 18, scope: !5)
!16 = !DILocation(line: 33, column: 30, scope: !5)
!17 = !DILocation(line: 33, column: 35, scope: !5)
!18 = !DILocation(line: 34, column: 30, scope: !5)
!19 = !DILocation(line: 34, column: 35, scope: !5)
!20 = !DILocation(line: 35, column: 41, scope: !5)
!21 = !DILocation(line: 35, column: 53, scope: !5)
!22 = !DILocation(line: 35, column: 37, scope: !5)
!23 = !DILocation(line: 35, column: 48, scope: !5)
!24 = !DILocation(line: 35, column: 31, scope: !5)
!25 = !DILocation(line: 35, column: 67, scope: !5)
!26 = !DILocation(line: 35, column: 59, scope: !5)
!27 = !DILocation(line: 36, column: 31, scope: !5)
!28 = !DILocation(line: 36, column: 36, scope: !5)
!29 = !DILocation(line: 37, column: 31, scope: !5)
!30 = !DILocation(line: 37, column: 59, scope: !5)
!31 = !DILocation(line: 38, column: 31, scope: !5)
!32 = !DILocation(line: 38, column: 36, scope: !5)
!33 = !DILocation(line: 40, column: 19, scope: !5)
!34 = !DILocation(line: 37, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !5, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/admin/zy429782/torch_folder/pytorch-2.3.1/torch/_inductor")
!37 = !DILocation(line: 42, column: 40, scope: !35)
!38 = !DILocation(line: 39, column: 21, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 39, column: 16, scope: !35, inlinedAt: !37)
!40 = !DILocation(line: 40, column: 29, scope: !35, inlinedAt: !37)
!41 = !DILocation(line: 43, column: 18, scope: !5)
!42 = !DILocation(line: 45, column: 19, scope: !5)
!43 = !DILocation(line: 46, column: 18, scope: !5)
!44 = !DILocation(line: 47, column: 20, scope: !5)
!45 = !DILocation(line: 48, column: 20, scope: !5)
!46 = !DILocation(line: 0, scope: !5)
!47 = !DILocation(line: 243, column: 36, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !5, file: !49, discriminator: 0)
!49 = !DIFile(filename: "standard.py", directory: "/home/admin/zy429782/miniforge3/envs/compiled_torch/lib/python3.8/site-packages/triton/language")
!50 = !DILocation(line: 52, column: 26, scope: !48)
!51 = !DILocation(line: 233, column: 15, scope: !52, inlinedAt: !53)
!52 = distinct !DILexicalBlockFile(scope: !48, file: !49, discriminator: 0)
!53 = !DILocation(line: 243, column: 36, scope: !52, inlinedAt: !54)
!54 = !DILocation(line: 52, column: 26, scope: !52)
!55 = !DILocation(line: 54, column: 20, scope: !5)
!56 = !DILocation(line: 53, column: 16, scope: !5)
!57 = !DILocation(line: 55, column: 36, scope: !5)
!58 = !DILocation(line: 55, column: 31, scope: !5)
!59 = !DILocation(line: 55, column: 25, scope: !5)
!60 = !DILocation(line: 55, column: 49, scope: !5)
!61 = !DILocation(line: 55, column: 4, scope: !5)

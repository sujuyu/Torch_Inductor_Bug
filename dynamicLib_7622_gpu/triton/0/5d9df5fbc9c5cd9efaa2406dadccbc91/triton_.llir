; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6de7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %10 = shl i32 %9, 2, !dbg !10
  %11 = and i32 %10, 252, !dbg !10
  %12 = lshr i32 %9, 3, !dbg !10
  %13 = and i32 %12, 31, !dbg !10
  %14 = or i32 %13, 32, !dbg !10
  %15 = or i32 %13, 64, !dbg !10
  %16 = or i32 %13, 96, !dbg !10
  %17 = or i32 %13, 128, !dbg !10
  %18 = or i32 %13, 160, !dbg !10
  %19 = or i32 %13, 192, !dbg !10
  %20 = or i32 %13, 224, !dbg !10
  %urem = and i32 %9, 255, !dbg !10
  %21 = lshr i32 %9, 6, !dbg !11
  %22 = and i32 %21, 3, !dbg !11
  %23 = or i32 %22, 4, !dbg !11
  %24 = or i32 %22, 8, !dbg !11
  %25 = or i32 %22, 12, !dbg !11
  %26 = shl i32 %9, 1, !dbg !11
  %27 = and i32 %26, 14, !dbg !11
  %28 = or i32 %27, 1, !dbg !11
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #5, !dbg !12
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #5, !dbg !13
  %31 = add i32 %30, 1, !dbg !14
  %32 = shl i32 %29, 8, !dbg !15
  %33 = mul i32 %32, %31, !dbg !16
  %34 = or i32 %33, %11, !dbg !10
  %35 = or i32 %33, %13, !dbg !10
  %36 = or i32 %33, %14, !dbg !10
  %37 = or i32 %33, %15, !dbg !10
  %38 = or i32 %33, %16, !dbg !10
  %39 = or i32 %33, %17, !dbg !10
  %40 = or i32 %33, %18, !dbg !10
  %41 = or i32 %33, %19, !dbg !10
  %42 = or i32 %33, %20, !dbg !10
  %43 = or i32 %33, %urem, !dbg !10
  %44 = icmp slt i32 %34, %6, !dbg !17
  %45 = icmp slt i32 %35, %6, !dbg !17
  %46 = icmp slt i32 %36, %6, !dbg !17
  %47 = icmp slt i32 %37, %6, !dbg !17
  %48 = icmp slt i32 %38, %6, !dbg !17
  %49 = icmp slt i32 %39, %6, !dbg !17
  %50 = icmp slt i32 %40, %6, !dbg !17
  %51 = icmp slt i32 %41, %6, !dbg !17
  %52 = icmp slt i32 %42, %6, !dbg !17
  %53 = icmp slt i32 %43, %6, !dbg !17
  %54 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !18
  %55 = shl i32 %54, 4, !dbg !19
  %56 = or i32 %55, %22, !dbg !11
  %57 = or i32 %55, %23, !dbg !11
  %58 = or i32 %55, %24, !dbg !11
  %59 = or i32 %55, %25, !dbg !11
  %60 = or i32 %55, %27, !dbg !11
  %61 = or i32 %55, %28, !dbg !11
  %62 = icmp slt i32 %56, 50, !dbg !20
  %63 = icmp slt i32 %57, 50, !dbg !20
  %64 = icmp slt i32 %58, 50, !dbg !20
  %65 = icmp slt i32 %59, 50, !dbg !20
  %66 = icmp slt i32 %60, 50, !dbg !20
  %.frozen = freeze i32 %34
  %67 = sdiv i32 %.frozen, 128, !dbg !21
  %68 = sdiv i32 %35, 128, !dbg !21
  %69 = sdiv i32 %36, 128, !dbg !21
  %70 = sdiv i32 %37, 128, !dbg !21
  %71 = sdiv i32 %38, 128, !dbg !21
  %72 = sdiv i32 %39, 128, !dbg !21
  %73 = sdiv i32 %40, 128, !dbg !21
  %74 = sdiv i32 %41, 128, !dbg !21
  %75 = sdiv i32 %42, 128, !dbg !21
  %76 = mul i32 %67, 128
  %.decomposed = sub i32 %.frozen, %76
  %77 = sdiv i32 %35, 16, !dbg !22
  %78 = sdiv i32 %36, 16, !dbg !22
  %79 = sdiv i32 %37, 16, !dbg !22
  %80 = sdiv i32 %38, 16, !dbg !22
  %81 = sdiv i32 %39, 16, !dbg !22
  %82 = sdiv i32 %40, 16, !dbg !22
  %83 = sdiv i32 %41, 16, !dbg !22
  %84 = sdiv i32 %42, 16, !dbg !22
  %85 = srem i32 %77, 8, !dbg !23
  %86 = srem i32 %78, 8, !dbg !23
  %87 = srem i32 %79, 8, !dbg !23
  %88 = srem i32 %80, 8, !dbg !23
  %89 = srem i32 %81, 8, !dbg !23
  %90 = srem i32 %82, 8, !dbg !23
  %91 = srem i32 %83, 8, !dbg !23
  %92 = srem i32 %84, 8, !dbg !23
  %93 = srem i32 %43, 16, !dbg !24
  %94 = shl i32 %56, 7, !dbg !25
  %95 = shl i32 %57, 7, !dbg !25
  %96 = shl i32 %58, 7, !dbg !25
  %97 = shl i32 %59, 7, !dbg !25
  %98 = mul i32 %67, 6400, !dbg !26
  %99 = add i32 %98, %.decomposed, !dbg !27
  %100 = add i32 %99, %94, !dbg !28
  %101 = add i32 %99, %95, !dbg !28
  %102 = add i32 %99, %96, !dbg !28
  %103 = add i32 %99, %97, !dbg !28
  %104 = sext i32 %100 to i64, !dbg !29
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !29
  %106 = sext i32 %101 to i64, !dbg !29
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !29
  %108 = sext i32 %102 to i64, !dbg !29
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !29
  %110 = sext i32 %103 to i64, !dbg !29
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !29
  %112 = and i1 %62, %44, !dbg !30
  %113 = and i1 %63, %44, !dbg !30
  %114 = and i1 %64, %44, !dbg !30
  %115 = and i1 %65, %44, !dbg !30
  %116 = and i1 %66, %45, !dbg !30
  %117 = and i1 %66, %46, !dbg !30
  %118 = and i1 %66, %47, !dbg !30
  %119 = and i1 %66, %48, !dbg !30
  %120 = and i1 %66, %49, !dbg !30
  %121 = and i1 %66, %50, !dbg !30
  %122 = and i1 %66, %51, !dbg !30
  %123 = and i1 %66, %52, !dbg !30
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 %112) #5, !dbg !31
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !31
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !31
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !31
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !31
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %107, i1 %113) #5, !dbg !31
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !31
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !31
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !31
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !31
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %109, i1 %114) #5, !dbg !31
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !31
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !31
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !31
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !31
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %111, i1 %115) #5, !dbg !31
  %140 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !31
  %141 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !31
  %142 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !31
  %143 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !31
  %144 = mul nuw nsw i32 %11, 17, !dbg !31
  %145 = or i32 %144, %22, !dbg !31
  %146 = zext nneg i32 %145 to i64, !dbg !31
  %147 = getelementptr float, ptr addrspace(3) @global_smem, i64 %146, !dbg !31
  store i32 %125, ptr addrspace(3) %147, align 4, !dbg !31
  %148 = add nuw nsw i32 %144, 17, !dbg !31
  %149 = add nuw nsw i32 %148, %22, !dbg !31
  %150 = zext nneg i32 %149 to i64, !dbg !31
  %151 = getelementptr float, ptr addrspace(3) @global_smem, i64 %150, !dbg !31
  store i32 %126, ptr addrspace(3) %151, align 4, !dbg !31
  %152 = add nuw nsw i32 %144, 34, !dbg !31
  %153 = add nuw nsw i32 %152, %22, !dbg !31
  %154 = zext nneg i32 %153 to i64, !dbg !31
  %155 = getelementptr float, ptr addrspace(3) @global_smem, i64 %154, !dbg !31
  store i32 %127, ptr addrspace(3) %155, align 4, !dbg !31
  %156 = add nuw nsw i32 %144, 51, !dbg !31
  %157 = add nuw nsw i32 %156, %22, !dbg !31
  %158 = zext nneg i32 %157 to i64, !dbg !31
  %159 = getelementptr float, ptr addrspace(3) @global_smem, i64 %158, !dbg !31
  store i32 %128, ptr addrspace(3) %159, align 4, !dbg !31
  %160 = add nuw nsw i32 %144, %23, !dbg !31
  %161 = zext nneg i32 %160 to i64, !dbg !31
  %162 = getelementptr float, ptr addrspace(3) @global_smem, i64 %161, !dbg !31
  store i32 %130, ptr addrspace(3) %162, align 4, !dbg !31
  %163 = add nuw nsw i32 %148, %23, !dbg !31
  %164 = zext nneg i32 %163 to i64, !dbg !31
  %165 = getelementptr float, ptr addrspace(3) @global_smem, i64 %164, !dbg !31
  store i32 %131, ptr addrspace(3) %165, align 4, !dbg !31
  %166 = add nuw nsw i32 %152, %23, !dbg !31
  %167 = zext nneg i32 %166 to i64, !dbg !31
  %168 = getelementptr float, ptr addrspace(3) @global_smem, i64 %167, !dbg !31
  store i32 %132, ptr addrspace(3) %168, align 4, !dbg !31
  %169 = add nuw nsw i32 %156, %23, !dbg !31
  %170 = zext nneg i32 %169 to i64, !dbg !31
  %171 = getelementptr float, ptr addrspace(3) @global_smem, i64 %170, !dbg !31
  store i32 %133, ptr addrspace(3) %171, align 4, !dbg !31
  %172 = add nuw nsw i32 %144, %24, !dbg !31
  %173 = zext nneg i32 %172 to i64, !dbg !31
  %174 = getelementptr float, ptr addrspace(3) @global_smem, i64 %173, !dbg !31
  store i32 %135, ptr addrspace(3) %174, align 4, !dbg !31
  %175 = add nuw nsw i32 %148, %24, !dbg !31
  %176 = zext nneg i32 %175 to i64, !dbg !31
  %177 = getelementptr float, ptr addrspace(3) @global_smem, i64 %176, !dbg !31
  store i32 %136, ptr addrspace(3) %177, align 4, !dbg !31
  %178 = add nuw nsw i32 %152, %24, !dbg !31
  %179 = zext nneg i32 %178 to i64, !dbg !31
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i64 %179, !dbg !31
  store i32 %137, ptr addrspace(3) %180, align 4, !dbg !31
  %181 = add nuw nsw i32 %156, %24, !dbg !31
  %182 = zext nneg i32 %181 to i64, !dbg !31
  %183 = getelementptr float, ptr addrspace(3) @global_smem, i64 %182, !dbg !31
  store i32 %138, ptr addrspace(3) %183, align 4, !dbg !31
  %184 = add nuw nsw i32 %144, %25, !dbg !31
  %185 = zext nneg i32 %184 to i64, !dbg !31
  %186 = getelementptr float, ptr addrspace(3) @global_smem, i64 %185, !dbg !31
  store i32 %140, ptr addrspace(3) %186, align 4, !dbg !31
  %187 = add nuw nsw i32 %148, %25, !dbg !31
  %188 = zext nneg i32 %187 to i64, !dbg !31
  %189 = getelementptr float, ptr addrspace(3) @global_smem, i64 %188, !dbg !31
  store i32 %141, ptr addrspace(3) %189, align 4, !dbg !31
  %190 = add nuw nsw i32 %152, %25, !dbg !31
  %191 = zext nneg i32 %190 to i64, !dbg !31
  %192 = getelementptr float, ptr addrspace(3) @global_smem, i64 %191, !dbg !31
  store i32 %142, ptr addrspace(3) %192, align 4, !dbg !31
  %193 = add nuw nsw i32 %156, %25, !dbg !31
  %194 = zext nneg i32 %193 to i64, !dbg !31
  %195 = getelementptr float, ptr addrspace(3) @global_smem, i64 %194, !dbg !31
  store i32 %143, ptr addrspace(3) %195, align 4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %196 = mul nuw nsw i32 %13, 17, !dbg !31
  %197 = add nuw nsw i32 %196, %27, !dbg !31
  %198 = zext nneg i32 %197 to i64, !dbg !31
  %199 = getelementptr float, ptr addrspace(3) @global_smem, i64 %198, !dbg !31
  %200 = load <1 x float>, ptr addrspace(3) %199, align 4, !dbg !31
  %201 = add nuw nsw i32 %196, %28, !dbg !31
  %202 = zext nneg i32 %201 to i64, !dbg !31
  %203 = getelementptr float, ptr addrspace(3) @global_smem, i64 %202, !dbg !31
  %204 = load <1 x float>, ptr addrspace(3) %203, align 4, !dbg !31
  %205 = mul nuw nsw i32 %14, 17, !dbg !31
  %206 = add nuw nsw i32 %205, %27, !dbg !31
  %207 = zext nneg i32 %206 to i64, !dbg !31
  %208 = getelementptr float, ptr addrspace(3) @global_smem, i64 %207, !dbg !31
  %209 = load <1 x float>, ptr addrspace(3) %208, align 4, !dbg !31
  %210 = add nuw nsw i32 %205, %28, !dbg !31
  %211 = zext nneg i32 %210 to i64, !dbg !31
  %212 = getelementptr float, ptr addrspace(3) @global_smem, i64 %211, !dbg !31
  %213 = load <1 x float>, ptr addrspace(3) %212, align 4, !dbg !31
  %214 = mul nuw nsw i32 %15, 17, !dbg !31
  %215 = add nuw nsw i32 %214, %27, !dbg !31
  %216 = zext nneg i32 %215 to i64, !dbg !31
  %217 = getelementptr float, ptr addrspace(3) @global_smem, i64 %216, !dbg !31
  %218 = load <1 x float>, ptr addrspace(3) %217, align 4, !dbg !31
  %219 = add nuw nsw i32 %214, %28, !dbg !31
  %220 = zext nneg i32 %219 to i64, !dbg !31
  %221 = getelementptr float, ptr addrspace(3) @global_smem, i64 %220, !dbg !31
  %222 = load <1 x float>, ptr addrspace(3) %221, align 4, !dbg !31
  %223 = mul nuw nsw i32 %16, 17, !dbg !31
  %224 = add nuw nsw i32 %223, %27, !dbg !31
  %225 = zext nneg i32 %224 to i64, !dbg !31
  %226 = getelementptr float, ptr addrspace(3) @global_smem, i64 %225, !dbg !31
  %227 = load <1 x float>, ptr addrspace(3) %226, align 4, !dbg !31
  %228 = add nuw nsw i32 %223, %28, !dbg !31
  %229 = zext nneg i32 %228 to i64, !dbg !31
  %230 = getelementptr float, ptr addrspace(3) @global_smem, i64 %229, !dbg !31
  %231 = load <1 x float>, ptr addrspace(3) %230, align 4, !dbg !31
  %232 = mul nuw nsw i32 %17, 17, !dbg !31
  %233 = add nuw nsw i32 %232, %27, !dbg !31
  %234 = zext nneg i32 %233 to i64, !dbg !31
  %235 = getelementptr float, ptr addrspace(3) @global_smem, i64 %234, !dbg !31
  %236 = load <1 x float>, ptr addrspace(3) %235, align 4, !dbg !31
  %237 = add nuw nsw i32 %232, %28, !dbg !31
  %238 = zext nneg i32 %237 to i64, !dbg !31
  %239 = getelementptr float, ptr addrspace(3) @global_smem, i64 %238, !dbg !31
  %240 = load <1 x float>, ptr addrspace(3) %239, align 4, !dbg !31
  %241 = mul nuw nsw i32 %18, 17, !dbg !31
  %242 = add nuw nsw i32 %241, %27, !dbg !31
  %243 = zext nneg i32 %242 to i64, !dbg !31
  %244 = getelementptr float, ptr addrspace(3) @global_smem, i64 %243, !dbg !31
  %245 = load <1 x float>, ptr addrspace(3) %244, align 4, !dbg !31
  %246 = add nuw nsw i32 %241, %28, !dbg !31
  %247 = zext nneg i32 %246 to i64, !dbg !31
  %248 = getelementptr float, ptr addrspace(3) @global_smem, i64 %247, !dbg !31
  %249 = load <1 x float>, ptr addrspace(3) %248, align 4, !dbg !31
  %250 = mul nuw nsw i32 %19, 17, !dbg !31
  %251 = add nuw nsw i32 %250, %27, !dbg !31
  %252 = zext nneg i32 %251 to i64, !dbg !31
  %253 = getelementptr float, ptr addrspace(3) @global_smem, i64 %252, !dbg !31
  %254 = load <1 x float>, ptr addrspace(3) %253, align 4, !dbg !31
  %255 = add nuw nsw i32 %250, %28, !dbg !31
  %256 = zext nneg i32 %255 to i64, !dbg !31
  %257 = getelementptr float, ptr addrspace(3) @global_smem, i64 %256, !dbg !31
  %258 = load <1 x float>, ptr addrspace(3) %257, align 4, !dbg !31
  %259 = mul nuw nsw i32 %20, 17, !dbg !31
  %260 = add nuw nsw i32 %259, %27, !dbg !31
  %261 = zext nneg i32 %260 to i64, !dbg !31
  %262 = getelementptr float, ptr addrspace(3) @global_smem, i64 %261, !dbg !31
  %263 = load <1 x float>, ptr addrspace(3) %262, align 4, !dbg !31
  %264 = add nuw nsw i32 %259, %28, !dbg !31
  %265 = zext nneg i32 %264 to i64, !dbg !31
  %266 = getelementptr float, ptr addrspace(3) @global_smem, i64 %265, !dbg !31
  %267 = load <1 x float>, ptr addrspace(3) %266, align 4, !dbg !31
  %268 = shl i32 %60, 3, !dbg !32
  %269 = shl i32 %61, 3, !dbg !32
  %270 = mul i32 %68, 400, !dbg !33
  %271 = mul i32 %69, 400, !dbg !33
  %272 = mul i32 %70, 400, !dbg !33
  %273 = mul i32 %71, 400, !dbg !33
  %274 = mul i32 %72, 400, !dbg !33
  %275 = mul i32 %73, 400, !dbg !33
  %276 = mul i32 %74, 400, !dbg !33
  %277 = mul i32 %75, 400, !dbg !33
  %278 = add i32 %270, %85, !dbg !34
  %279 = add i32 %278, %268, !dbg !35
  %280 = add i32 %278, %269, !dbg !35
  %281 = add i32 %271, %86, !dbg !34
  %282 = add i32 %281, %268, !dbg !35
  %283 = add i32 %281, %269, !dbg !35
  %284 = add i32 %272, %87, !dbg !34
  %285 = add i32 %284, %268, !dbg !35
  %286 = add i32 %284, %269, !dbg !35
  %287 = add i32 %273, %88, !dbg !34
  %288 = add i32 %287, %268, !dbg !35
  %289 = add i32 %287, %269, !dbg !35
  %290 = add i32 %274, %89, !dbg !34
  %291 = add i32 %290, %268, !dbg !35
  %292 = add i32 %290, %269, !dbg !35
  %293 = add i32 %275, %90, !dbg !34
  %294 = add i32 %293, %268, !dbg !35
  %295 = add i32 %293, %269, !dbg !35
  %296 = add i32 %276, %91, !dbg !34
  %297 = add i32 %296, %268, !dbg !35
  %298 = add i32 %296, %269, !dbg !35
  %299 = add i32 %277, %92, !dbg !34
  %300 = add i32 %299, %268, !dbg !35
  %301 = add i32 %299, %269, !dbg !35
  %302 = sext i32 %279 to i64, !dbg !36
  %303 = getelementptr float, ptr addrspace(1) %1, i64 %302, !dbg !36
  %304 = sext i32 %280 to i64, !dbg !36
  %305 = getelementptr float, ptr addrspace(1) %1, i64 %304, !dbg !36
  %306 = sext i32 %282 to i64, !dbg !36
  %307 = getelementptr float, ptr addrspace(1) %1, i64 %306, !dbg !36
  %308 = sext i32 %283 to i64, !dbg !36
  %309 = getelementptr float, ptr addrspace(1) %1, i64 %308, !dbg !36
  %310 = sext i32 %285 to i64, !dbg !36
  %311 = getelementptr float, ptr addrspace(1) %1, i64 %310, !dbg !36
  %312 = sext i32 %286 to i64, !dbg !36
  %313 = getelementptr float, ptr addrspace(1) %1, i64 %312, !dbg !36
  %314 = sext i32 %288 to i64, !dbg !36
  %315 = getelementptr float, ptr addrspace(1) %1, i64 %314, !dbg !36
  %316 = sext i32 %289 to i64, !dbg !36
  %317 = getelementptr float, ptr addrspace(1) %1, i64 %316, !dbg !36
  %318 = sext i32 %291 to i64, !dbg !36
  %319 = getelementptr float, ptr addrspace(1) %1, i64 %318, !dbg !36
  %320 = sext i32 %292 to i64, !dbg !36
  %321 = getelementptr float, ptr addrspace(1) %1, i64 %320, !dbg !36
  %322 = sext i32 %294 to i64, !dbg !36
  %323 = getelementptr float, ptr addrspace(1) %1, i64 %322, !dbg !36
  %324 = sext i32 %295 to i64, !dbg !36
  %325 = getelementptr float, ptr addrspace(1) %1, i64 %324, !dbg !36
  %326 = sext i32 %297 to i64, !dbg !36
  %327 = getelementptr float, ptr addrspace(1) %1, i64 %326, !dbg !36
  %328 = sext i32 %298 to i64, !dbg !36
  %329 = getelementptr float, ptr addrspace(1) %1, i64 %328, !dbg !36
  %330 = sext i32 %300 to i64, !dbg !36
  %331 = getelementptr float, ptr addrspace(1) %1, i64 %330, !dbg !36
  %332 = sext i32 %301 to i64, !dbg !36
  %333 = getelementptr float, ptr addrspace(1) %1, i64 %332, !dbg !36
  %334 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %303, i1 %116) #5, !dbg !37
  %335 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %305, i1 %116) #5, !dbg !37
  %336 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %307, i1 %117) #5, !dbg !37
  %337 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %309, i1 %117) #5, !dbg !37
  %338 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %311, i1 %118) #5, !dbg !37
  %339 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %313, i1 %118) #5, !dbg !37
  %340 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %315, i1 %119) #5, !dbg !37
  %341 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %317, i1 %119) #5, !dbg !37
  %342 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %319, i1 %120) #5, !dbg !37
  %343 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %321, i1 %120) #5, !dbg !37
  %344 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %323, i1 %121) #5, !dbg !37
  %345 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %325, i1 %121) #5, !dbg !37
  %346 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %327, i1 %122) #5, !dbg !37
  %347 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %329, i1 %122) #5, !dbg !37
  %348 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %331, i1 %123) #5, !dbg !37
  %349 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %333, i1 %123) #5, !dbg !37
  %350 = getelementptr float, ptr addrspace(1) %2, i64 %302, !dbg !38
  %351 = getelementptr float, ptr addrspace(1) %2, i64 %304, !dbg !38
  %352 = getelementptr float, ptr addrspace(1) %2, i64 %306, !dbg !38
  %353 = getelementptr float, ptr addrspace(1) %2, i64 %308, !dbg !38
  %354 = getelementptr float, ptr addrspace(1) %2, i64 %310, !dbg !38
  %355 = getelementptr float, ptr addrspace(1) %2, i64 %312, !dbg !38
  %356 = getelementptr float, ptr addrspace(1) %2, i64 %314, !dbg !38
  %357 = getelementptr float, ptr addrspace(1) %2, i64 %316, !dbg !38
  %358 = getelementptr float, ptr addrspace(1) %2, i64 %318, !dbg !38
  %359 = getelementptr float, ptr addrspace(1) %2, i64 %320, !dbg !38
  %360 = getelementptr float, ptr addrspace(1) %2, i64 %322, !dbg !38
  %361 = getelementptr float, ptr addrspace(1) %2, i64 %324, !dbg !38
  %362 = getelementptr float, ptr addrspace(1) %2, i64 %326, !dbg !38
  %363 = getelementptr float, ptr addrspace(1) %2, i64 %328, !dbg !38
  %364 = getelementptr float, ptr addrspace(1) %2, i64 %330, !dbg !38
  %365 = getelementptr float, ptr addrspace(1) %2, i64 %332, !dbg !38
  %366 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %350, i1 %116) #5, !dbg !39
  %367 = bitcast i32 %366 to float, !dbg !39
  %368 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %351, i1 %116) #5, !dbg !39
  %369 = bitcast i32 %368 to float, !dbg !39
  %370 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %352, i1 %117) #5, !dbg !39
  %371 = bitcast i32 %370 to float, !dbg !39
  %372 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %353, i1 %117) #5, !dbg !39
  %373 = bitcast i32 %372 to float, !dbg !39
  %374 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %354, i1 %118) #5, !dbg !39
  %375 = bitcast i32 %374 to float, !dbg !39
  %376 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %355, i1 %118) #5, !dbg !39
  %377 = bitcast i32 %376 to float, !dbg !39
  %378 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %356, i1 %119) #5, !dbg !39
  %379 = bitcast i32 %378 to float, !dbg !39
  %380 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %357, i1 %119) #5, !dbg !39
  %381 = bitcast i32 %380 to float, !dbg !39
  %382 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %358, i1 %120) #5, !dbg !39
  %383 = bitcast i32 %382 to float, !dbg !39
  %384 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %359, i1 %120) #5, !dbg !39
  %385 = bitcast i32 %384 to float, !dbg !39
  %386 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %360, i1 %121) #5, !dbg !39
  %387 = bitcast i32 %386 to float, !dbg !39
  %388 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %361, i1 %121) #5, !dbg !39
  %389 = bitcast i32 %388 to float, !dbg !39
  %390 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %362, i1 %122) #5, !dbg !39
  %391 = bitcast i32 %390 to float, !dbg !39
  %392 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %363, i1 %122) #5, !dbg !39
  %393 = bitcast i32 %392 to float, !dbg !39
  %394 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %364, i1 %123) #5, !dbg !39
  %395 = bitcast i32 %394 to float, !dbg !39
  %396 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %365, i1 %123) #5, !dbg !39
  %397 = bitcast i32 %396 to float, !dbg !39
  %398 = sext i32 %93 to i64, !dbg !40
  %399 = getelementptr float, ptr addrspace(1) %3, i64 %398, !dbg !40
  %400 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %399, i1 %53) #5, !dbg !41
  %401 = getelementptr float, ptr addrspace(1) %4, i64 %398, !dbg !42
  %402 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %401, i1 %53) #5, !dbg !43
  %403 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %367, float 1.600000e+01) #5, !dbg !44
  %404 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %369, float 1.600000e+01) #5, !dbg !44
  %405 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %371, float 1.600000e+01) #5, !dbg !44
  %406 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %373, float 1.600000e+01) #5, !dbg !44
  %407 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %375, float 1.600000e+01) #5, !dbg !44
  %408 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %377, float 1.600000e+01) #5, !dbg !44
  %409 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %379, float 1.600000e+01) #5, !dbg !44
  %410 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %381, float 1.600000e+01) #5, !dbg !44
  %411 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %383, float 1.600000e+01) #5, !dbg !44
  %412 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %385, float 1.600000e+01) #5, !dbg !44
  %413 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %387, float 1.600000e+01) #5, !dbg !44
  %414 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %389, float 1.600000e+01) #5, !dbg !44
  %415 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %391, float 1.600000e+01) #5, !dbg !44
  %416 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %393, float 1.600000e+01) #5, !dbg !44
  %417 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %395, float 1.600000e+01) #5, !dbg !44
  %418 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %397, float 1.600000e+01) #5, !dbg !44
  %419 = fadd float %403, 0x3EE4F8B580000000, !dbg !45
  %420 = fadd float %404, 0x3EE4F8B580000000, !dbg !45
  %421 = fadd float %405, 0x3EE4F8B580000000, !dbg !45
  %422 = fadd float %406, 0x3EE4F8B580000000, !dbg !45
  %423 = fadd float %407, 0x3EE4F8B580000000, !dbg !45
  %424 = fadd float %408, 0x3EE4F8B580000000, !dbg !45
  %425 = fadd float %409, 0x3EE4F8B580000000, !dbg !45
  %426 = fadd float %410, 0x3EE4F8B580000000, !dbg !45
  %427 = fadd float %411, 0x3EE4F8B580000000, !dbg !45
  %428 = fadd float %412, 0x3EE4F8B580000000, !dbg !45
  %429 = fadd float %413, 0x3EE4F8B580000000, !dbg !45
  %430 = fadd float %414, 0x3EE4F8B580000000, !dbg !45
  %431 = fadd float %415, 0x3EE4F8B580000000, !dbg !45
  %432 = fadd float %416, 0x3EE4F8B580000000, !dbg !45
  %433 = fadd float %417, 0x3EE4F8B580000000, !dbg !45
  %434 = fadd float %418, 0x3EE4F8B580000000, !dbg !45
  %435 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i = icmp eq i32 %435, 0, !dbg !46
  br i1 %.not.i, label %438, label %436, !dbg !46

436:                                              ; preds = %8
  %437 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %419), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

438:                                              ; preds = %8
  %439 = tail call float @llvm.nvvm.rsqrt.approx.f(float %419), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

__nv_rsqrtf.exit:                                 ; preds = %436, %438
  %.0.i = phi float [ %437, %436 ], [ %439, %438 ], !dbg !46
  %440 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i1 = icmp eq i32 %440, 0, !dbg !46
  br i1 %.not.i1, label %443, label %441, !dbg !46

441:                                              ; preds = %__nv_rsqrtf.exit
  %442 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %420), !dbg !46
  br label %__nv_rsqrtf.exit3, !dbg !46

443:                                              ; preds = %__nv_rsqrtf.exit
  %444 = tail call float @llvm.nvvm.rsqrt.approx.f(float %420), !dbg !46
  br label %__nv_rsqrtf.exit3, !dbg !46

__nv_rsqrtf.exit3:                                ; preds = %441, %443
  %.0.i2 = phi float [ %442, %441 ], [ %444, %443 ], !dbg !46
  %445 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i4 = icmp eq i32 %445, 0, !dbg !46
  br i1 %.not.i4, label %448, label %446, !dbg !46

446:                                              ; preds = %__nv_rsqrtf.exit3
  %447 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %421), !dbg !46
  br label %__nv_rsqrtf.exit6, !dbg !46

448:                                              ; preds = %__nv_rsqrtf.exit3
  %449 = tail call float @llvm.nvvm.rsqrt.approx.f(float %421), !dbg !46
  br label %__nv_rsqrtf.exit6, !dbg !46

__nv_rsqrtf.exit6:                                ; preds = %446, %448
  %.0.i5 = phi float [ %447, %446 ], [ %449, %448 ], !dbg !46
  %450 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i7 = icmp eq i32 %450, 0, !dbg !46
  br i1 %.not.i7, label %453, label %451, !dbg !46

451:                                              ; preds = %__nv_rsqrtf.exit6
  %452 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %422), !dbg !46
  br label %__nv_rsqrtf.exit9, !dbg !46

453:                                              ; preds = %__nv_rsqrtf.exit6
  %454 = tail call float @llvm.nvvm.rsqrt.approx.f(float %422), !dbg !46
  br label %__nv_rsqrtf.exit9, !dbg !46

__nv_rsqrtf.exit9:                                ; preds = %451, %453
  %.0.i8 = phi float [ %452, %451 ], [ %454, %453 ], !dbg !46
  %455 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i10 = icmp eq i32 %455, 0, !dbg !46
  br i1 %.not.i10, label %458, label %456, !dbg !46

456:                                              ; preds = %__nv_rsqrtf.exit9
  %457 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %423), !dbg !46
  br label %__nv_rsqrtf.exit12, !dbg !46

458:                                              ; preds = %__nv_rsqrtf.exit9
  %459 = tail call float @llvm.nvvm.rsqrt.approx.f(float %423), !dbg !46
  br label %__nv_rsqrtf.exit12, !dbg !46

__nv_rsqrtf.exit12:                               ; preds = %456, %458
  %.0.i11 = phi float [ %457, %456 ], [ %459, %458 ], !dbg !46
  %460 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i13 = icmp eq i32 %460, 0, !dbg !46
  br i1 %.not.i13, label %463, label %461, !dbg !46

461:                                              ; preds = %__nv_rsqrtf.exit12
  %462 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %424), !dbg !46
  br label %__nv_rsqrtf.exit15, !dbg !46

463:                                              ; preds = %__nv_rsqrtf.exit12
  %464 = tail call float @llvm.nvvm.rsqrt.approx.f(float %424), !dbg !46
  br label %__nv_rsqrtf.exit15, !dbg !46

__nv_rsqrtf.exit15:                               ; preds = %461, %463
  %.0.i14 = phi float [ %462, %461 ], [ %464, %463 ], !dbg !46
  %465 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i16 = icmp eq i32 %465, 0, !dbg !46
  br i1 %.not.i16, label %468, label %466, !dbg !46

466:                                              ; preds = %__nv_rsqrtf.exit15
  %467 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %425), !dbg !46
  br label %__nv_rsqrtf.exit18, !dbg !46

468:                                              ; preds = %__nv_rsqrtf.exit15
  %469 = tail call float @llvm.nvvm.rsqrt.approx.f(float %425), !dbg !46
  br label %__nv_rsqrtf.exit18, !dbg !46

__nv_rsqrtf.exit18:                               ; preds = %466, %468
  %.0.i17 = phi float [ %467, %466 ], [ %469, %468 ], !dbg !46
  %470 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i19 = icmp eq i32 %470, 0, !dbg !46
  br i1 %.not.i19, label %473, label %471, !dbg !46

471:                                              ; preds = %__nv_rsqrtf.exit18
  %472 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %426), !dbg !46
  br label %__nv_rsqrtf.exit21, !dbg !46

473:                                              ; preds = %__nv_rsqrtf.exit18
  %474 = tail call float @llvm.nvvm.rsqrt.approx.f(float %426), !dbg !46
  br label %__nv_rsqrtf.exit21, !dbg !46

__nv_rsqrtf.exit21:                               ; preds = %471, %473
  %.0.i20 = phi float [ %472, %471 ], [ %474, %473 ], !dbg !46
  %475 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i22 = icmp eq i32 %475, 0, !dbg !46
  br i1 %.not.i22, label %478, label %476, !dbg !46

476:                                              ; preds = %__nv_rsqrtf.exit21
  %477 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %427), !dbg !46
  br label %__nv_rsqrtf.exit24, !dbg !46

478:                                              ; preds = %__nv_rsqrtf.exit21
  %479 = tail call float @llvm.nvvm.rsqrt.approx.f(float %427), !dbg !46
  br label %__nv_rsqrtf.exit24, !dbg !46

__nv_rsqrtf.exit24:                               ; preds = %476, %478
  %.0.i23 = phi float [ %477, %476 ], [ %479, %478 ], !dbg !46
  %480 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i25 = icmp eq i32 %480, 0, !dbg !46
  br i1 %.not.i25, label %483, label %481, !dbg !46

481:                                              ; preds = %__nv_rsqrtf.exit24
  %482 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %428), !dbg !46
  br label %__nv_rsqrtf.exit27, !dbg !46

483:                                              ; preds = %__nv_rsqrtf.exit24
  %484 = tail call float @llvm.nvvm.rsqrt.approx.f(float %428), !dbg !46
  br label %__nv_rsqrtf.exit27, !dbg !46

__nv_rsqrtf.exit27:                               ; preds = %481, %483
  %.0.i26 = phi float [ %482, %481 ], [ %484, %483 ], !dbg !46
  %485 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i28 = icmp eq i32 %485, 0, !dbg !46
  br i1 %.not.i28, label %488, label %486, !dbg !46

486:                                              ; preds = %__nv_rsqrtf.exit27
  %487 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %429), !dbg !46
  br label %__nv_rsqrtf.exit30, !dbg !46

488:                                              ; preds = %__nv_rsqrtf.exit27
  %489 = tail call float @llvm.nvvm.rsqrt.approx.f(float %429), !dbg !46
  br label %__nv_rsqrtf.exit30, !dbg !46

__nv_rsqrtf.exit30:                               ; preds = %486, %488
  %.0.i29 = phi float [ %487, %486 ], [ %489, %488 ], !dbg !46
  %490 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i31 = icmp eq i32 %490, 0, !dbg !46
  br i1 %.not.i31, label %493, label %491, !dbg !46

491:                                              ; preds = %__nv_rsqrtf.exit30
  %492 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %430), !dbg !46
  br label %__nv_rsqrtf.exit33, !dbg !46

493:                                              ; preds = %__nv_rsqrtf.exit30
  %494 = tail call float @llvm.nvvm.rsqrt.approx.f(float %430), !dbg !46
  br label %__nv_rsqrtf.exit33, !dbg !46

__nv_rsqrtf.exit33:                               ; preds = %491, %493
  %.0.i32 = phi float [ %492, %491 ], [ %494, %493 ], !dbg !46
  %495 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i34 = icmp eq i32 %495, 0, !dbg !46
  br i1 %.not.i34, label %498, label %496, !dbg !46

496:                                              ; preds = %__nv_rsqrtf.exit33
  %497 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %431), !dbg !46
  br label %__nv_rsqrtf.exit36, !dbg !46

498:                                              ; preds = %__nv_rsqrtf.exit33
  %499 = tail call float @llvm.nvvm.rsqrt.approx.f(float %431), !dbg !46
  br label %__nv_rsqrtf.exit36, !dbg !46

__nv_rsqrtf.exit36:                               ; preds = %496, %498
  %.0.i35 = phi float [ %497, %496 ], [ %499, %498 ], !dbg !46
  %500 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i37 = icmp eq i32 %500, 0, !dbg !46
  br i1 %.not.i37, label %503, label %501, !dbg !46

501:                                              ; preds = %__nv_rsqrtf.exit36
  %502 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %432), !dbg !46
  br label %__nv_rsqrtf.exit39, !dbg !46

503:                                              ; preds = %__nv_rsqrtf.exit36
  %504 = tail call float @llvm.nvvm.rsqrt.approx.f(float %432), !dbg !46
  br label %__nv_rsqrtf.exit39, !dbg !46

__nv_rsqrtf.exit39:                               ; preds = %501, %503
  %.0.i38 = phi float [ %502, %501 ], [ %504, %503 ], !dbg !46
  %505 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i40 = icmp eq i32 %505, 0, !dbg !46
  br i1 %.not.i40, label %508, label %506, !dbg !46

506:                                              ; preds = %__nv_rsqrtf.exit39
  %507 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %433), !dbg !46
  br label %__nv_rsqrtf.exit42, !dbg !46

508:                                              ; preds = %__nv_rsqrtf.exit39
  %509 = tail call float @llvm.nvvm.rsqrt.approx.f(float %433), !dbg !46
  br label %__nv_rsqrtf.exit42, !dbg !46

__nv_rsqrtf.exit42:                               ; preds = %506, %508
  %.0.i41 = phi float [ %507, %506 ], [ %509, %508 ], !dbg !46
  %510 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i43 = icmp eq i32 %510, 0, !dbg !46
  br i1 %.not.i43, label %513, label %511, !dbg !46

511:                                              ; preds = %__nv_rsqrtf.exit42
  %512 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %434), !dbg !46
  br label %__nv_rsqrtf.exit45, !dbg !46

513:                                              ; preds = %__nv_rsqrtf.exit42
  %514 = tail call float @llvm.nvvm.rsqrt.approx.f(float %434), !dbg !46
  br label %__nv_rsqrtf.exit45, !dbg !46

__nv_rsqrtf.exit45:                               ; preds = %511, %513
  %.0.i44 = phi float [ %512, %511 ], [ %514, %513 ], !dbg !46
  %515 = extractelement <1 x float> %267, i64 0, !dbg !31
  %516 = bitcast i32 %349 to float, !dbg !37
  %517 = fsub float %515, %516, !dbg !47
  %518 = extractelement <1 x float> %263, i64 0, !dbg !31
  %519 = bitcast i32 %348 to float, !dbg !37
  %520 = fsub float %518, %519, !dbg !47
  %521 = extractelement <1 x float> %258, i64 0, !dbg !31
  %522 = bitcast i32 %347 to float, !dbg !37
  %523 = fsub float %521, %522, !dbg !47
  %524 = extractelement <1 x float> %254, i64 0, !dbg !31
  %525 = bitcast i32 %346 to float, !dbg !37
  %526 = fsub float %524, %525, !dbg !47
  %527 = extractelement <1 x float> %249, i64 0, !dbg !31
  %528 = bitcast i32 %345 to float, !dbg !37
  %529 = fsub float %527, %528, !dbg !47
  %530 = extractelement <1 x float> %245, i64 0, !dbg !31
  %531 = bitcast i32 %344 to float, !dbg !37
  %532 = fsub float %530, %531, !dbg !47
  %533 = extractelement <1 x float> %240, i64 0, !dbg !31
  %534 = bitcast i32 %343 to float, !dbg !37
  %535 = fsub float %533, %534, !dbg !47
  %536 = extractelement <1 x float> %236, i64 0, !dbg !31
  %537 = bitcast i32 %342 to float, !dbg !37
  %538 = fsub float %536, %537, !dbg !47
  %539 = extractelement <1 x float> %231, i64 0, !dbg !31
  %540 = bitcast i32 %341 to float, !dbg !37
  %541 = fsub float %539, %540, !dbg !47
  %542 = extractelement <1 x float> %227, i64 0, !dbg !31
  %543 = bitcast i32 %340 to float, !dbg !37
  %544 = fsub float %542, %543, !dbg !47
  %545 = extractelement <1 x float> %222, i64 0, !dbg !31
  %546 = bitcast i32 %339 to float, !dbg !37
  %547 = fsub float %545, %546, !dbg !47
  %548 = extractelement <1 x float> %218, i64 0, !dbg !31
  %549 = bitcast i32 %338 to float, !dbg !37
  %550 = fsub float %548, %549, !dbg !47
  %551 = extractelement <1 x float> %213, i64 0, !dbg !31
  %552 = bitcast i32 %337 to float, !dbg !37
  %553 = fsub float %551, %552, !dbg !47
  %554 = extractelement <1 x float> %209, i64 0, !dbg !31
  %555 = bitcast i32 %336 to float, !dbg !37
  %556 = fsub float %554, %555, !dbg !47
  %557 = extractelement <1 x float> %204, i64 0, !dbg !31
  %558 = bitcast i32 %335 to float, !dbg !37
  %559 = fsub float %557, %558, !dbg !47
  %560 = extractelement <1 x float> %200, i64 0, !dbg !31
  %561 = bitcast i32 %334 to float, !dbg !37
  %562 = fsub float %560, %561, !dbg !47
  %563 = bitcast i32 %402 to float, !dbg !43
  %564 = bitcast i32 %400 to float, !dbg !41
  %565 = fmul float %562, %.0.i, !dbg !48
  %566 = fmul float %559, %.0.i2, !dbg !48
  %567 = fmul float %556, %.0.i5, !dbg !48
  %568 = fmul float %553, %.0.i8, !dbg !48
  %569 = fmul float %550, %.0.i11, !dbg !48
  %570 = fmul float %547, %.0.i14, !dbg !48
  %571 = fmul float %544, %.0.i17, !dbg !48
  %572 = fmul float %541, %.0.i20, !dbg !48
  %573 = fmul float %538, %.0.i23, !dbg !48
  %574 = fmul float %535, %.0.i26, !dbg !48
  %575 = fmul float %532, %.0.i29, !dbg !48
  %576 = fmul float %529, %.0.i32, !dbg !48
  %577 = fmul float %526, %.0.i35, !dbg !48
  %578 = fmul float %523, %.0.i38, !dbg !48
  %579 = fmul float %520, %.0.i41, !dbg !48
  %580 = fmul float %517, %.0.i44, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %581 = mul nuw nsw i32 %27, 257, !dbg !48
  %582 = add nuw nsw i32 %581, %13, !dbg !48
  %583 = zext nneg i32 %582 to i64, !dbg !48
  %584 = getelementptr float, ptr addrspace(3) @global_smem, i64 %583, !dbg !48
  %585 = insertelement <1 x float> undef, float %565, i64 0, !dbg !48
  store <1 x float> %585, ptr addrspace(3) %584, align 4, !dbg !48
  %586 = mul nuw nsw i32 %28, 257, !dbg !48
  %587 = add nuw nsw i32 %586, %13, !dbg !48
  %588 = zext nneg i32 %587 to i64, !dbg !48
  %589 = getelementptr float, ptr addrspace(3) @global_smem, i64 %588, !dbg !48
  %590 = insertelement <1 x float> undef, float %566, i64 0, !dbg !48
  store <1 x float> %590, ptr addrspace(3) %589, align 4, !dbg !48
  %591 = add nuw nsw i32 %581, %14, !dbg !48
  %592 = zext nneg i32 %591 to i64, !dbg !48
  %593 = getelementptr float, ptr addrspace(3) @global_smem, i64 %592, !dbg !48
  %594 = insertelement <1 x float> undef, float %567, i64 0, !dbg !48
  store <1 x float> %594, ptr addrspace(3) %593, align 4, !dbg !48
  %595 = add nuw nsw i32 %586, %14, !dbg !48
  %596 = zext nneg i32 %595 to i64, !dbg !48
  %597 = getelementptr float, ptr addrspace(3) @global_smem, i64 %596, !dbg !48
  %598 = insertelement <1 x float> undef, float %568, i64 0, !dbg !48
  store <1 x float> %598, ptr addrspace(3) %597, align 4, !dbg !48
  %599 = add nuw nsw i32 %581, %15, !dbg !48
  %600 = zext nneg i32 %599 to i64, !dbg !48
  %601 = getelementptr float, ptr addrspace(3) @global_smem, i64 %600, !dbg !48
  %602 = insertelement <1 x float> undef, float %569, i64 0, !dbg !48
  store <1 x float> %602, ptr addrspace(3) %601, align 4, !dbg !48
  %603 = add nuw nsw i32 %586, %15, !dbg !48
  %604 = zext nneg i32 %603 to i64, !dbg !48
  %605 = getelementptr float, ptr addrspace(3) @global_smem, i64 %604, !dbg !48
  %606 = insertelement <1 x float> undef, float %570, i64 0, !dbg !48
  store <1 x float> %606, ptr addrspace(3) %605, align 4, !dbg !48
  %607 = add nuw nsw i32 %581, %16, !dbg !48
  %608 = zext nneg i32 %607 to i64, !dbg !48
  %609 = getelementptr float, ptr addrspace(3) @global_smem, i64 %608, !dbg !48
  %610 = insertelement <1 x float> undef, float %571, i64 0, !dbg !48
  store <1 x float> %610, ptr addrspace(3) %609, align 4, !dbg !48
  %611 = add nuw nsw i32 %586, %16, !dbg !48
  %612 = zext nneg i32 %611 to i64, !dbg !48
  %613 = getelementptr float, ptr addrspace(3) @global_smem, i64 %612, !dbg !48
  %614 = insertelement <1 x float> undef, float %572, i64 0, !dbg !48
  store <1 x float> %614, ptr addrspace(3) %613, align 4, !dbg !48
  %615 = add nuw nsw i32 %581, %17, !dbg !48
  %616 = zext nneg i32 %615 to i64, !dbg !48
  %617 = getelementptr float, ptr addrspace(3) @global_smem, i64 %616, !dbg !48
  %618 = insertelement <1 x float> undef, float %573, i64 0, !dbg !48
  store <1 x float> %618, ptr addrspace(3) %617, align 4, !dbg !48
  %619 = add nuw nsw i32 %586, %17, !dbg !48
  %620 = zext nneg i32 %619 to i64, !dbg !48
  %621 = getelementptr float, ptr addrspace(3) @global_smem, i64 %620, !dbg !48
  %622 = insertelement <1 x float> undef, float %574, i64 0, !dbg !48
  store <1 x float> %622, ptr addrspace(3) %621, align 4, !dbg !48
  %623 = add nuw nsw i32 %581, %18, !dbg !48
  %624 = zext nneg i32 %623 to i64, !dbg !48
  %625 = getelementptr float, ptr addrspace(3) @global_smem, i64 %624, !dbg !48
  %626 = insertelement <1 x float> undef, float %575, i64 0, !dbg !48
  store <1 x float> %626, ptr addrspace(3) %625, align 4, !dbg !48
  %627 = add nuw nsw i32 %586, %18, !dbg !48
  %628 = zext nneg i32 %627 to i64, !dbg !48
  %629 = getelementptr float, ptr addrspace(3) @global_smem, i64 %628, !dbg !48
  %630 = insertelement <1 x float> undef, float %576, i64 0, !dbg !48
  store <1 x float> %630, ptr addrspace(3) %629, align 4, !dbg !48
  %631 = add nuw nsw i32 %581, %19, !dbg !48
  %632 = zext nneg i32 %631 to i64, !dbg !48
  %633 = getelementptr float, ptr addrspace(3) @global_smem, i64 %632, !dbg !48
  %634 = insertelement <1 x float> undef, float %577, i64 0, !dbg !48
  store <1 x float> %634, ptr addrspace(3) %633, align 4, !dbg !48
  %635 = add nuw nsw i32 %586, %19, !dbg !48
  %636 = zext nneg i32 %635 to i64, !dbg !48
  %637 = getelementptr float, ptr addrspace(3) @global_smem, i64 %636, !dbg !48
  %638 = insertelement <1 x float> undef, float %578, i64 0, !dbg !48
  store <1 x float> %638, ptr addrspace(3) %637, align 4, !dbg !48
  %639 = add nuw nsw i32 %581, %20, !dbg !48
  %640 = zext nneg i32 %639 to i64, !dbg !48
  %641 = getelementptr float, ptr addrspace(3) @global_smem, i64 %640, !dbg !48
  %642 = insertelement <1 x float> undef, float %579, i64 0, !dbg !48
  store <1 x float> %642, ptr addrspace(3) %641, align 4, !dbg !48
  %643 = add nuw nsw i32 %586, %20, !dbg !48
  %644 = zext nneg i32 %643 to i64, !dbg !48
  %645 = getelementptr float, ptr addrspace(3) @global_smem, i64 %644, !dbg !48
  %646 = insertelement <1 x float> undef, float %580, i64 0, !dbg !48
  store <1 x float> %646, ptr addrspace(3) %645, align 4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %647 = zext nneg i32 %urem to i64, !dbg !48
  %648 = getelementptr float, ptr addrspace(3) @global_smem, i64 %647, !dbg !48
  %649 = load float, ptr addrspace(3) %648, align 4, !dbg !48
  %650 = add nuw nsw i32 %urem, 257, !dbg !48
  %651 = zext nneg i32 %650 to i64, !dbg !48
  %652 = getelementptr float, ptr addrspace(3) @global_smem, i64 %651, !dbg !48
  %653 = load float, ptr addrspace(3) %652, align 4, !dbg !48
  %654 = add nuw nsw i32 %urem, 514, !dbg !48
  %655 = zext nneg i32 %654 to i64, !dbg !48
  %656 = getelementptr float, ptr addrspace(3) @global_smem, i64 %655, !dbg !48
  %657 = load float, ptr addrspace(3) %656, align 4, !dbg !48
  %658 = add nuw nsw i32 %urem, 771, !dbg !48
  %659 = zext nneg i32 %658 to i64, !dbg !48
  %660 = getelementptr float, ptr addrspace(3) @global_smem, i64 %659, !dbg !48
  %661 = load float, ptr addrspace(3) %660, align 4, !dbg !48
  %662 = add nuw nsw i32 %urem, 1028, !dbg !48
  %663 = zext nneg i32 %662 to i64, !dbg !48
  %664 = getelementptr float, ptr addrspace(3) @global_smem, i64 %663, !dbg !48
  %665 = load float, ptr addrspace(3) %664, align 4, !dbg !48
  %666 = add nuw nsw i32 %urem, 1285, !dbg !48
  %667 = zext nneg i32 %666 to i64, !dbg !48
  %668 = getelementptr float, ptr addrspace(3) @global_smem, i64 %667, !dbg !48
  %669 = load float, ptr addrspace(3) %668, align 4, !dbg !48
  %670 = add nuw nsw i32 %urem, 1542, !dbg !48
  %671 = zext nneg i32 %670 to i64, !dbg !48
  %672 = getelementptr float, ptr addrspace(3) @global_smem, i64 %671, !dbg !48
  %673 = load float, ptr addrspace(3) %672, align 4, !dbg !48
  %674 = add nuw nsw i32 %urem, 1799, !dbg !48
  %675 = zext nneg i32 %674 to i64, !dbg !48
  %676 = getelementptr float, ptr addrspace(3) @global_smem, i64 %675, !dbg !48
  %677 = load float, ptr addrspace(3) %676, align 4, !dbg !48
  %678 = add nuw nsw i32 %urem, 2056, !dbg !48
  %679 = zext nneg i32 %678 to i64, !dbg !48
  %680 = getelementptr float, ptr addrspace(3) @global_smem, i64 %679, !dbg !48
  %681 = load float, ptr addrspace(3) %680, align 4, !dbg !48
  %682 = add nuw nsw i32 %urem, 2313, !dbg !48
  %683 = zext nneg i32 %682 to i64, !dbg !48
  %684 = getelementptr float, ptr addrspace(3) @global_smem, i64 %683, !dbg !48
  %685 = load float, ptr addrspace(3) %684, align 4, !dbg !48
  %686 = add nuw nsw i32 %urem, 2570, !dbg !48
  %687 = zext nneg i32 %686 to i64, !dbg !48
  %688 = getelementptr float, ptr addrspace(3) @global_smem, i64 %687, !dbg !48
  %689 = load float, ptr addrspace(3) %688, align 4, !dbg !48
  %690 = add nuw nsw i32 %urem, 2827, !dbg !48
  %691 = zext nneg i32 %690 to i64, !dbg !48
  %692 = getelementptr float, ptr addrspace(3) @global_smem, i64 %691, !dbg !48
  %693 = load float, ptr addrspace(3) %692, align 4, !dbg !48
  %694 = add nuw nsw i32 %urem, 3084, !dbg !48
  %695 = zext nneg i32 %694 to i64, !dbg !48
  %696 = getelementptr float, ptr addrspace(3) @global_smem, i64 %695, !dbg !48
  %697 = load float, ptr addrspace(3) %696, align 4, !dbg !48
  %698 = add nuw nsw i32 %urem, 3341, !dbg !48
  %699 = zext nneg i32 %698 to i64, !dbg !48
  %700 = getelementptr float, ptr addrspace(3) @global_smem, i64 %699, !dbg !48
  %701 = load float, ptr addrspace(3) %700, align 4, !dbg !48
  %702 = add nuw nsw i32 %urem, 3598, !dbg !48
  %703 = zext nneg i32 %702 to i64, !dbg !48
  %704 = getelementptr float, ptr addrspace(3) @global_smem, i64 %703, !dbg !48
  %705 = load float, ptr addrspace(3) %704, align 4, !dbg !48
  %706 = add nuw nsw i32 %urem, 3855, !dbg !48
  %707 = zext nneg i32 %706 to i64, !dbg !48
  %708 = getelementptr float, ptr addrspace(3) @global_smem, i64 %707, !dbg !48
  %709 = load float, ptr addrspace(3) %708, align 4, !dbg !48
  %710 = fmul float %649, %564, !dbg !49
  %711 = fmul float %653, %564, !dbg !49
  %712 = fmul float %657, %564, !dbg !49
  %713 = fmul float %661, %564, !dbg !49
  %714 = fmul float %665, %564, !dbg !49
  %715 = fmul float %669, %564, !dbg !49
  %716 = fmul float %673, %564, !dbg !49
  %717 = fmul float %677, %564, !dbg !49
  %718 = fmul float %681, %564, !dbg !49
  %719 = fmul float %685, %564, !dbg !49
  %720 = fmul float %689, %564, !dbg !49
  %721 = fmul float %693, %564, !dbg !49
  %722 = fmul float %697, %564, !dbg !49
  %723 = fmul float %701, %564, !dbg !49
  %724 = fmul float %705, %564, !dbg !49
  %725 = fmul float %709, %564, !dbg !49
  %726 = fadd float %710, %563, !dbg !50
  %727 = fadd float %711, %563, !dbg !50
  %728 = fadd float %712, %563, !dbg !50
  %729 = fadd float %713, %563, !dbg !50
  %730 = fadd float %714, %563, !dbg !50
  %731 = fadd float %715, %563, !dbg !50
  %732 = fadd float %716, %563, !dbg !50
  %733 = fadd float %717, %563, !dbg !50
  %734 = fadd float %718, %563, !dbg !50
  %735 = fadd float %719, %563, !dbg !50
  %736 = fadd float %720, %563, !dbg !50
  %737 = fadd float %721, %563, !dbg !50
  %738 = fadd float %722, %563, !dbg !50
  %739 = fadd float %723, %563, !dbg !50
  %740 = fadd float %724, %563, !dbg !50
  %741 = fadd float %725, %563, !dbg !50
  %742 = mul i32 %35, 50, !dbg !51
  %743 = mul i32 %36, 50, !dbg !51
  %744 = mul i32 %37, 50, !dbg !51
  %745 = mul i32 %38, 50, !dbg !51
  %746 = mul i32 %39, 50, !dbg !51
  %747 = mul i32 %40, 50, !dbg !51
  %748 = mul i32 %41, 50, !dbg !51
  %749 = mul i32 %42, 50, !dbg !51
  %750 = add i32 %742, %60, !dbg !52
  %751 = add i32 %743, %60, !dbg !52
  %752 = add i32 %744, %60, !dbg !52
  %753 = add i32 %745, %60, !dbg !52
  %754 = add i32 %746, %60, !dbg !52
  %755 = add i32 %747, %60, !dbg !52
  %756 = add i32 %748, %60, !dbg !52
  %757 = add i32 %749, %60, !dbg !52
  %758 = sext i32 %750 to i64, !dbg !53
  %759 = getelementptr float, ptr addrspace(1) %5, i64 %758, !dbg !53
  %760 = sext i32 %751 to i64, !dbg !53
  %761 = getelementptr float, ptr addrspace(1) %5, i64 %760, !dbg !53
  %762 = sext i32 %752 to i64, !dbg !53
  %763 = getelementptr float, ptr addrspace(1) %5, i64 %762, !dbg !53
  %764 = sext i32 %753 to i64, !dbg !53
  %765 = getelementptr float, ptr addrspace(1) %5, i64 %764, !dbg !53
  %766 = sext i32 %754 to i64, !dbg !53
  %767 = getelementptr float, ptr addrspace(1) %5, i64 %766, !dbg !53
  %768 = sext i32 %755 to i64, !dbg !53
  %769 = getelementptr float, ptr addrspace(1) %5, i64 %768, !dbg !53
  %770 = sext i32 %756 to i64, !dbg !53
  %771 = getelementptr float, ptr addrspace(1) %5, i64 %770, !dbg !53
  %772 = sext i32 %757 to i64, !dbg !53
  %773 = getelementptr float, ptr addrspace(1) %5, i64 %772, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %774 = mul nuw nsw i32 %urem, 17, !dbg !54
  %775 = zext nneg i32 %774 to i64, !dbg !54
  %776 = getelementptr float, ptr addrspace(3) @global_smem, i64 %775, !dbg !54
  %777 = insertelement <1 x float> undef, float %726, i64 0, !dbg !54
  store <1 x float> %777, ptr addrspace(3) %776, align 4, !dbg !54
  %778 = add nuw nsw i32 %774, 1, !dbg !54
  %779 = zext nneg i32 %778 to i64, !dbg !54
  %780 = getelementptr float, ptr addrspace(3) @global_smem, i64 %779, !dbg !54
  %781 = insertelement <1 x float> undef, float %727, i64 0, !dbg !54
  store <1 x float> %781, ptr addrspace(3) %780, align 4, !dbg !54
  %782 = add nuw nsw i32 %774, 2, !dbg !54
  %783 = zext nneg i32 %782 to i64, !dbg !54
  %784 = getelementptr float, ptr addrspace(3) @global_smem, i64 %783, !dbg !54
  %785 = insertelement <1 x float> undef, float %728, i64 0, !dbg !54
  store <1 x float> %785, ptr addrspace(3) %784, align 4, !dbg !54
  %786 = add nuw nsw i32 %774, 3, !dbg !54
  %787 = zext nneg i32 %786 to i64, !dbg !54
  %788 = getelementptr float, ptr addrspace(3) @global_smem, i64 %787, !dbg !54
  %789 = insertelement <1 x float> undef, float %729, i64 0, !dbg !54
  store <1 x float> %789, ptr addrspace(3) %788, align 4, !dbg !54
  %790 = add nuw nsw i32 %774, 4, !dbg !54
  %791 = zext nneg i32 %790 to i64, !dbg !54
  %792 = getelementptr float, ptr addrspace(3) @global_smem, i64 %791, !dbg !54
  %793 = insertelement <1 x float> undef, float %730, i64 0, !dbg !54
  store <1 x float> %793, ptr addrspace(3) %792, align 4, !dbg !54
  %794 = add nuw nsw i32 %774, 5, !dbg !54
  %795 = zext nneg i32 %794 to i64, !dbg !54
  %796 = getelementptr float, ptr addrspace(3) @global_smem, i64 %795, !dbg !54
  %797 = insertelement <1 x float> undef, float %731, i64 0, !dbg !54
  store <1 x float> %797, ptr addrspace(3) %796, align 4, !dbg !54
  %798 = add nuw nsw i32 %774, 6, !dbg !54
  %799 = zext nneg i32 %798 to i64, !dbg !54
  %800 = getelementptr float, ptr addrspace(3) @global_smem, i64 %799, !dbg !54
  %801 = insertelement <1 x float> undef, float %732, i64 0, !dbg !54
  store <1 x float> %801, ptr addrspace(3) %800, align 4, !dbg !54
  %802 = add nuw nsw i32 %774, 7, !dbg !54
  %803 = zext nneg i32 %802 to i64, !dbg !54
  %804 = getelementptr float, ptr addrspace(3) @global_smem, i64 %803, !dbg !54
  %805 = insertelement <1 x float> undef, float %733, i64 0, !dbg !54
  store <1 x float> %805, ptr addrspace(3) %804, align 4, !dbg !54
  %806 = add nuw nsw i32 %774, 8, !dbg !54
  %807 = zext nneg i32 %806 to i64, !dbg !54
  %808 = getelementptr float, ptr addrspace(3) @global_smem, i64 %807, !dbg !54
  %809 = insertelement <1 x float> undef, float %734, i64 0, !dbg !54
  store <1 x float> %809, ptr addrspace(3) %808, align 4, !dbg !54
  %810 = add nuw nsw i32 %774, 9, !dbg !54
  %811 = zext nneg i32 %810 to i64, !dbg !54
  %812 = getelementptr float, ptr addrspace(3) @global_smem, i64 %811, !dbg !54
  %813 = insertelement <1 x float> undef, float %735, i64 0, !dbg !54
  store <1 x float> %813, ptr addrspace(3) %812, align 4, !dbg !54
  %814 = add nuw nsw i32 %774, 10, !dbg !54
  %815 = zext nneg i32 %814 to i64, !dbg !54
  %816 = getelementptr float, ptr addrspace(3) @global_smem, i64 %815, !dbg !54
  %817 = insertelement <1 x float> undef, float %736, i64 0, !dbg !54
  store <1 x float> %817, ptr addrspace(3) %816, align 4, !dbg !54
  %818 = add nuw nsw i32 %774, 11, !dbg !54
  %819 = zext nneg i32 %818 to i64, !dbg !54
  %820 = getelementptr float, ptr addrspace(3) @global_smem, i64 %819, !dbg !54
  %821 = insertelement <1 x float> undef, float %737, i64 0, !dbg !54
  store <1 x float> %821, ptr addrspace(3) %820, align 4, !dbg !54
  %822 = add nuw nsw i32 %774, 12, !dbg !54
  %823 = zext nneg i32 %822 to i64, !dbg !54
  %824 = getelementptr float, ptr addrspace(3) @global_smem, i64 %823, !dbg !54
  %825 = insertelement <1 x float> undef, float %738, i64 0, !dbg !54
  store <1 x float> %825, ptr addrspace(3) %824, align 4, !dbg !54
  %826 = add nuw nsw i32 %774, 13, !dbg !54
  %827 = zext nneg i32 %826 to i64, !dbg !54
  %828 = getelementptr float, ptr addrspace(3) @global_smem, i64 %827, !dbg !54
  %829 = insertelement <1 x float> undef, float %739, i64 0, !dbg !54
  store <1 x float> %829, ptr addrspace(3) %828, align 4, !dbg !54
  %830 = add nuw nsw i32 %774, 14, !dbg !54
  %831 = zext nneg i32 %830 to i64, !dbg !54
  %832 = getelementptr float, ptr addrspace(3) @global_smem, i64 %831, !dbg !54
  %833 = insertelement <1 x float> undef, float %740, i64 0, !dbg !54
  store <1 x float> %833, ptr addrspace(3) %832, align 4, !dbg !54
  %834 = add nuw nsw i32 %774, 15, !dbg !54
  %835 = zext nneg i32 %834 to i64, !dbg !54
  %836 = getelementptr float, ptr addrspace(3) @global_smem, i64 %835, !dbg !54
  %837 = insertelement <1 x float> undef, float %741, i64 0, !dbg !54
  store <1 x float> %837, ptr addrspace(3) %836, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %838 = load i32, ptr addrspace(3) %199, align 4, !dbg !54
  %839 = load i32, ptr addrspace(3) %203, align 4, !dbg !54
  %840 = load i32, ptr addrspace(3) %208, align 4, !dbg !54
  %841 = load i32, ptr addrspace(3) %212, align 4, !dbg !54
  %842 = load i32, ptr addrspace(3) %217, align 4, !dbg !54
  %843 = load i32, ptr addrspace(3) %221, align 4, !dbg !54
  %844 = load i32, ptr addrspace(3) %226, align 4, !dbg !54
  %845 = load i32, ptr addrspace(3) %230, align 4, !dbg !54
  %846 = load i32, ptr addrspace(3) %235, align 4, !dbg !54
  %847 = load i32, ptr addrspace(3) %239, align 4, !dbg !54
  %848 = load i32, ptr addrspace(3) %244, align 4, !dbg !54
  %849 = load i32, ptr addrspace(3) %248, align 4, !dbg !54
  %850 = load i32, ptr addrspace(3) %253, align 4, !dbg !54
  %851 = load i32, ptr addrspace(3) %257, align 4, !dbg !54
  %852 = load i32, ptr addrspace(3) %262, align 4, !dbg !54
  %853 = load i32, ptr addrspace(3) %266, align 4, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %838, i32 %839, ptr addrspace(1) %759, i1 %116) #5, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %840, i32 %841, ptr addrspace(1) %761, i1 %117) #5, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %842, i32 %843, ptr addrspace(1) %763, i1 %118) #5, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %844, i32 %845, ptr addrspace(1) %765, i1 %119) #5, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %846, i32 %847, ptr addrspace(1) %767, i1 %120) #5, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %848, i32 %849, ptr addrspace(1) %769, i1 %121) #5, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %850, i32 %851, ptr addrspace(1) %771, i1 %122) #5, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %852, i32 %853, ptr addrspace(1) %773, i1 %123) #5, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #2 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cixdsy45epigtua7hnnb2trqacs6zuo7dswwuahb3l5xhtzttbsb.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu/ix")
!4 = !{ptr @triton__0d1d2d3d4d5d6de7, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6de7, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6de7", linkageName: "triton__0d1d2d3d4d5d6de7", scope: !3, file: !3, line: 20, type: !8, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 23, scope: !7)
!11 = !DILocation(line: 26, column: 23, scope: !7)
!12 = !DILocation(line: 22, column: 28, scope: !7)
!13 = !DILocation(line: 22, column: 48, scope: !7)
!14 = !DILocation(line: 22, column: 53, scope: !7)
!15 = !DILocation(line: 22, column: 34, scope: !7)
!16 = !DILocation(line: 22, column: 58, scope: !7)
!17 = !DILocation(line: 24, column: 21, scope: !7)
!18 = !DILocation(line: 25, column: 28, scope: !7)
!19 = !DILocation(line: 25, column: 33, scope: !7)
!20 = !DILocation(line: 27, column: 21, scope: !7)
!21 = !DILocation(line: 29, column: 20, scope: !7)
!22 = !DILocation(line: 31, column: 20, scope: !7)
!23 = !DILocation(line: 31, column: 26, scope: !7)
!24 = !DILocation(line: 32, column: 18, scope: !7)
!25 = !DILocation(line: 34, column: 40, scope: !7)
!26 = !DILocation(line: 34, column: 52, scope: !7)
!27 = !DILocation(line: 34, column: 36, scope: !7)
!28 = !DILocation(line: 34, column: 47, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 66, scope: !7)
!31 = !DILocation(line: 34, column: 58, scope: !7)
!32 = !DILocation(line: 35, column: 38, scope: !7)
!33 = !DILocation(line: 35, column: 49, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 45, scope: !7)
!36 = !DILocation(line: 35, column: 30, scope: !7)
!37 = !DILocation(line: 35, column: 55, scope: !7)
!38 = !DILocation(line: 36, column: 30, scope: !7)
!39 = !DILocation(line: 36, column: 55, scope: !7)
!40 = !DILocation(line: 37, column: 31, scope: !7)
!41 = !DILocation(line: 37, column: 36, scope: !7)
!42 = !DILocation(line: 38, column: 31, scope: !7)
!43 = !DILocation(line: 38, column: 36, scope: !7)
!44 = !DILocation(line: 41, column: 18, scope: !7)
!45 = !DILocation(line: 43, column: 18, scope: !7)
!46 = !DILocation(line: 44, column: 27, scope: !7)
!47 = !DILocation(line: 39, column: 18, scope: !7)
!48 = !DILocation(line: 45, column: 18, scope: !7)
!49 = !DILocation(line: 46, column: 19, scope: !7)
!50 = !DILocation(line: 47, column: 20, scope: !7)
!51 = !DILocation(line: 48, column: 34, scope: !7)
!52 = !DILocation(line: 48, column: 31, scope: !7)
!53 = !DILocation(line: 48, column: 25, scope: !7)
!54 = !DILocation(line: 48, column: 47, scope: !7)
!55 = !DILocation(line: 48, column: 4, scope: !7)

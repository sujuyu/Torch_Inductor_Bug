; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton__0d1d2e(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !5 {
  %4 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %5 = shl i32 %4, 2, !dbg !8
  %6 = and i32 %5, 508, !dbg !8
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !9
  %8 = shl i32 %7, 10, !dbg !10
  %9 = or i32 %8, %6, !dbg !11
  %10 = or i32 %9, 1, !dbg !11
  %11 = or i32 %9, 2, !dbg !11
  %12 = or i32 %9, 3, !dbg !11
  %13 = or i32 %9, 512, !dbg !11
  %14 = or i32 %9, 513, !dbg !11
  %15 = or i32 %9, 514, !dbg !11
  %16 = or i32 %9, 515, !dbg !11
  %17 = icmp slt i32 %9, %2, !dbg !12
  %18 = icmp slt i32 %10, %2, !dbg !12
  %19 = icmp slt i32 %11, %2, !dbg !12
  %20 = icmp slt i32 %12, %2, !dbg !12
  %21 = icmp slt i32 %13, %2, !dbg !12
  %22 = icmp slt i32 %14, %2, !dbg !12
  %23 = icmp slt i32 %15, %2, !dbg !12
  %24 = icmp slt i32 %16, %2, !dbg !12
  %25 = srem i32 %9, 172, !dbg !13
  %26 = srem i32 %10, 172, !dbg !13
  %27 = srem i32 %11, 172, !dbg !13
  %28 = srem i32 %12, 172, !dbg !13
  %29 = srem i32 %13, 172, !dbg !13
  %30 = srem i32 %14, 172, !dbg !13
  %31 = srem i32 %15, 172, !dbg !13
  %32 = srem i32 %16, 172, !dbg !13
  %33 = sext i32 %9 to i64, !dbg !14
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !14
  %35 = sext i32 %10 to i64, !dbg !14
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !14
  %37 = sext i32 %11 to i64, !dbg !14
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !14
  %39 = sext i32 %12 to i64, !dbg !14
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !14
  %41 = sext i32 %13 to i64, !dbg !14
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !14
  %43 = sext i32 %14 to i64, !dbg !14
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !14
  %45 = sext i32 %15 to i64, !dbg !14
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !14
  %47 = sext i32 %16 to i64, !dbg !14
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !14
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %17) #1, !dbg !15
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %18) #1, !dbg !15
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %19) #1, !dbg !15
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %20) #1, !dbg !15
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %21) #1, !dbg !15
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %22) #1, !dbg !15
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %23) #1, !dbg !15
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %24) #1, !dbg !15
  %57 = sext i32 %25 to i64, !dbg !16
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !16
  %59 = sext i32 %26 to i64, !dbg !16
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !16
  %61 = sext i32 %27 to i64, !dbg !16
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !16
  %63 = sext i32 %28 to i64, !dbg !16
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !16
  %65 = sext i32 %29 to i64, !dbg !16
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !16
  %67 = sext i32 %30 to i64, !dbg !16
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !16
  %69 = sext i32 %31 to i64, !dbg !16
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !16
  %71 = sext i32 %32 to i64, !dbg !16
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !16
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %17) #1, !dbg !17
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %18) #1, !dbg !17
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %19) #1, !dbg !17
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %20) #1, !dbg !17
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %21) #1, !dbg !17
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %22) #1, !dbg !17
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %23) #1, !dbg !17
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %24) #1, !dbg !17
  %81 = insertelement <8 x i32> poison, i32 %56, i64 0, !dbg !15
  %82 = insertelement <8 x i32> %81, i32 %55, i64 1, !dbg !15
  %83 = insertelement <8 x i32> %82, i32 %54, i64 2, !dbg !15
  %84 = insertelement <8 x i32> %83, i32 %53, i64 3, !dbg !15
  %85 = insertelement <8 x i32> %84, i32 %52, i64 4, !dbg !15
  %86 = insertelement <8 x i32> %85, i32 %51, i64 5, !dbg !15
  %87 = insertelement <8 x i32> %86, i32 %50, i64 6, !dbg !15
  %88 = insertelement <8 x i32> %87, i32 %49, i64 7, !dbg !15
  %89 = bitcast <8 x i32> %88 to <8 x float>, !dbg !15
  %90 = insertelement <8 x i32> poison, i32 %80, i64 0, !dbg !17
  %91 = insertelement <8 x i32> %90, i32 %79, i64 1, !dbg !17
  %92 = insertelement <8 x i32> %91, i32 %78, i64 2, !dbg !17
  %93 = insertelement <8 x i32> %92, i32 %77, i64 3, !dbg !17
  %94 = insertelement <8 x i32> %93, i32 %76, i64 4, !dbg !17
  %95 = insertelement <8 x i32> %94, i32 %75, i64 5, !dbg !17
  %96 = insertelement <8 x i32> %95, i32 %74, i64 6, !dbg !17
  %97 = insertelement <8 x i32> %96, i32 %73, i64 7, !dbg !17
  %98 = bitcast <8 x i32> %97 to <8 x float>, !dbg !17
  %99 = fadd <8 x float> %89, %98, !dbg !18
  %100 = fcmp ogt <8 x float> %99, zeroinitializer, !dbg !19
  %101 = extractelement <8 x float> %99, i64 7, !dbg !20
  %102 = fmul float %101, 0x3F847AE140000000, !dbg !21
  %103 = extractelement <8 x float> %99, i64 6, !dbg !20
  %104 = fmul float %103, 0x3F847AE140000000, !dbg !21
  %105 = extractelement <8 x float> %99, i64 5, !dbg !20
  %106 = fmul float %105, 0x3F847AE140000000, !dbg !21
  %107 = extractelement <8 x float> %99, i64 4, !dbg !20
  %108 = fmul float %107, 0x3F847AE140000000, !dbg !21
  %109 = extractelement <8 x float> %99, i64 3, !dbg !20
  %110 = fmul float %109, 0x3F847AE140000000, !dbg !21
  %111 = extractelement <8 x float> %99, i64 2, !dbg !20
  %112 = fmul float %111, 0x3F847AE140000000, !dbg !21
  %113 = extractelement <8 x float> %99, i64 1, !dbg !20
  %114 = fmul float %113, 0x3F847AE140000000, !dbg !21
  %115 = extractelement <8 x float> %99, i64 0, !dbg !20
  %116 = fmul float %115, 0x3F847AE140000000, !dbg !21
  %117 = extractelement <8 x i1> %100, i64 7, !dbg !20
  %118 = select i1 %117, float %101, float %102, !dbg !20
  %119 = extractelement <8 x i1> %100, i64 6, !dbg !20
  %120 = select i1 %119, float %103, float %104, !dbg !20
  %121 = extractelement <8 x i1> %100, i64 5, !dbg !20
  %122 = select i1 %121, float %105, float %106, !dbg !20
  %123 = extractelement <8 x i1> %100, i64 4, !dbg !20
  %124 = select i1 %123, float %107, float %108, !dbg !20
  %125 = extractelement <8 x i1> %100, i64 3, !dbg !20
  %126 = select i1 %125, float %109, float %110, !dbg !20
  %127 = extractelement <8 x i1> %100, i64 2, !dbg !20
  %128 = select i1 %127, float %111, float %112, !dbg !20
  %129 = extractelement <8 x i1> %100, i64 1, !dbg !20
  %130 = select i1 %129, float %113, float %114, !dbg !20
  %131 = extractelement <8 x i1> %100, i64 0, !dbg !20
  %132 = select i1 %131, float %115, float %116, !dbg !20
  %133 = bitcast float %118 to i32, !dbg !22
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %133, ptr addrspace(1) %34, i1 %17) #1, !dbg !22
  %134 = bitcast float %120 to i32, !dbg !22
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %134, ptr addrspace(1) %36, i1 %18) #1, !dbg !22
  %135 = bitcast float %122 to i32, !dbg !22
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %135, ptr addrspace(1) %38, i1 %19) #1, !dbg !22
  %136 = bitcast float %124 to i32, !dbg !22
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %136, ptr addrspace(1) %40, i1 %20) #1, !dbg !22
  %137 = bitcast float %126 to i32, !dbg !22
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %137, ptr addrspace(1) %42, i1 %21) #1, !dbg !22
  %138 = bitcast float %128 to i32, !dbg !22
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %138, ptr addrspace(1) %44, i1 %22) #1, !dbg !22
  %139 = bitcast float %130 to i32, !dbg !22
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %139, ptr addrspace(1) %46, i1 %23) #1, !dbg !22
  %140 = bitcast float %132 to i32, !dbg !22
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %140, ptr addrspace(1) %48, i1 %24) #1, !dbg !22
  ret void, !dbg !23
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cetwnsq7peyp6mbxhn3synhkfsx2acgkvdpqup6mlp3vx6echqnh.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu/et")
!3 = !{ptr @triton__0d1d2e, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2e, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2e", linkageName: "triton__0d1d2e", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 22, column: 36, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 21, column: 33, scope: !5)
!11 = !DILocation(line: 22, column: 23, scope: !5)
!12 = !DILocation(line: 23, column: 21, scope: !5)
!13 = !DILocation(line: 25, column: 18, scope: !5)
!14 = !DILocation(line: 26, column: 34, scope: !5)
!15 = !DILocation(line: 26, column: 39, scope: !5)
!16 = !DILocation(line: 27, column: 30, scope: !5)
!17 = !DILocation(line: 27, column: 35, scope: !5)
!18 = !DILocation(line: 28, column: 18, scope: !5)
!19 = !DILocation(line: 30, column: 18, scope: !5)
!20 = !DILocation(line: 33, column: 32, scope: !5)
!21 = !DILocation(line: 32, column: 18, scope: !5)
!22 = !DILocation(line: 34, column: 39, scope: !5)
!23 = !DILocation(line: 34, column: 4, scope: !5)

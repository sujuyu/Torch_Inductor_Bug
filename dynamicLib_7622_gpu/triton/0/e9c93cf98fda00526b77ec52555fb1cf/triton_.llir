; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton__0d1d2d3d4d5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = shl i32 %7, 2, !dbg !10
  %9 = and i32 %8, 508, !dbg !10
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !11
  %11 = shl i32 %10, 9, !dbg !12
  %12 = or i32 %11, %9, !dbg !13
  %13 = icmp slt i32 %12, %5, !dbg !14
  %14 = srem i32 %12, 128, !dbg !15
  %15 = sext i32 %12 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !16
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %16, i1 %13) #4, !dbg !17
  %18 = sext i32 %14 to i64, !dbg !18
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !18
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 %13) #4, !dbg !19
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !20
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 %13) #4, !dbg !21
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !21
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !21
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !21
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !21
  %27 = bitcast i32 %23 to float, !dbg !21
  %28 = bitcast i32 %24 to float, !dbg !21
  %29 = bitcast i32 %25 to float, !dbg !21
  %30 = bitcast i32 %26 to float, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !22
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %13) #4, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %4, i64 %18, !dbg !24
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %13) #4, !dbg !25
  %35 = fadd float %27, 0x3F50624DE0000000, !dbg !26
  %36 = fadd float %28, 0x3F50624DE0000000, !dbg !26
  %37 = fadd float %29, 0x3F50624DE0000000, !dbg !26
  %38 = fadd float %30, 0x3F50624DE0000000, !dbg !26
  %39 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not.i = icmp eq i32 %39, 0, !dbg !27
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !27
  %.not1.i = icmp eq i32 %40, 0, !dbg !27
  br i1 %.not.i, label %46, label %41, !dbg !27

41:                                               ; preds = %6
  br i1 %.not1.i, label %44, label %42, !dbg !27

42:                                               ; preds = %41
  %43 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %35) #4, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

44:                                               ; preds = %41
  %45 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %35) #4, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

46:                                               ; preds = %6
  br i1 %.not1.i, label %49, label %47, !dbg !27

47:                                               ; preds = %46
  %48 = tail call float @llvm.nvvm.sqrt.rn.f(float %35) #4, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

49:                                               ; preds = %46
  %50 = tail call float @llvm.nvvm.sqrt.approx.f(float %35) #4, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

__nv_sqrtf.exit:                                  ; preds = %42, %44, %47, %49
  %.0.i = phi float [ %43, %42 ], [ %45, %44 ], [ %48, %47 ], [ %50, %49 ], !dbg !27
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not.i1 = icmp eq i32 %51, 0, !dbg !27
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !27
  %.not1.i4 = icmp eq i32 %52, 0, !dbg !27
  br i1 %.not.i1, label %58, label %53, !dbg !27

53:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %56, label %54, !dbg !27

54:                                               ; preds = %53
  %55 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %36) #4, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

56:                                               ; preds = %53
  %57 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %36) #4, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

58:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %61, label %59, !dbg !27

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.f(float %36) #4, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.f(float %36) #4, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

__nv_sqrtf.exit5:                                 ; preds = %54, %56, %59, %61
  %.0.i3 = phi float [ %55, %54 ], [ %57, %56 ], [ %60, %59 ], [ %62, %61 ], !dbg !27
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not.i6 = icmp eq i32 %63, 0, !dbg !27
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !27
  %.not1.i9 = icmp eq i32 %64, 0, !dbg !27
  br i1 %.not.i6, label %70, label %65, !dbg !27

65:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %68, label %66, !dbg !27

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %37) #4, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %37) #4, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

70:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %73, label %71, !dbg !27

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.f(float %37) #4, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.f(float %37) #4, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

__nv_sqrtf.exit10:                                ; preds = %66, %68, %71, %73
  %.0.i8 = phi float [ %67, %66 ], [ %69, %68 ], [ %72, %71 ], [ %74, %73 ], !dbg !27
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not.i11 = icmp eq i32 %75, 0, !dbg !27
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !27
  %.not1.i14 = icmp eq i32 %76, 0, !dbg !27
  br i1 %.not.i11, label %82, label %77, !dbg !27

77:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %80, label %78, !dbg !27

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %38) #4, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %38) #4, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

82:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %85, label %83, !dbg !27

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %38) #4, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %38) #4, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

__nv_sqrtf.exit15:                                ; preds = %78, %80, %83, %85
  %.0.i13 = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !27
  %87 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !17
  %88 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !19
  %89 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !17
  %90 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !19
  %91 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !17
  %92 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !19
  %93 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !17
  %94 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !19
  %95 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !25
  %96 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !25
  %97 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !25
  %98 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !25
  %99 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !23
  %100 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !23
  %101 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !23
  %102 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !23
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !28
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !28
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !28
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !28
  %107 = insertelement <4 x i32> poison, i32 %87, i64 0, !dbg !17
  %108 = insertelement <4 x i32> %107, i32 %89, i64 1, !dbg !17
  %109 = insertelement <4 x i32> %108, i32 %91, i64 2, !dbg !17
  %110 = insertelement <4 x i32> %109, i32 %93, i64 3, !dbg !17
  %111 = bitcast <4 x i32> %110 to <4 x float>, !dbg !17
  %112 = insertelement <4 x i32> poison, i32 %88, i64 0, !dbg !19
  %113 = insertelement <4 x i32> %112, i32 %90, i64 1, !dbg !19
  %114 = insertelement <4 x i32> %113, i32 %92, i64 2, !dbg !19
  %115 = insertelement <4 x i32> %114, i32 %94, i64 3, !dbg !19
  %116 = bitcast <4 x i32> %115 to <4 x float>, !dbg !19
  %117 = fsub <4 x float> %111, %116, !dbg !29
  %118 = insertelement <4 x i32> poison, i32 %95, i64 0, !dbg !25
  %119 = insertelement <4 x i32> %118, i32 %96, i64 1, !dbg !25
  %120 = insertelement <4 x i32> %119, i32 %97, i64 2, !dbg !25
  %121 = insertelement <4 x i32> %120, i32 %98, i64 3, !dbg !25
  %122 = bitcast <4 x i32> %121 to <4 x float>, !dbg !25
  %123 = insertelement <4 x i32> poison, i32 %99, i64 0, !dbg !23
  %124 = insertelement <4 x i32> %123, i32 %100, i64 1, !dbg !23
  %125 = insertelement <4 x i32> %124, i32 %101, i64 2, !dbg !23
  %126 = insertelement <4 x i32> %125, i32 %102, i64 3, !dbg !23
  %127 = bitcast <4 x i32> %126 to <4 x float>, !dbg !23
  %128 = insertelement <4 x float> poison, float %106, i64 0, !dbg !30
  %129 = insertelement <4 x float> %128, float %105, i64 1, !dbg !30
  %130 = insertelement <4 x float> %129, float %104, i64 2, !dbg !30
  %131 = insertelement <4 x float> %130, float %103, i64 3, !dbg !30
  %132 = fmul <4 x float> %117, %131, !dbg !30
  %133 = fmul <4 x float> %132, %127, !dbg !31
  %134 = fadd <4 x float> %133, %122, !dbg !32
  %135 = fcmp ogt <4 x float> %134, zeroinitializer, !dbg !33
  %136 = extractelement <4 x float> %134, i64 3, !dbg !34
  %137 = fmul float %136, 0x3F847AE140000000, !dbg !35
  %138 = extractelement <4 x float> %134, i64 2, !dbg !34
  %139 = fmul float %138, 0x3F847AE140000000, !dbg !35
  %140 = extractelement <4 x float> %134, i64 1, !dbg !34
  %141 = fmul float %140, 0x3F847AE140000000, !dbg !35
  %142 = extractelement <4 x float> %134, i64 0, !dbg !34
  %143 = fmul float %142, 0x3F847AE140000000, !dbg !35
  %144 = extractelement <4 x i1> %135, i64 3, !dbg !34
  %145 = select i1 %144, float %136, float %137, !dbg !34
  %146 = extractelement <4 x i1> %135, i64 2, !dbg !34
  %147 = select i1 %146, float %138, float %139, !dbg !34
  %148 = extractelement <4 x i1> %135, i64 1, !dbg !34
  %149 = select i1 %148, float %140, float %141, !dbg !34
  %150 = extractelement <4 x i1> %135, i64 0, !dbg !34
  %151 = select i1 %150, float %142, float %143, !dbg !34
  %152 = bitcast float %145 to i32, !dbg !36
  %153 = bitcast float %147 to i32, !dbg !36
  %154 = bitcast float %149 to i32, !dbg !36
  %155 = bitcast float %151 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %152, i32 %153, i32 %154, i32 %155, ptr addrspace(1) %16, i1 %13) #4, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: alwaysinline nounwind
define float @__nv_sqrtf(float %x) local_unnamed_addr #1 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not = icmp eq i32 %1, 0
  %2 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4
  %.not1 = icmp eq i32 %2, 0
  br i1 %.not, label %8, label %3

3:                                                ; preds = %0
  br i1 %.not1, label %6, label %4

4:                                                ; preds = %3
  %5 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %x) #4
  br label %__nvvm_sqrt_f.exit

6:                                                ; preds = %3
  %7 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %x) #4
  br label %__nvvm_sqrt_f.exit

8:                                                ; preds = %0
  br i1 %.not1, label %11, label %9

9:                                                ; preds = %8
  %10 = tail call float @llvm.nvvm.sqrt.rn.f(float %x) #4
  br label %__nvvm_sqrt_f.exit

11:                                               ; preds = %8
  %12 = tail call float @llvm.nvvm.sqrt.approx.f(float %x) #4
  br label %__nvvm_sqrt_f.exit

__nvvm_sqrt_f.exit:                               ; preds = %4, %6, %9, %11
  %.0 = phi float [ %5, %4 ], [ %7, %6 ], [ %10, %9 ], [ %12, %11 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cyyvalbqnff5omgmlnxer3muf3xlwusgrwxmgqidozscbgli5hjw.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu/yy")
!4 = !{ptr @triton__0d1d2d3d4d5de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5de, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5de", linkageName: "triton__0d1d2d3d4d5de", scope: !3, file: !3, line: 20, type: !8, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 36, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 21, column: 33, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 18, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 18, scope: !7)
!27 = !DILocation(line: 34, column: 26, scope: !7)
!28 = !DILocation(line: 35, column: 15, scope: !7)
!29 = !DILocation(line: 31, column: 18, scope: !7)
!30 = !DILocation(line: 38, column: 19, scope: !7)
!31 = !DILocation(line: 39, column: 20, scope: !7)
!32 = !DILocation(line: 40, column: 20, scope: !7)
!33 = !DILocation(line: 42, column: 20, scope: !7)
!34 = !DILocation(line: 45, column: 35, scope: !7)
!35 = !DILocation(line: 44, column: 20, scope: !7)
!36 = !DILocation(line: 46, column: 40, scope: !7)
!37 = !DILocation(line: 46, column: 4, scope: !7)

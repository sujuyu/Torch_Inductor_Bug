; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d34(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !5 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %7 = and i32 %6, 31, !dbg !8
  %8 = lshr i32 %6, 5, !dbg !8
  %9 = and i32 %8, 7, !dbg !9
  %10 = or i32 %9, 8, !dbg !9
  %11 = or i32 %9, 48, !dbg !9
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 5, !dbg !11
  %14 = or i32 %13, %7, !dbg !8
  %15 = icmp slt i32 %14, %3, !dbg !12
  %16 = icmp ult i32 %11, 50, !dbg !13
  %17 = sext i32 %14 to i64, !dbg !14
  %18 = getelementptr double, ptr addrspace(1) %0, i64 %17, !dbg !14
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %15) #3, !dbg !15
  %20 = bitcast i64 %19 to double, !dbg !15
  %21 = sitofp i32 %9 to double, !dbg !16
  %22 = sitofp i32 %10 to double, !dbg !16
  %23 = sitofp i32 %11 to double, !dbg !16
  %24 = fcmp olt double %20, 5.000000e+01, !dbg !17
  %25 = fcmp uno double %20, 0.000000e+00, !dbg !21
  %26 = or i1 %24, %25, !dbg !22
  %27 = select i1 %26, double %20, double 5.000000e+01, !dbg !23
  %28 = fcmp ogt double %27, %21, !dbg !24
  %29 = fcmp ogt double %27, %22, !dbg !24
  %30 = insertelement <4 x i32> poison, i32 %9, i64 0, !dbg !9
  %31 = shufflevector <4 x i32> %30, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !9
  %32 = or <4 x i32> %31, <i32 40, i32 32, i32 24, i32 16>, !dbg !9
  %33 = sitofp <4 x i32> %32 to <4 x double>, !dbg !16
  %34 = insertelement <4 x double> poison, double %27, i64 0, !dbg !24
  %35 = shufflevector <4 x double> %34, <4 x double> poison, <4 x i32> zeroinitializer, !dbg !24
  %36 = fcmp ogt <4 x double> %35, %33, !dbg !24
  %37 = fcmp ogt double %27, %23, !dbg !24
  %38 = uitofp i1 %28 to float, !dbg !25
  %39 = uitofp i1 %29 to float, !dbg !25
  %40 = extractelement <4 x i1> %36, i64 3, !dbg !26
  %41 = uitofp i1 %40 to float, !dbg !25
  %42 = extractelement <4 x i1> %36, i64 2, !dbg !26
  %43 = uitofp i1 %42 to float, !dbg !25
  %44 = extractelement <4 x i1> %36, i64 1, !dbg !26
  %45 = uitofp i1 %44 to float, !dbg !25
  %46 = extractelement <4 x i1> %36, i64 0, !dbg !26
  %47 = uitofp i1 %46 to float, !dbg !25
  %48 = uitofp i1 %37 to float, !dbg !25
  %49 = and i1 %16, %15, !dbg !27
  %50 = select i1 %49, float %48, float 0.000000e+00, !dbg !28
  %51 = fadd float %38, %39, !dbg !29
  %52 = fadd float %51, %41, !dbg !29
  %53 = fadd float %52, %43, !dbg !29
  %54 = fadd float %53, %45, !dbg !29
  %55 = fadd float %54, %47, !dbg !29
  %56 = select i1 %15, float %55, float 0.000000e+00, !dbg !29
  %57 = fadd float %50, %56, !dbg !29
  %58 = shl nuw nsw i32 %7, 3, !dbg !35
  %59 = or i32 %58, %9, !dbg !35
  %60 = zext nneg i32 %59 to i64, !dbg !35
  %61 = getelementptr float, ptr addrspace(3) @global_smem, i64 %60, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, float %57, i1 true) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %62 = icmp slt i32 %6, 256, !dbg !35
  %63 = sext i32 %6 to i64, !dbg !35
  %64 = getelementptr float, ptr addrspace(3) @global_smem, i64 %63, !dbg !35
  %65 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %64, i1 %62) #3, !dbg !35
  %66 = bitcast float %65 to i32, !dbg !35
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 4, i32 31), !dbg !35
  %68 = bitcast i32 %67 to float, !dbg !35
  %69 = fadd float %65, %68, !dbg !29
  %70 = bitcast float %69 to i32, !dbg !35
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 2, i32 31), !dbg !35
  %72 = bitcast i32 %71 to float, !dbg !35
  %73 = fadd float %69, %72, !dbg !29
  %74 = bitcast float %73 to i32, !dbg !35
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 1, i32 31), !dbg !35
  %76 = bitcast i32 %75 to float, !dbg !35
  %77 = fadd float %73, %76, !dbg !29
  %78 = and i32 %6, 7, !dbg !35
  %79 = icmp eq i32 %78, 0, !dbg !35
  %80 = and i1 %62, %79, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, float %77, i1 %80) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %81 = zext nneg i32 %58 to i64, !dbg !35
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i64 %81, !dbg !35
  %83 = load float, ptr addrspace(3) %82, align 4, !dbg !35
  %84 = fcmp oeq float %83, 0.000000e+00, !dbg !37
  %85 = or i1 %28, %84, !dbg !26
  %86 = or i1 %29, %84, !dbg !26
  %87 = or i1 %40, %84, !dbg !26
  %88 = or i1 %42, %84, !dbg !26
  %89 = or i1 %44, %84, !dbg !26
  %90 = or i1 %46, %84, !dbg !26
  %91 = or i1 %37, %84, !dbg !26
  %92 = uitofp i1 %85 to float, !dbg !38
  %93 = uitofp i1 %86 to float, !dbg !38
  %94 = uitofp i1 %87 to float, !dbg !38
  %95 = uitofp i1 %88 to float, !dbg !38
  %96 = uitofp i1 %89 to float, !dbg !38
  %97 = uitofp i1 %90 to float, !dbg !38
  %98 = uitofp i1 %91 to float, !dbg !38
  %99 = select i1 %49, float %98, float 0.000000e+00, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %100 = fadd float %92, %93, !dbg !42
  %101 = fadd float %100, %94, !dbg !42
  %102 = fadd float %101, %95, !dbg !42
  %103 = fadd float %102, %96, !dbg !42
  %104 = fadd float %103, %97, !dbg !42
  %105 = select i1 %15, float %104, float 0.000000e+00, !dbg !42
  %106 = fadd float %99, %105, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, float %106, i1 true) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %107 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %64, i1 %62) #3, !dbg !40
  %108 = bitcast float %107 to i32, !dbg !40
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 4, i32 31), !dbg !40
  %110 = bitcast i32 %109 to float, !dbg !40
  %111 = fadd float %107, %110, !dbg !42
  %112 = bitcast float %111 to i32, !dbg !40
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 2, i32 31), !dbg !40
  %114 = bitcast i32 %113 to float, !dbg !40
  %115 = fadd float %111, %114, !dbg !42
  %116 = bitcast float %115 to i32, !dbg !40
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 1, i32 31), !dbg !40
  %118 = bitcast i32 %117 to float, !dbg !40
  %119 = fadd float %115, %118, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, float %119, i1 %80) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %120 = load i32, ptr addrspace(3) %82, align 4, !dbg !40
  %121 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !45
  %122 = icmp eq i32 %9, 0, !dbg !46
  %123 = bitcast float %83 to i32, !dbg !46
  %124 = and i1 %122, %15, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %123, ptr addrspace(1) %121, i1 %124) #3, !dbg !46
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %120, ptr addrspace(1) %125, i1 %124) #3, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cgrbp2uhbknxl6c2uixmuezofacno5b2jtf7dynjfvhd772dsrlj.py", directory: "/home/admin/zy429782/fx_experiments/torch_aot_tool/dynamicLib_7622_gpu/gr")
!3 = !{ptr @triton__0d1d2d34, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d34, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d34", linkageName: "triton__0d1d2d34", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 23, scope: !5)
!9 = !DILocation(line: 26, column: 13, scope: !5)
!10 = !DILocation(line: 23, column: 28, scope: !5)
!11 = !DILocation(line: 23, column: 33, scope: !5)
!12 = !DILocation(line: 25, column: 21, scope: !5)
!13 = !DILocation(line: 28, column: 21, scope: !5)
!14 = !DILocation(line: 31, column: 30, scope: !5)
!15 = !DILocation(line: 31, column: 35, scope: !5)
!16 = !DILocation(line: 33, column: 19, scope: !5)
!17 = !DILocation(line: 37, column: 15, scope: !18, inlinedAt: !20)
!18 = distinct !DILexicalBlockFile(scope: !5, file: !19, discriminator: 0)
!19 = !DIFile(filename: "triton_helpers.py", directory: "/home/admin/zy429782/torch_folder/pytorch-2.3.1/torch/_inductor")
!20 = !DILocation(line: 35, column: 40, scope: !18)
!21 = !DILocation(line: 39, column: 21, scope: !18, inlinedAt: !20)
!22 = !DILocation(line: 39, column: 16, scope: !18, inlinedAt: !20)
!23 = !DILocation(line: 40, column: 29, scope: !18, inlinedAt: !20)
!24 = !DILocation(line: 36, column: 18, scope: !5)
!25 = !DILocation(line: 37, column: 19, scope: !5)
!26 = !DILocation(line: 43, column: 19, scope: !5)
!27 = !DILocation(line: 39, column: 28, scope: !5)
!28 = !DILocation(line: 39, column: 41, scope: !5)
!29 = !DILocation(line: 233, column: 15, scope: !30, inlinedAt: !33)
!30 = distinct !DILexicalBlockFile(scope: !32, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/admin/zy429782/miniforge3/envs/compiled_torch/lib/python3.8/site-packages/triton/language")
!32 = distinct !DILexicalBlockFile(scope: !5, file: !31, discriminator: 0)
!33 = !DILocation(line: 243, column: 36, scope: !30, inlinedAt: !34)
!34 = !DILocation(line: 40, column: 25, scope: !30)
!35 = !DILocation(line: 243, column: 36, scope: !32, inlinedAt: !36)
!36 = !DILocation(line: 40, column: 25, scope: !32)
!37 = !DILocation(line: 42, column: 21, scope: !5)
!38 = !DILocation(line: 44, column: 21, scope: !5)
!39 = !DILocation(line: 46, column: 43, scope: !5)
!40 = !DILocation(line: 243, column: 36, scope: !32, inlinedAt: !41)
!41 = !DILocation(line: 47, column: 26, scope: !32)
!42 = !DILocation(line: 233, column: 15, scope: !30, inlinedAt: !43)
!43 = !DILocation(line: 243, column: 36, scope: !30, inlinedAt: !44)
!44 = !DILocation(line: 47, column: 26, scope: !30)
!45 = !DILocation(line: 48, column: 25, scope: !5)
!46 = !DILocation(line: 48, column: 37, scope: !5)
!47 = !DILocation(line: 49, column: 25, scope: !5)
!48 = !DILocation(line: 49, column: 37, scope: !5)
!49 = !DILocation(line: 49, column: 4, scope: !5)
